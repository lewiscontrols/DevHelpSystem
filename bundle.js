/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 93);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(10);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(19);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var DOMProperty = __webpack_require__(15);
var ReactDOMComponentFlags = __webpack_require__(63);

var invariant = __webpack_require__(0);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(61)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(198)();
}


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(194);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(196)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./application.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./application.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(20);

var ReactCurrentOwner = __webpack_require__(12);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(118);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(67);
var PooledClass = __webpack_require__(17);
var ReactFeatureFlags = __webpack_require__(68);
var ReactReconciler = __webpack_require__(21);
var Transaction = __webpack_require__(30);

var invariant = __webpack_require__(0);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(17);

var emptyFunction = __webpack_require__(10);
var warning = __webpack_require__(1);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(12);

var warning = __webpack_require__(1);
var canDefineProperty = __webpack_require__(27);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(57);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = [{"name":"Savecurrentspeciesmachinevaluestodisk","menu":"FileOptions","idNum":"000026","type":"help","title":"Save Current Species && Machine Values To Disk","image":"./app/img/hlpSpeciesDisk.png","path":"Main Menu / File Options / Save Current Species And Machines Values","content":"This option allows you to rename any of the current species and save their descriptions permanently.  For example, if you primarily saw Ash and Maple, you could rename Species A to Ash and Species B to Maple, in order to make maintenance of the species easier. \n\n This screen is also used to create backups of system values.  Backups are a form of insurance that can keep your system running even if the worst happens; therefore frequent backups are recommended.  You can save machine parameters to the hard drive (the first checkbox) or you can back up values to a compact flash card (the second checkbox).  The flash card may be removed and inserted into another computer if the primary machine cannot operate normally.\n\n To recover the hard drive backup, use option d below (Recover Machine Values).  To recover the flash backup, you will need to exit the Carriage Menu program and use the Recover Values From Flash icon in the Carriage Menu directory (from Windows, Start->Carriage Menu->Recover Values From Flash) to choose which parameters to recover. \n ","section":"SECTION IV","video":"n"},{"name":"Openspeciesvaluesfromdisk","menu":"FileOptions","idNum":"000023","type":"help","title":"Open Species Values From Disk","image":"./app/img/hlpSpeciesSetup.png","path":"Main Menu / File Options / Open Species Values From Disk","content":"You may have many different species files saved and available for use at any time.  This option allows you to select which of those permanent species values are associated with the species buttons on the console.","section":"SECTION IV","video":"n"},{"name":"Recovermachinevalues","menu":"FileOptions","idNum":"000027","type":"help","title":"Recover Machine Values","image":"./app/img/hlpDefault.png","path":"Main Menu / File Options / Recover Machine Values","content":"Select this menu to recover your systems default values.\n\n<b>WARNING: </b>Do not run this unless instructed by an LCI employee.","section":"Section IV","video":"n"},{"name":"Loaddefaultvalues","menu":"FileOptions","idNum":"000020","type":"help","title":"Load Default Values","image":"./app/img/fileOptions.PNG","path":"Main Menu / View and Report Options","content":"This option loads default values.  This should only be used as a last resort because it will restore the program’s operating values to the state they were in when the system was initially installed.  Any changes you have made to operating or machine parameters will be lost, except for what you may have saved on Flash.\n\n","section":"SECTION IV","video":"y"},{"name":"Boardandcantsizessetup","menu":"LumberOptions","idNum":"000266","type":"help","title":"Board and Cant Sizes Setup","image":"./app/img/boardAndCant.PNG","path":"","content":"In this table you define and number all the boards and cants that you normally manufacture, even those that are not always in the current production run. \n\nThe order in which cants and boards are entered is important. IN GENERAL, START WITH THE SMALLEST BOARD AND WORK UP TO THE LARGEST CANT. The Cant Matrix sawing solutions (if used) checks the fill mask and tries the highest numbered active cant possible. If that cant does not fit it will go to the next lower numbered active cant. The system will continue to search until it finds a cant that fits or determines no active cants will fit. It will then look at fill boards in the same way, highest to lowest number.\n\nThe Board and Cants Sizes Setup menu will also set parameters for boards: minimum width, minimum length and whether to send a jacket board out with or without a slab. The options for Manual Entry are auto, interior, or exterior. Auto and exterior perform the same function, placing manual entries on the outside of the log. If a boards manual entry is set to interior, when a sawyer enters the piece on a computed run, it may be placed near the center of the log, depending on other items in the fill mask.\n\nIf your system is equipped with variable cants, you will have additional parameters for entering a Size Tolerance (under/over) and a Cant Size Adjustment Selection (fixed/variable). If a cant is set up as variable, the system will make it within the under size tolerance you specify in order to find an extra or better board out of the log or it will make it within the over size tolerance in order to eliminate a shim line. Note, only use the over tolerance to eliminate shims when computing on an already sawn face. In either case, the system will make the cant as close to nominal as possible.\n\nExample: To get cants from 5.875 to 6.125, enter the actual cant size of 6.125 and an under tolerance of 0.250. To get cants from 8.125 to 8.250, enter the actual cant size of 8.250 and an under tolerance of 0.125.","section":"SECTION IV","video":"n"},{"name":"Speciessetup","menu":"LumberOptions","idNum":"000260","type":"help","title":"Species Setup","image":"./app/img/hlpSpeciesSet.png","path":"Main Menu / Lumber Options / Species Setup","content":"The Species Setup menu is used to turn on or off several very important functions by species.\n\nDollar Driven (yes or no) determines whether a species operates in Cant Matrix or Dollar Driven mode.  NOTE:  Many systems specifically set up for hardwood or grade softwood will not have Dollar Driven solutions enabled.\n\n'The second line, (Tradeoff Dollar) is a part of the Dollar Driven sawing program.  When the first line, (Dollar Driven yes or no) is set to No and you are sawing in Cant Matrix mode, Tradeoff Dollar automatically disappears.  When Dollar Driven Yes is chosen, a dollar amount appears in the column.  This value is a penalty that applies to a solution value if the computer chooses a solution with an opening face that is longer and wider than minimum.  The higher the penalty, the more closely Dollar Driven will call for minimum face solutions.  If the penalty is low, Dollar Driven will more freely choose faces that reflect higher dollar value but may not necessarily maximize recovery.\n\nOdd Board structures the solutions computed on the front face of an axis.  The system generates an image of the log and places a cant in the usable wood in accordance with the cant selection rules.  It then tries to utilize the remaining usable wood by placing boards between the cant and the faces.  If enough usable wood remains to make an odd number of boards, this entry instructs the system where to place the odd board.   It can be placed on the front or the back, or the system can be forced to compute symmetrically.\n\n Max Cant Face Difference applies to Dollar Driven and Cant Matrix solutions and is used to restrict side shift of a center cant.  The smaller the number, the more the cant will be forced into the center of the log.\n\nFill with Last Board (yes) describes a computed solution where the system fills with the last board the sawyer manually selects until no more will fit.  The computer then tries to fill from the fill mask.  Selecting (no) describes a fill completed directly from the mask without regard to the last board chosen by the sawyer.\n\nLumber Lengths -  In this menu, the nominal lengths are defined for all species cut.  These lengths must be in ascending order and will match those in the Cant Length / Width Matrix.\n\nMetric Units / English Units – Your system may or may not include this option.  Checking this option changes the species to the displayed units (Metric or English).  If your system is normally Metric, it allows you to enter species parameters in English units.  If your system is normally English, it allows you to enter species parameters in Metric units.\n\n","section":"SECTION IV","video":"n"},{"name":"Optimizeradjustments","menu":"LumberOptions","idNum":"000278","type":"help","title":"Optimizer Adjustments","image":"./app/img/hlpOiler.png","path":"","content":"<b>Prevent cant from growing:</b> Prevents from selecting a bigger cant on the backside than what was selected on the front side.\n\n<b>Always center:</b> A forced centering of the cant.\n\n<b><u>Front Faces</u></b>\n<b>Cant face insurance:</b>Cant Insurance  Cant insurance is the amount of extra face width required to fit an allowable cant into a log.For example, an 8&quot cant with a 4&quot, cant face requirement and 1&quot of cant insurance would require a 5&quot full length face to qualify. The purpose of the insurance is to improve the chance that the chosen cant will be preserved and not downgraded when the opposite face is scanned and the log re-optimized. The more cant insurance that is applied, the more likely it is that the cant selected on the back face will match the cant selected for the front.\n\n<b><u>Back Faces</u></b>\n<b>Cant face violation:</b> Accounts for dips or restrictions in the cant face. Adjusting this value allows the system to select a cant on a back face when the cant face minus the cant face violation brings the cant face within acceptable limits.\n<b>Board face violation - Width:</b> Accounts for a dips or restrictions in the board face width. Adjusting this value allows the system to place a marginally narrow board on the outside of a log if the board face minus the face violation (width) value will bring the board within face width limits.\n<b>Board face violation  Length:</b> Accounts for a dips or restrictions in the board face length. Adjusting this value allows the system to place a marginally short board on the outside of a log when the board length minus the board face violation (length) brings the board within face length limits.\n\n","section":"SECTION IV","video":"n"},{"name":"Cantfacewidthtable","menu":"LumberOptions","idNum":"000272","type":"help","title":"Cant Face Width Table","image":"./app/img/hlpCantFace.png","path":"Main Menu / Lumber Options / Cant Face Width Table","content":"The Cant Face Width Table defines the minimum legal cant by number and full length face width by length.  As you can see, it is in matrix form.  To change the face requirement for a particular number and length cant, move the cursor to the proper length column and down to the cant number you want to change.  The choices include typing any width up to the full thickness of the cant or I to ignore that length.  By choosing ignore, the system will not use that particular cant.\n\nFor example, if you intentionally do not want to make short 12&quot cants, simply go to the 12&quot cant number and type the letter 'I' in the 6\", 8\" and 10\" column.  The display will read \"ignore\"  for those lengths and widths.  When a 6\", 8\" or 10\" log is scanned,  the system will not consider a 12&quot cant. \n\nThere are buttons that allow you to set an entire row, column, or all entries in the table.  Copy table will copy the entire table so it may be pasted into another species\n\n","section":"SECTION IV","video":"n"},{"name":"Oileradjustments","menu":"RunTimeOptions","idNum":"000099","type":"help","title":"Oiler Adjustments","image":"./app/img/hlpOiler.png","path":"Main Menu / Setup Options / Runtime Options / Oiler Adjustments","content":"This menu controls the automatic knee oiler.  It can also be connected to the track oiler and operate for the same duration.  Distance moved is the combined forward and reverse movement of a knee.  Once Distance Moved has been achieved, the oiler will be turned on for the specified time.","section":"SECTION IV","video":"n"},{"name":"Openingfaceparameters","menu":"RunTimeOptions","idNum":"000101","type":"help","title":"Opening Face Parameters","image":"./app/img/hlpOpenFace.png","path":"Main Menu / Setup Options / Runtime Options / Opening Face Parameters","content":"<b>Auto Face:</b> The auto face selection menu allows a mill to select a normal sequence of turns for each species.  Select the sequence from the list provided that duplicates how the sawyer saws most logs in that species. \n\nFor example, if a sawyer loads a log, saws the front face (1F), turns the log 180 degrees, saws the back face (1B), turns 90 degrees down, saws (2F) and finishes with a 180 on (2B) then the selection 1F, 1B, 2F, 2B would be chosen.\n\n  If the sawyer takes successive 90 degree turns all the way around the log, 1F, 2F, 1B, 2B would be the proper choice.  \n\nThe selection 1F, 2F, 2B, 1B opens the log on 1F, turns 90 degrees, saws 2F, turns 180 degrees, saws 2B, turns 90 degrees, finishes on 1B.\n\n<b>NOTE: </b> If a sawyer turns a log out of sequence, he must tell the system which face he is on by pressing the lighted pushbutton corresponding to the face he is actually sawing.  \n\n<b>Minimum Opening Face Parameters</b> This menu also sets the minimum opening face requirement for all faces opened with the Set button.\n\n  Each species is setup separately.  Opening face selections are defined by width and length.  The Minimum Opening Face (Common Face) is the one most often used.  The Grade face is typically set longer and/or wider than the Minimum Opening Face.  The Grade face will be automatically called up by the LCI system  if the log diameter is greater that the Auto Grade Face Diameter or it can be manually selected by the sawyer by pushing the Grade Face button on the console.  Remember that the common board recovery and trade-off depth for next length features can affect the opening face selected.  Your system may contain multiple grade faces.  The log diameter will determine which grade face will be used.\n\n<b>NOTE:</b>  When fine tuning opening faces it is helpful to set the Minimum Opening Face parameters exactly where you would like them to be.  If the faces are slightly wider, or slightly narrower than you would like, correct them with the 'Roughness Allowance' factor located in the Scanner Options menu (Main Menu / Setup Options / Scanner Setup / Scanner Options, section B-3.c).  During this process, the trade-off should be set to .000&quot in the scan adjustments screen.  When complete, you may reset the trade-off depth.  Boards with smaller than minimum face requirements should be deselected in the fill mask and as default board.  Faces may also be influenced by data smoothing parameters found in the Shapescan Setup.  See Section B-3.c (Main Menu / Setup Options / Scanner Setup / Shapescan Setup)\n\n","section":"SECTION IV","video":"n"},{"name":"Packagemode/maxsetsetup","menu":"RunTimeOptions","idNum":"000103","type":"help","title":"Package Mode / Max Set Setup","image":"./app/img/hlpPackageMode.png","path":"Main Menu / Setup Options / Runtime Options / Max Set Setup","content":"<b>Package Mode / Max Set Setup:</b> A package is defined as a stack of one or more boards.  The <b>Maximum Package Width and Maximum Package Thickness</b> determine the largest package that can be cut off at the headrig.  These settings are useful if you have a downstream lumber handling restriction such as a narrow conveyor, gang edger, or a pony carriage with a maximum throat opening.\n\n  The <b>Maximum Set</b> restricts the system from making large sets which might cause problems for the sawyer, such as trying to cut a cant on the first face (1F).\n\nThe <b>Maximum Undog Size</b> can be set to limit the size that can be unloaded off the carriage.  This size is only used if both axes of the log are computed.  This parameter can be used such that something downstream of the unload deck requires that a piece be smaller then xx.xxx - thus set the max undog size to xx.xxx.  To override the undog feature, the sawyer may press the Limit Override button when undogging to force the dogs to come up.\n\nThe <b>Maximum Attached Slab</b> limits the thickness of a slab attached to a board.  If the slab is too thick, multiple passes will be taken to reduce its size.\n\nFrom the sawyer’s console, three different modes of sawing may be selected.  These are Single, Package and Resaw.\n\n<b>Single Mode</b> allows only single side boards to be cut from the log.\n\n<b>Package Mode</b> allows the sawyer to cut multiples of the same thickness to the resaw.  The system can be configured so that two separate groups of packaged boards may be sent to the resaw.  The Non-Limit Multiple list is used in normal production and allows the system to group like boards together with a resaw kerf between them.  The Limit Multiple list is a secondary list that is usually set to restrict various packages.  The sawyer switches between Non-Limit Multiple and Limit Multiple by pressing the Limit Multiple Button.\n\nAn example of when Limit and Non-Limit multiples can be used would be a mill cutting to a resaw.  Under normal operating conditions, the sawyer, sawing non- limit multiples, feeds large packages to the resaw.  Conditions change and the resaw backs up.  The headrig sawyer can switch to limit multiples and saw smaller packages that do not require recirculation at the resaw.  If conditions really plug up, (resaw down etc.), the sawyer can choose Single Mode from his console and no packages will be made at all.\n\nResaw Mode allows the sawyer to cut any combination of multiples which will be sent to the resaw.  These multiples are not necessarily made up of boards of the same thickness.\n\n","section":"SECTION IV","video":"n"},{"name":"Delays","menu":"RunTimeOptions","idNum":"000096","type":"help","title":"Delays","image":"./app/img/hlpDelays.png","path":"Main Menu / Setup Options / Runtime Options / Delays","content":"This menu controls time delays for dogging functions, from cinchbacks to the soft cushion circuit delay.  <b>NOTE:</b> Setting any of the delays to zero disables that particular function.  Your system may have a different number of delays than those shown in the sample screen below.\n\nBoard dog and Log dog Cinchback Delays provide a short delay before cinchback, allowing the dogs to bite before cinchback occurs.\n\nThe Log dog OUT-THEN-DOWN delays are set to allow full cylinder motion before starting the down stroke.  UP - THEN - IN delays are set to allow the dogs to pull out of the log before retracting.\n\n","section":"SECTION IV","video":"n"},{"name":"Slabbersetup","menu":"RunTimeOptions","idNum":"000112","type":"help","title":"Slabber Setup","image":"./app/img/hlpSlabber.png","path":"Main Menu / Setup Options / Runtime Options / Slabber Setup","content":"This menu controls slabber functionality.  If your system is not equipped with a slabber, this screen will not be available.\n\nReverse Limit sets the limit to how far the slabber can be retracted.\n\nRetract Position sets the position to where the slabber is retracted when nothing is being 'slabbed'.\n\nSafe Wood Clearance is the minimum distance between the wood and the face of slabber when not using the slabber.  If the slabber is at the retract position and the new set position would cause the wood to hit the slabber, the new slabber position will be the position of the wood plus the Safe Wood Clearance.\n\nZero Position is used to determine the position of the slabber when making a slab only pass (i.e. no board being cut).  The slabber position is measured from the edge of the saw tooth on the carriage side of the saw.  Selecting the Zero option will cause the face of the slabber to be even with the edge of the saw tooth on the knee side of the saw when making a slab only pass.  Selecting Kerf will cause the slabber to set back by the width of a saw kerf (i.e. lining up with the inside edge of the band saw) when making a slab only pass, allowing the saw to clean up the face as the carriage moves past the saw.  While using the Kerf option may initially produce a better face, repeated slab only passes may dull one side of the saw, increasing the amount of saw deviation.\n\nEnable Runaway Protection will force a runaway condition if the slabber does not get on set.\n\nEnable Slabber Stacking function will allow the slabber to have multiple passes if the slab is too thick.\n\nDiameter Threshold for Depth allows you to set two different slabber limits based on a log diameter.  If the log diameter is less than the Diameter Threshold for Depth value, then the maximum amount of wood that can be removed by the slabber will be the Maximum Safe Slabber Depth 1.  On the other hand, if the log diameter is more than the Diameter Threshold for Depth value, then the slabber’s limit will be Maximum Safe Slabber Depth 2.\n\n","section":"SECTION IV","video":"n"},{"name":"Timberbindadjustments","menu":"RunTimeOptions","idNum":"000108","type":"help","title":"Timberbind Adjustments","image":"./app/img/hlpTimberBind.png","path":"Main Menu / Setup Options / Runtime Options / Timber Bind Adjustemtns","content":"The timber bind feature, if selected, allows a sawyer to straighten crooked cants.  This option is only available if your system has three or more knees.\n\nTo do this the sawyer would load a log and saw the front as normal.  When he turns to the backside, bow is usually away from the knees.  Knee two (on a three knee carriage) is programmed to back up slightly.  The dogs on knees one and three operate normally.  After a slight delay, knee two moves forward, dogs and straightens the cant.  If there is no bow to the cant, knee two simply moves into position and dogs. \n\n","section":"SECTION IV","video":"n"},{"name":"Kerfs","menu":"RunTimeOptions","idNum":"000090","type":"help","title":"Kerfs","image":"./app/img/hlpKerfs.png","path":"Main Menu / Setup Options / Runtime Options / Kerfs ","content":"Enter kerf sizes for Headrig and Resaw.","section":"SECTION IV","video":"n"},{"name":"Autosawguidesetup","menu":"RunTimeOptions","idNum":"000116","type":"help","title":"Autosaw Guide Setup","image":"./app/img/hlpAutoSawSetup.png","path":"Main Menu / Setup Options / Runtime Options / Auto Saw Guide Setup","content":"This menu controls the automatic saw guide functionality.  If your system is not equipped with an auto saw guide, this screen will not be available.\n\nWood Clearance is the minimum amount the saw guide will be above the top surface of the log.\n\nGuide High Limit is the largest distance the saw guide can be above the bunks of the knees.\n\nGuide Low Limit is the closest distance the saw guide can be to the bunks of the knees.\n\nSet Tolerance is the distance, above and below the target, that makes up the set zone.  If the guide is within the set zone it will not try to move.  A 0.500&quot set tolerance will create a 1.000&quot zone.  Setting this tolerance too small will cause the guide  to continually move up and down as It tries to find a position within the set tolerance range.\n\nError is the difference between the desired location (target) and current location (current).\n\nOffset is used to calibrate the saw guide.  The actual position of the guide is measured from the top of the bunks to the bottom of the guide.  Using the current guide position on the right portion of the display, adjust the Cylinder Offset until the Cur: position on the screen matches the actual physical position of the guide.  Increasing the offset will cause the Cur: position on the screen to increase.\n\nMode is changed by the button on the console.  There are three different modes of operation: Manual, auto, auto_int. \n\n Manual: The sawyer controls the saw guide.  The console button will not be lit during this time.  The system will remain in this mode until the sawyer pushes the saw guide console button to return to auto.\n\nAuto: The computer will automatically position the guide for each log.  The console button will always be on during this time.\n\nAuto_int (auto interrupted): The saw guide is in auto, but the current position has been overridden by the operator.  The console button will blink when this is the case. Note: Once the sawyer takes control, automatic control will not resume until the sawyer raises the dogs.\n\nCur: is the current position of the saw guide.\n\nTar: is the target position of the saw guide.\n\nDown/Up Coast is a dynamically calculated number to help compensate for the movement of the guide.  Once the power to the movement device has been relinquished a coasting of the guide is experienced.  This is compensated for with the appropriate coast.\n\n","section":"SECTION IV","video":"n"},{"name":"Limits","menu":"RunTimeOptions","idNum":"000093","type":"help","title":"Limits","image":"./app/img/hlpLimits.png","path":"Main Menu / Setup Options / Runtime Options / Limits","content":"The limit menu tells the LCI system some physical details about the carriage.  It is usually set up at startup and not changed unless modifications are made to the carriage itself.  Special care must be taken when measuring and entering these parameters because they have a direct impact on overall safety.  Your system may have a different number of limits than those shown in the sample screen below.\n\n<b>Forward limit:</b>  Closest position, knee face to saw plus safety factor.\n\n<b>Reverse limit:</b>Farthest position, knee face to saw.\n\n<b>Dogs Out limit:</b> Board dogs out, measure dog point to knee plus safety factor.\n\n<b>Log Dog limit:</b>  Log dog out position, measure dog point to knee plus safety factor.\n\n<b>Cant Kicker limit:</b> Maximum extension from face of knee. \n\n<b>Turner Short Limit:</b> Closest position that turner is allowed to operate.\n\n","section":"SECTION IV","video":"n"},{"name":"Encoderpantographswitchsetup","menu":"RunTimeOptions","idNum":"000135","type":"help","title":"Encoder Pantograph Switch Setup","image":"./app/img/hlpEncoderPant.png","path":"Main Menu / Setup Options / Runtime Options / Encoder Pantograph Switch Setup","content":"<b>Encoder Pant:</b> Virtual pantograph switch reading from the encoder count.\n\n<b>Wired Pant:</b> Wired from a physical switch.\n\n<b>Encoder Pant Count</b>\nLine up the carriage to where you want it to trip out, between knees 1 and 2.  Click the set button and the count will update.  \n\n<b>NOTE:</b> The encoder must be calibrated and working before setting.","section":"Section IV","video":"n"},{"name":"Shapescansetup","menu":"ScannerSetup","idNum":"000181","type":"help","title":"Shapescan Setup","image":"./app/img/hlpShapeScan.png","path":"Main Menu / Setup Options / Scanner Setup / Shapescan Setup","content":"<b>Shapescan Setup:</b> Parameters in this menu are used to fine tune positioning of the log and may vary from one species to another depending on the size, shape and roughness of the logs.  Note: Each species is set up with its own set of values.\n\n<b>Percent of log ends to ignore (for tapering):</b> In determining the overall taper of the log, it is often beneficial to ignore the ends of the log.  By so doing, problems such as broken ends, swelled butts or pistol butts are eliminated from the taper calculations.  The percent of log ends to ignore is used on both ends of the log: i.e. a value of 25% would leave the middle 50% of the log for taper calculations.\n\nThese next three entries work together to filter out bad scan data based on cross section data from adjacent scan lines.\n\n<b>Number of Points to consider for data elimination:</b>  In the process of gathering scan data, cross section scan data is gathered at one&quot intervals along the length of the log.  At each cross section, the outside edge of the log is found and a face is calculated.  Occasionally, the shape of the log (knot, branch, piece of bark, etc.) may cause a section to be calculated which is not truly representative of the log.  To reduce bad data sections, each section is compared to the sections of adjacent scan lines on either side.  This parameter controls how many sections to consider on each side of the current section being checked.\n\n<b>Maximum error allowed toward the knees:</b> If the value of the current edge section being checked is further towards the knees (interior of the log) when compared to the sections on either side by more than this amount, the section will not be used in the final face calculations.\n\n<b>Maximum error allowed toward sawline:</b> If the value of the current edge section being checked is further towards the sawline (exterior of the log) when compared to the sections on either side by more than this amount, the section will not be used in the final face calculations.\n\n","section":"SECTION IV","video":"n"},{"name":"Autotaperrates","menu":"ScannerSetup","idNum":"000177","type":"help","title":"Auto Tapper Rates","image":"./app/img/hlpAutoTaper.png","path":"Main Menu / Setup Options / Scanner Setup / Auto Taper Rates","content":"This table specifies how much the carriage knees are to be tapered when the scanner <b>Auto Taper button</b> is lit.  The left column of the table sets categories based on the overall taper of the whole log, as measured by the scanner.  The right side of the table specifies the knee taper for each category.  Zero knee taper is usually used for all back faces.  Fifty percent front taper means that the center axis of the log will be parallel to the sawline.  One hundred percent front taper places the front edge of the log parallel to the sawline.\n\n","section":"SECTION IV","video":"n"},{"name":"Heads/nassignment","menu":"ScannerSetup","idNum":"000191","type":"help","title":"Head S/N Assignment","image":"./app/img/hlpHeadAssign.png","path":"Main Menu / Setup options / Scanner Options / Head S/N Assignment","content":"Assign each head with their corresponding Serial Number.","section":"Section IV","video":"n"},{"name":"Scannercalibrationoptions","menu":"ScannerSetup","idNum":"000185","type":"help","title":"Scanner Calibration Options","image":"./app/img/hlpScanCal.png","path":"Main Menu / Setup Options / Scanner Setup / Scanner Calibration Options","content":"<b>Font Scanner</b>\n\n<b>Horizontal:</b> Width from the knees to the edge of the CANT.\n\n<b>Vertical:</b>  From the top to the bottom.\n\n<b>Offset:</b> How far off the saw-line will calibrate with the CANT..\n\n","section":"SECTION IV","video":"n"},{"name":"Scanneroptions","menu":"ScannerSetup","idNum":"000170","type":"help","title":"Scanner Options","image":"./app/img/hlpScannerOpt.png","path":"Main Menu / Setup Options / Scanner Setup / Scanner Options","content":"<b>Scanner Options:</b> In this menu a variety of different choices are made and physical positions defined that will directly influence machine operation and safety.  It is one of the most important menus in the entire setup. \n\n<b>Roughness Allowance</b> is a factor that compensates for debarker damage or general surface roughness found in certain species (cedar, basswood, redwood) by decreasing the actual scanned diameter.  This feature is very helpful in fine tuning opening faces.  It allows you to set opening face requirements to the exact width and length desired.  If under actual sawing conditions faces are narrower or wider than the width you have entered, roughness allowance can be adjusted to bring them back in line.  Increasing the Roughness Allowance will cause the system to make bigger faces, decreasing it will generate smaller faces.  Although normally a positive number, negative numbers can be used to further reduce face size.\n\n<b>Bark Allowance</b> is a factor that compensates for bark that is still on the log.  When the Bark On button is lit, the system will decrease the diameter of the log by the Bark Allowance and adjust solutions accordingly.  Accidentally turning on the Bark Allowance will cause an increase in opening face sizes.\n\n<b>Guide to Knee 1 at Reference:</b> This parameter enables us to relate the carriage and log location to a fixed point in the mill.  The actual Knee 1 to Guide is displayed to the right of this parameter.  Set this number by measuring the distance between the center of knee 1 to the front of the guide at the point the carriage is coming off the carriage reference switch.\n<b>Encoder Counts per Foot:</b> Once the carriage has been 'referenced', a shaft encoder tracks the carriage travel.  To calculate this number, do the following: \na) Position the carriage so that it is off the load end set enable sensor (towards the un-load end)\nb) Mark where the carriage is.  You will need to measure from the current location to a new location after moving the carriage.\nc) Open the Encoder Information screen.\nd) Write down the current encoder counts (first number at top of screen).  Call this number C1\ne) Move the carriage approximately 10 feet towards the un-load end.\nf) Write down the new encoder count.  Call this number C2\ng) Measure how far you moved the carriage (in&quotes).  Call this number&quotes.\nh) Calculate the following:\n\t((C1 - C2) /&quotes) * 12.\n<b>NOTE:</b>  Be careful about the sign of C1 and C2.  C1 may be positive or negative.  C2 is almost always negative.  Subtracting a negative is that same as adding!!\ni) Type the new number in the Scanner Setup screen under Encoder Counts per Foot.  (this number is usually between 250 and 750).\n<b>Fuzzy Logic for Back Face:</b> With front of log scanning, the best any system can do is to look at one face (the scanned face) at a time.  Fuzzy Logic is a factor, adjustable by the mill, that says:  If, on a computed run, there is almost enough wood to make an extra board, then go ahead and try for it in the hope that when the back face is scanned and verified the wood will be there.  For example, on a front scan the computer determines there is enough wood to make a stack of eight 2inch lines plus kerf and .830inches of wood left over of sufficient length to make a minimum 1inch board.  However, your 1&quot target size is .850inches.  If fuzzy logic is set at .020inches or higher, the computer will include the 1&quot board in the computed run, placing it against the knees.  At best, you'll get the eight two&quot lines and a legal one&quot board.  At worst, you'll still get the eight two&quot lines and a heavy back face slab.  As a practical measure, Fuzzy Logic should be set equal to or greater than the Roughness Allowance for the species selected.\n<b>Set Disable Distance in Front of / Behind Guide</b> establishes a point in front of the saw guide where the setworks are disabled.\n\nAll setworks motion will stop when the combined inputs from the encoder and the scanner determine that any part of the log is present in the dead zone.\n\n<b>Use Scanner Set Disable (yes/no)</b> is the off and on switch for the Set Disable feature.\n\n<b><i>WARNING:</i>  Though normally quite reliable, the Scan Set Disable feature is not 100% fail safe.  It is intended primarily to save saws and not to ensure personal safety of people in the area.  Broken or severely tapered log ends may not be 'seen' reliably by the scanner, which in turn can show a false reading for predicted log end.  A slipping encoder, loose drive cables, or photocells (if your system is equipped with photocells) covered by debris may also create false information.\n\n</b><b><u>Nothing can take the place of a sawyer that stays in control of his machine at all times and makes safety a high priority.</u></b>\n\n<b>Bandmill Offset Enable </b>(yes/no) is the off and on switch for the bandmill offset feature.  The bandmill offset feature causes the knees to retract slightly on the return pass to prevent the saw from raking the face and to minimize the chance of catching slivers.\n\n<b>Bandmill Offset Distance (max .100)</b> sets the distance the knees will back up when the feature is active.\n\n<b>Trade Off Depth for Next Board Length</b> is active in the Cant Matrix sawing mode and is a mill adjustable feature.  The system first looks at the scanned diameter and shape of a log and determines the knee position needed to achieve a minimum opening face.  It then checks each incremental trade off point.  If it can make a longer board within the trade off parameters, it does.  It will test up to the maximum trade off depth on every face opening.  If it cannot make a longer board, a minimum opening face will be taken.\n\n<b>Maximum Trade Off Depth</b> sets the maximum distance the Trade Off feature will set while looking to gain extra board length.\n\n<b>Calibrate Size:</b> When the sawyer decides to calibrate the scanner he normally saws a square cant with no taper in the knees.  As long as there is no taper in the knees the horizontal calibrate size will change to display knee position.  If the system is equipped with an L4 3D scanner, the horizontal and vertical calibrate size will change to display the width and height of the cant.  When the sawyer begins the calibration process no adjustment to calibrate size is necessary.\n\n\n\n","section":"Section IV","video":"n"},{"name":"Scannercalibration","menu":"ScannerSetup","idNum":"000193","type":"help","title":"Scanner Calibration","image":"./app/img/hlpScannerCal.png","path":"","content":"<b>Calibration:</b> Press the calibration button to start the scan head calibration process. This button is also located on your console, most likely as 'cal'.\n\n<b><i>NOTE:</i></b> BEFORE starting the calibration process you must have a squared off log positioned towards the back most laser on the carriage. It should be at minimum 8x8 with no wane left on the edges. You will also want to make sure the lasers are not hitting turners, log loaders, or anything else that may obsecure their vision.\n\n<b>Start Calibration Process:</b> Press the scanner calibration button and wait for calibration. You will notice data fill the boxes and will be able to decline or accept the results using the touch screen on the RS2 cabinet. Each row of data represents a laser head. You want the heads to be within 1 of each other. For example, a head is reading 39, 40 would be an ok number to accept. The graphic you want to accept should look like an upside down L. A nice clear 90 degree angle is ideal. \n\nOnce you have verifed and accepted good results, reposition the log down scanner bar towards the first laser and calibrate any heads missed. You will have to repeat this process until all heads have been verifed and accepted. \n\n<b>WARNING:</b> You cannot undog during the scanner calibration process. If you do, you must restart the entire process.\n\n<b>Scanner Maintenance:</b> Its important to maintain your scanner laser eyes. This can be achieved by cleaning them on a regular schedule. You will need the following items a clean cloth (do not use paper towels), and a simple non corrosive cleaner or rubbing alcohol.\n\nDab a small amount of your selected cleaner onto the cloth. Gently rub the cloth against the laser eye in a swirling motion. Repeat this process until all laser eyes have been cleaned\n\n<b>WARNING:</b> Dab a small amount of your selected cleaner onto the cloth. Gently rub the cloth against the laser eye in a swirling motion. Repeat this process until all laser eyes have been cleaned.","section":"Section IV","video":"n"},{"name":"Scannersetupoptions","menu":"ScannerSetup","idNum":"000174","type":"help","title":"Scanner Setup Options","image":"./app/img/hlpScannerSet.png","path":"","content":"L4 Scanner Setup - If your system is equipped with an L4 3D laser scanner, you will have access to this screen. The parameters on this screen are necessary for proper operation of the L4 laser scanner.\n\nLaser Enable - Enable or disable lasers with this check mark. If a laser is not operating properly, its data can be ignored by disabling the laser.\n\nLaser Position - The position represents the horizontal location of the laser in reference to the saw guide.\n\nLaser Effected - You may check up to two lasers that are effected by a turner or other such device. The computer will fill in data as appropriate if the previous and next laser is seeing a valid log. This option should only be used if there is a scan area that is all or partially blocked during SOME of the scan process, but eventually becomes clear (ie. turner going up and down during scanning).\n\nTheta, Xs, Ys - These are calibration values used to take raw 3D scan data and convert it to a coordinate frame relative to the carriage. Theta is the angle between the scan head and the carriage. Xs (away from the carriage) and Ys (above the carriage) are offsets in reference to the sawline. The three columns on the right provide a reference from the previous calibration.\n\nCalibration Offset: Normally, the cant being used for calibration will be positioned so that the edge of the cant is on the sawline. Under some conditions, it may be desirable to position the cant back from the sawline. Putting a positive value in the calibration offset will cause the system to position the cant back from the sawline by the amount entered.","section":"SECTION IV","video":"n"},{"name":"Sawdeviationsetup","menu":"SetUpOptions","idNum":"000218","type":"help","title":"Saw Deviation Setup","image":"./app/img/hlpSawDev.png","path":"","content":"This menu allows you to setup and calibrate the Saw Deviation Sensor. If your system is not equipped with saw deviation, this screen will not be available.\n\n<b>General Setup:</b> The sensor should be mounted so that it is approximately 1/8 from the sensor to the saw. When making the measurement, the saw should be strained up and rolled over to make sure it is properly positioned.\n\n<b>Headrig Kerf:</b> This is the same value that is referenced from the Kerfs menu in the runtime menu. It is referenced here for convenience.\n\n<b>Saw 'name':</b> The saw 'name' allows the mill to identify different saws by 'name' so that a saws performance may be tracked in the saw deviation reports.\n\n<b>Front Count</b> is the current count being returned from the saw sensor. This count is a measurement (in sensor units) of how far the sensor is from the saw.\n\n<b>Current Distance:</b> This is the distance from the saw to the sensor after it has been converted to&quotes. This value is updated dynamically.\n\n<b>Front Cut Zero:</b> This value is the distance from the sensor to the saw when there is no wood in the saw. To set this value, strain up the saw and roll it over. Copy the value found in Front Count to this entry. With the sensor having a physical offset of 1/8 from the saw, the count should be about 127.\n\nIf you have a double cut carriage, the same procedure should be applied to Back Cut Zero, (If your carriage is single cut, you wont be able to see any options for double cut carriages.)\n\n<b>Counts per Inch</b> is a scale factor for converting sensor counts to&quotes. 800 is factory default and should not normally be changed.\n\n#1 Alarm [Warning] determines how much deviation must occur before the warning light on the sawyers console comes on.\n\n#2 Alarm [Hazard] determines how much deviation must occur before the Hazard light comes on.\n\nReport Entry sets the distance in&quotes (positive or negative) at which a report entry line will be generated.","section":"SECTION IV","video":"n"},{"name":"Advsawdeviationsetup","menu":"SetUpOptions","idNum":"000222","type":"help","title":"Advance Saw Deviation Setup","image":"./app/img/hlpAdvSawDev.png","path":"Main Menu / Setup Options / Advance Saw Deviation Setup","content":"This menu allows you to setup and calibrate the Saw Deviation Sensor.  If your system is not equipped with saw deviation, this screen will not be available.\n\n<b>nGeneral Setup:</b>  The sensor should be mounted so that it is approximately 1/8” from the sensor to the saw.  When making the measurement, the saw should be strained up and rolled over to make sure it is properly positioned.\n\n<b>Headrig Kerf:</b> This is the same value that is referenced from the Kerfs menu in the runtime menu.  It is referenced here for convenience.\n\n<b>Saw 'name':</b> The saw 'name' allows the mill to identify different saws by 'name' so that a saw’s performance may be tracked in the saw deviation reports.\n\n<b>Front Count</b> is the current count being returned from the saw sensor.  This count is a measurement (in sensor units) of how far the sensor is from the saw.\n\n<b>Current Distance:</b>  This is the distance from the saw to the sensor after it has been converted to&quotes.  This value is updated dynamically.\n\n<b>Front Cut Zero:</b> This value is the distance from the sensor to the saw when there is no wood in the saw.  To set this value, strain up the saw and roll it over.  Copy the value found in “Front Count” to this entry.  With the sensor having a physical offset of 1/8” from the saw, the count should be about 127.\n\nIf you have a double cut carriage, the same procedure should be applied to <b>Back Cut Zero</b>,  (If your carriage is single cut, you won’t be able to see any options for double cut carriages.)\n\n<b>Counts per Inch</b> is a scale factor for converting sensor counts to&quotes.  800 is factory default and should not normally be changed.\n\n#1 Alarm [Warning] determines how much deviation must occur before the warning light on the sawyer’s console comes on.\n\n#2 Alarm [Hazard] determines how much deviation must occur before the Hazard light comes on.\n\n<b>Report Entry</b> sets the distance in&quotes (positive or negative) at which a report entry line will be generated.\n\n<b>Display Setup:</b>  These options can be toggled on or off.  Turning one on will display the toggled option on your sawyer screen. \n\n","section":"SECTION IV","video":"n"},{"name":"Setviewoptions","menu":"SetUpOptions","idNum":"000212","type":"help","title":"Set View Options","image":"./app/img/hlpSetView.png","path":"","content":"This option controls how the log is presented on the sawyers display and on other diagnostic screens. Set the cab location which will either be next to the saw or at the end of the track.\n\nTo set the sawyers view, imagine standing in front of the carriage loaded with a log so that it is directly across from you. As the carriage moves towards the left and away from you, you would see the right end of the log.\n\nChanging these parameters will affect the knee and laser / photocell order on the sawyers screen and other screens that display this information.\n\n","section":"SECTION IV","video":"n"},{"name":"Zerotallyanddowntime","menu":"SetUpOptions","idNum":"000206","type":"help","title":"Zero Tally and Downtime","image":"./app/img/hlpZeroTally.png","path":"Main Menu / Setup Options / Zero Tally and Downtime","content":"This menu item allows you to manually zero a tally category.\n\n","section":"SECTION IV","video":"n"},{"name":"Tallyparameterssetup","menu":"SetUpOptions","idNum":"000200","type":"help","title":"Tally Parameters Setup","image":"./app/img/hlpTallyParam.png","path":"","content":"Your system may not include this option. This menu allows you to adjust several features of your report package. The trim allowance minimum and maximum is a range for the misbucked report. The diameter rounding adder is used to bias the scale of all log reports; the adder is added to the diameter when calculating scale. The delay before downtime starts is the amount of time (in seconds) the carriage must stop operating before downtime is registered. If there is an X at Auto Print Reports, all reports that are selected will automatically print at the end of each shift. If there is an X at Auto Zero Tally and Downtime at Shift Start, the sawyers display and tally summary will reset to zero at the start of shift (this should normally be checked). The last option indicates the number of days that will remain in the database; once the database contains xx number of days, older records will be removed at midnight.","section":"SECTION IV","video":"n"},{"name":"Addashift","menu":"ShiftSetUp","idNum":"000300","type":"help","title":"Add a Shift","image":"./app/img/hlpAddShift.png","path":"Main Menu / Shift Options / Add a Shift","content":"Use this menu to add a shift.  Type the 'name' of the shift and the number of breaks during the shift.  <b>NOTE:</b>  The number of breaks during the shift is the same for all shifts.  If the number of breaks is changed here, then you will need to edit other shifts to make sure the break times are correct.\n\n","section":"SECTION IV","video":"n"},{"name":"Deleteashift","menu":"ShiftSetUp","idNum":"000306","type":"help","title":"Delete a Shift","image":"./app/img/hlpDeleteShift.png","path":"Main Menu / Shift Options / Delete a Shift","content":"Use this menu to delete a shift.  Simply select the shift you want deleted and press (ENTER) or click on the OK button.\n\n","section":"SECTION IV","video":"n"},{"name":"Dayshift","menu":"ShiftSetUp","idNum":"000310","type":"help","title":"Day Shift","image":"./app/img/hlpDayShift.png","path":"Main Menu / Shift Options / Day Shift","content":"This menu allows you to enter the times for shift beginning and end.  In this manner, production and downtime reports will be attributed to the proper shift and lunch break can be excluded from downtime.  For each shift that has been set up, there will be a button that will access this setup screen.\n\n","section":"SECTION IV","video":"n"},{"name":"Sparessetup","menu":"StartUpOptions","idNum":"000060","type":"help","title":"Spares Setup","image":"./app/img/hlpSparesSetup.png","path":"Main Menu / Setup Options / Startup Options / Spares Setup","content":"This menu is used during startup to configure the spare inputs and outputs that are available in the system.  There are eight programmable spares.  Each can be momentary (default) or push-on/push-off (latched).  You may provide a short name for the input and output.  The short names are only used on the console mapping screen (B-4 d. above).  The long name is used in the console mapping screen and also appears in the setworks history when the appropriate spare input is pressed.","section":"SECTION IV","video":"n"},{"name":"Automaticpositionercalibration","menu":"StartUpOptions","idNum":"000050","type":"help","title":"Automatic Positioner Calibration","image":"./app/img/hlpAutoCal.png","path":"Main Menu / Setup Options / Startup Options / Automatic Positioner Calibration","content":"Automatically adjusts each positioner offset based on physical measurement. \n\n <b>Note:</b> To ensure that the knees are receiving full system hydraulic pressure, make sure that the board dogs are down prior to starting this procedure. \n\n To calibrate the knees to the saw, measure the distance between the face of the knee and the carriage side of the saw teeth.  We recommend using calipers for this type of measurement.  For more consistent measurements, pick a saw tooth about one foot up from the bed plate and use the same tooth as the reference point for each of the knees.  Use the tab key to move the highlight to the knee being measured. \n\n <b>WARNING:</b> When the knee position is adjusted, the system will try to return the knee to it’s previously commanded position, causing the knee to move.  <b>Never adjust the knees when they are directly across from the saw.</b>  Move the carriage so that the knee being adjusted is either up stream or down stream from the saw prior to making the change. \n\n Enter the measured distance for the knee being calibrated in the Actual Position column, then press Enter or click Accept to save the new value. \n\n <b>Offsets:</b> Changing an offset is another way to correct the position of the knee or slabber.  This option is generally used when only small corrections are needed.  Changing the knee offsets will only affect the backstand, not the thickness of the boards being cut prior to the backstand.  Making the offset larger will cause the positioner to move toward the saw.  If the cant is undersize, decrease the offset to correct the problem.  If it is oversize, increase the offset. \n\nFor example, suppose that the cant size at the number 1 knee is consistently light by 0.020&quot.  This problem could be corrected by reducing the offset for knee 1 by 0.020&quot  If the offsets were as displayed below, the new offset for knee 1 would be 41.591. \n\nCorrections to the slabber can be made in the same manner.  Measure the thickness of boards being cut between the slabber the saw.  Adjust the slabber offset accordingly. \n\nNever make offset corrections to the knees or slabber without measuring at least 3 cants if backstand problem or 3 slabber boards if a slabber problem.  If a clear pattern does not emerge, look for other reasons why the cant may be off size.  These could include such things as saw snake, loose trunion mounts or the log not being tight against the knees. \n\n","section":"SECTION IV","video":"n"},{"name":"Consolemapping","menu":"StartUpOptions","idNum":"000058","type":"help","title":"Console Mapping","image":"./app/img/hlpConsoleMap.png","path":"Main Menu / Setup Options / Startup Options / Console Mapping","content":"This menu is used by Lewis Controls Inc. to set up the console.  In the main part of the console layout screen, each button contains a lamp (at the top half of the button) and a switch (at the bottom half of the button).  The handle and foot pedals are switch inputs only.  Depending on the “hand” of the console, there are outputs and lights on one side of the console (left below) and switch inputs on the other side (right below).  To set a console button, double click or right click on the button.  A list will appear; choose the appropriate function from the list.  You may copy a button by using the left mouse button and dragging it to another location.  The button text will turn red when it is placed in more than one location.  Using this screen to simulate the console is VERY DANGEROUS and is not recommended.  Simulating the console will temporarily disable switch inputs at the console until simulate is turned off or the screen is closed.","section":"SECTION IV","video":"n"},{"name":"Positionermovementsetup","menu":"StartUpOptions","idNum":"000056","type":"help","title":"Positioner Movement Setup","image":"./app/img/hlpPosMove.png","path":"Main Menu / Setup Options / Startup Options / Positioner Movement Setup","content":"<b>Gains and Breakpoints:</b> This menu allows you to adjust the deceleration characteristics for the carriage knees or slabber.  In other words, by adjusting the gains and breakpoints a mill can control how quickly and smoothly knees come to set.  Gains, acceleration ramp, and speeds control the fluidity of the positioners.\n\nGain in the LCI system is defined as the amount of drive voltage sent to the servo valve.  The relative gain ramp is adjustable from 0 to 9 with 0 being the lowest (least voltage, lowest speed) and 9 being the highest (highest voltage, most speed).\n\nBreakpoints are distances from a set point where gain levels are switched, with inside breakpoint being closest to final set point and outside breakpoint farther away.On a typical set, say 12&quot, the drive will accelerate to the full requested speed and will be driven through most of the set distance at the outside gain level.  When the positioner reaches the outside breakpoint the system switches to the middle gain level and begins to slow down.  When the inside breakpoint is reached the system finishes the set using the inside gain level.\n\nIf a positioner appears to have trouble achieving final set, a possible reason would be the relative gains need to be adjusted.  If the positioner over shoots or undershoots the set, comes to set too harshly or appears out of control, the gain settings may need to be adjusted.\n\nGenerally speaking, the gains set by the LCI installer are appropriate for your hydraulic system and servo valves.  Unless you are familiar with these adjustments, please contact an LCI engineer before making changes.\n\n<b>Knee Speeds and Runaway Error:</b> This menu also puts a variety of knee speed and safety functions under your control.\n\nMaximum jog, set, scan, and taper speeds are all adjustable in&quotes per second.  Move the cursor using the tab key to the value you want to change and type in the new value.  Press Enter or click Accept to save the new value.\n\nOut-of-cut and in-the-cut knee runaway tolerances are adjustable in&quotes.  The LCI system continuously checks carriage position, projected log end position and knee position.  Carriage position is broken into two categories based on whether we can project a log or cant as being in the cut or whether in all likelihood the log or cant is out of the cut. \n\n<b>WARNING:  This is not an exact science.  A number of conditions exist that can cause the system to not 'see' the log end or not know the precise position of the carriage including but not limited to a broken log end, faulty encoder or blocked scan photocells.  FOR SAFETY, NOTHING REPLACES A SAWYER WHO IS PAYING CAREFUL ATTENTION TO THE STATUS OF THE MACHINE AND SAFETY IN GENERAL.</b>  \n\nAs the system monitors carriage / log end positions it develops target locations for each knee.  If a knee position is checked and found to be outside of the tolerance defined for In-the cut or Out-of cut runaway limits, the system hydraulic safety blocking valve will automatically shut down.  When the computer detects or thinks it detects a knee runaway, it informs the sawyer of it by flashing the forward and reverse taper lamps for that knee and by placing a “Runaway!” message on the Sawyer Display.  When the carriage has been moved to a safe area, the runaway recovery can be tried.  To inform the computer that it is safe to re-energize the hydraulic safety valve and try to correct the position of the runaway knee, press and hold the Limit Override push button on the console.\n\nAcceleration Ramp and Maximum Servo Ramp are set on scales.  Acceleration ramp controls the initial drive ramp to bring the positioner up to the set speed, skew speed, etc.  Maximum servo drive controls the maximum allowable ramp voltage increment the system will use.\n\n<b>NOTE:  Before adjusting Max Servo Ramp, call LCI for assistance</b>\n\n","section":"SECTION IV","video":"n"},{"name":"Systemsetup","menu":"StartUpOptions","idNum":"000063","type":"help","title":"System Setup","image":"./app/img/hlpSystemSetup.png","path":"Main Menu / Setup Options / Startup Options / System Setup","content":"This menu is used during startup to configure your system.  Once these parameters are setup, they will probably remain unchanged for the life of the system.\n\nMill Setup\n\nMill 'name':  This is the 'name' that will be used for all mill reports and system displays.\n\n<b>MILL SETUP</b>\n\n<b>Double Cut:</b>  Check this box if this is a double cut system.\n\n<b>Logs Enter Saw From:</b> Choose Left or Right.  This information is used to setup up the orientation of the sawyer’ s display.\n\n<b>SCANNER SETUP</b>\n\n<b>Scanner Resolution:</b> This parameter determines how frequently the system takes cross section data on the log.  For the laser 3D scanning systems, this parameter will be set to 1”.  For photocell systems, this parameter will be set to 6”.\n\n<b>Max. Scan Distance:</b>  The Max. Scan Distance determines how long the scanners will continue to collect log profile data as the carriage moves towards the scanner.  The minimum value for this distance is the largest distance between any two adjacent laser lines.\n\n<b>Over Zero Scan Distance:</b>  The Over Zero Scan Distance is used to track the end of the log as the carriage moves towards the saw.  When the front end of the log reaches a point measured from the last laser line (line closest to the saw), if log scanning is not already complete, scanning will be terminated and a solution calculated.\n\n<b>Carriage Setup</b>\n\n<b>Number of Knees:</b>  Set to the number of Knees on the carriage.  When the number of knees has been changed, the control program will need to be restarted.\n\n<b>½ Width of Knee:</b>  Set to ½ half the width of the face of the knee.\n\n<b>Knee Distances:</b>  These distances are measured from the center of the dog on Knee 1 to the center of the dog on each of the other knees.  Knee 1 is defined as the first knee to enter the cut after a scan.  Make an entry for each of the knees.\n\n<b>Tally Setup</b>\n\n<b>Min Diameter, Max Diameter:</b>  These parameters are used to set up the minimum and maximum log diameters for the system tallies.\n\n<b>Min Length, Max Length:</b> These parameters determine what lengths will be tallied in the reports.  Lengths longer than the Max Length will be tallied as the maximum length. Lengths shorter than the Min Length will not be tallied.\n\n<b>Scale Type 1, Scale Type 2:</b>  The system has the ability to perform several different types of scale calculations.  Two of these (such as Scribner and Cubic) may be selected for the system reports.  Use the drop down box to select from the list of available scales.\n\n<b>Zero Entries at Pantograph:</b> Checking this box causes the system to clear out any pending manual pushbutton entries when the pantograph switch is closed.\n\n","section":"SECTION IV","video":"n"},{"name":"Basicpositionersetup","menu":"StartUpOptions","idNum":"000053","type":"help","title":"Basic Positioner Setup","image":"./app/img/hlpBasicPos.png","path":"Main Menu / Setup Options / Startup Options / Basic Positioner Setup","content":"<b>Gradient:</b> After replacing an Temposonic transducer you will need to enter the transducers gradient.  The gradient number is unique for each transducer and is stamped on the identification tag attached to the back of the transducer. \n\n Temposonic transducers measure distance by sending a electrical signal through the transducer which reflects off of a magnet attached to the end of the hydraulic cylinders rod.  As the rod extends/retracts the distance from the magnet to the back end of the cylinder changes.  The setworks can determine  distance based on the time it takes for the signal to return from the magnet.  The gradient is the actual speed of that signal passing through an individual transducer.   The theoretical speed of this signal is 9.0500us per&quot of travel.  This gradient speed is measured by the manufacturer and should not change throughout the life of the transducer. \n\n<b>Runouts:</b> The Runout of a positioner is the error, in .001 per&quot of travel, between the actual distance a positioner moves and the computers reported distance moved for an individual positioner.  Most Runout errors are a result of an individual Temposonic transducers signal speed.  The setworks computer will calculate a Runout, either plus or minus, based on the gradient entered (see Gradient description).  Normally runout will not be adjusted manually because it is dynamically related to the gradient.  The runout number can be entered in the rare cases the gradient number is lost or destroyed. \n\n<b><i>NOTE:</i></b>  Anytime the Gradient or Runout is changed that positioner’s offset must be recalibrated (see Automatic Positioner Calibration). \n\n<b>Set Achieved Bands:</b> The Set Achieved bands normally are set at .010&quot.  These Set Achieved numbers do not have any real affect on the processing of lumber.  A Set Achieved lamp is located on the operators console and will light whenever all of the system positioners are on-set within their Set Achieved Band window. \n\n","section":"SECTION IV","video":"n"},{"name":"Systemoverview","menu":"TroubleShootingOptions","idNum":"000424","type":"help","title":"System Overview","image":"./app/img/hlpSystemOver.png","path":"Main Menu / Troubleshooting / System Overview","content":"This is a general debugging tool for an LCI Engineer.\n\n","section":"SECTION IV","video":"n"},{"name":"Lastscanlogline","menu":"TroubleShootingOptions","idNum":"000443","type":"help","title":"Last Scan Log Line","image":"./app/img/hlpLastLine.png","path":"Main Menu / Troubleshooting / Last Scan Log Line","content":"This screen is useful for analyzing scanner data that was collected for the entire length of the log.  Laser lines are spaced at one foot intervals.  As the carriage is moved towards the saw, scan data is repeatedly collected until there is scanner data for each one&quot cross section over the length of the log.  This diagnostic provides scanner diameters for the current face along with diameter information for as many faces as have been scanned.\n\n","section":"Section IV","video":"n"},{"name":"Positionergraph","menu":"TroubleShootingOptions","idNum":"000439","type":"help","title":"Positioner Graph","image":"./app/img/hlpPosGraph.png","path":"Main Menu / Troubleshooting / Positioner Graph","content":"This screen is useful for troubleshooting positioners, primarily because of its graphical instead of numerical representation.  You can follow the colored lines that show the positions of the knees (both actual and target positions) and the drive voltage for each corresponding servo valve.  Also shown on the screen is the encoder value (the position of the carriage).\n\nIf you watch this screen while logs are being sawn, watch one knee at a time.  You will see the green line (representing the Target position of the knee) separate from the red line, which represents the Actual position, as the knees begin to move.  Soon the red line covers the green line, indicating that the target position has been reached and set has been achieved.  The blue line represents the voltage sent to the servo valve; as the knees move back and forth, the voltage goes up and down. \n\n It is possible to view the graph of a single knee in detail.  Simply click between the two points on the graph that you wish to see up close.  Click first on the left (the start of what you want to see), then on the right (end).  When you are finished with the magnified view, click on the screen and the full positioner graph will return.\n\nNormally, the graphs for all positioners will be similar, but if you are having trouble with one or more positioners, this screen can give a quick idea of what is going on.  The Freeze button allows the user to view a specific point in time.  When the display is frozen, the Freeze button says 'UN-Freeze;'  simply click it again to get the real time display. \n\n","section":"SECTION IV","video":"n"},{"name":"Viewscannerdiagnostics","menu":"TroubleShootingOptions","idNum":"000436","type":"help","title":"View Scanner Diagnostics","image":"./app/img/hlpViewScanDia.png","path":"Main Menu / Troubleshooting / View Scanner Diagnostics","content":"Use this screen for setting up and troubleshooting lasers.  The screen gives graphical as well as numerical representation of what the lasers are 'seeing.'  Following is a description of the menu items available along the top of the L4 Diagnostics screen.  \n\n","section":"SECTION IV","video":"n"},{"name":"Targetsandpositions","menu":"TroubleShootingOptions","idNum":"000410","type":"help","title":"Targets and Positions","image":"./app/img/hlpTargetPos.png","path":"Main Menu / View and Report Options / Target and Positions","content":"This submenu is an on-line monitor for the status of each linear positioner in the system.  Six items are displayed simultaneously.<b>'Disable'</b> shows the position of the knee the last time a runaway or motion stop was triggered.  The LCI system tracks estimated log end position (based on scan data) and will stop positioner movement when the estimated log end is in a \"dead\" zone set up <b><u>by the mill</u></b> in the area around the saw.  <b>See Section III.A-3 Scanning, Scan Set Disable</b>\n\n\"Final\" is the position the drive is commanded to go to by the computer.\n\n<b>\"Target\"</b> is the interim position that the computer is expecting the drive to be during the set motion.  Early in the set, \"target\" will be close to \"position\" in the direction of set.  \"Target\" will continue to move, with \"position\" following, until late in the set.  At set complete \"target\" and \"final\" will be equal and \"position\" will be within the set achieved band tolerance.   \n\n<b>\"Position\"</b> is the actual position of the drive at any given time.  The computer calculates this based on information it receives from the Temposonic Transducer located inside the cylinder rod.  \n\n<b>\"Error\"</b> is the difference between \"target\" and \"position\". \n\n<b>\"Null Value\"</b> is a digital representation of the drive required to hold the positioner in a controlled state.  Under normal operating circumstances the amount of drive required to hold the positioner at 'null' is automatically controlled by the LCI system.  If the number in this column gets too high a message will appear on the video terminal screen reporting that a servo valve is exceeding limits and requires more drive than is acceptable to maintain stability.  If this occurs, check for adequate lubrication, physical damage, lack of hydraulic oil, and the servo valve. \n\n<b>Enable Null Compensation:</b> This option simply enables or disables the auto servo drive null compensation.  Under normal operating conditions, with null compensation on, the system will automatically monitor and adjust voltage to the servo valve to maintain null within limits.  With this feature off, the system will still operate if null gains are reasonable.  If a valve drifts out of null to the degree that the positioner becomes unstable, it must either be manually nulled (see maintenance manual) or auto null compensation switched back on.\n\n","section":"SECTION IV","video":"n"},{"name":"Lastscan","menu":"TroubleShootingOptions","idNum":"000413","type":"help","title":"Last Scan","image":"./app/img/hlpLastScan.png","path":"","content":"This is a useful diagnostic report that will display actual edge and length data from the scanner on a log by log basis.\n\n<b>NOTE:</b> The screen below is from an L4 system; a screen from a photocell system is identical, except it says Photocell instead of Laser in the second column. If your system is equipped with both Laser 3D scanning and a photocell scanner, this screen will show laser data when 3D scanning is on and photocell data when 3D scanning is off.\n\nFor diagnostic purposes, pressing the Save button will capture the current scan data which may be used by LCI engineers to evaluate system performance. After pressing save, a file will be generated with a \"name\" that incorporates the Face and Log number. The file will be stored in the data directory.\n","section":"SECTION IV","video":"n"},{"name":"Encoderinfodisplay","menu":"TroubleShootingOptions","idNum":"000416","type":"help","title":"Encoder Info Display","image":"./app/img/hlpEncoderInfoDisplay.png","path":"Main Menu / Troubleshooting / Encoder Info Display","content":"This menu is primarily a diagnostic screen that allows you or the LCI Engineer to observe carriage tracking.  The values for each line of the display update continuously.\n\n<b>Current Encoder Count</b> displays the encoder count.\n\n<b>Knee 1 to Guide</b> displays the distance from the centerline of Knee 1 to the saw guide.\n\n<b>Front of Log to Guide</b> displays the computers estimation of where the leading end of the log is relative to the saw guide.  If the value is followed by a large R, it indicates that the system is using the Rough Length.\n\n<b>Back of Log to Guide</b> displays the computers estimation of where the trailing end of the log is relative to the saw guide.\n\n<b>Dynamic Log Length</b> is the log length seen by the scanners as the carriage moves up and down the track.\n\n<b>Log Length</b> is the length used to calculate the log solution based on lengths set up in the parameters.\n\n<b>Carriage Referenced</b> reports how many times the carriage has been referenced since the start of shift.\n\n<b>Reference error</b> - Each time a specific point on the carriage passes a limit switch installed in or near the rub rail, the system resets carriage position.  The Reference Error row displays the difference between where the system believes the carriage to be at the end of a pass to where the carriage actually is at reference.  Reference errors should be small corrections.  Errors greater than 2&quot should be investigated and the reason corrected.  Errors greater than 6&quot generate a warning beep at the console.\n\n<b>Carriage Referenced</b> x times since last Zero reports how many times the carriage has been referenced since it was zeroed using the Zero Reference Errors option at the bottom of the dialog box.\n\n<b>Table of Reference Errors</b> displays how many reference errors there were in each error category listed since the last time Reference Errors were zeroed.  The information in this table allows you to track the accuracy of the encoder.\n\n<b>Zero Reference Errors</b> allows you to zero the Reference Errors table.  Reference errors are also zeroed when the setworks program is restarted.\n\n","section":"SECTION IV","video":"n"},{"name":"Setworkshistory","menu":"TroubleShootingOptions","idNum":"000419","type":"help","title":"Setworks History","image":"./app/img/hlpSetWorksHis.png","path":"Main Menu / Troubleshooting / Setworks History","content":"When the Setworks History is first opened, it shows a list of the last setworks related tasks (inputs or outputs) received and processed by the system along with the time each one was handled.  As new entries happen, they are added to the list.  To halt the list entries from being added, simply click on an item in the history list.  To resume adding entries to the list, press (END) or click on the last item in the history list.  To print everything in the history list (RIGHT CLICK) on the blue \"title\" bar and select (PRINT ENTIRE LISTBOX).  To print the list as it appears, (RIGHT CLICK) on the \"title\" bar and select (PRINT SCREEN), or press the (PRTSC) or (PRINT SCREEN) key on the keyboard.\n\n","section":"SECTION IV","video":"n"},{"name":"Solutionhistory","menu":"TroubleShootingOptions","idNum":"000421","type":"help","title":"Solution History","image":"./app/img/hlpSolutionHis.png","path":"Main Menu / Troubleshooting / Solution History","content":"When the Solution History is first opened, it shows a list of the last solutions processed by the system along with the time each one was handled.  As new entries happen, they are added to the list.  To halt the list entries from being added, simply click on an item in the history list.  To resume adding entries to the list, press (END) or click on the last item in the history list.  To print everything in the history list (RIGHT CLICK) on the blue \"title\" bar and select (PRINT ENTIRE LISTBOX).  To print the list as it appears, (RIGHT CLICK) on the \"title\" bar and select (PRINT SCREEN), or press the (PRTSC) or (PRINT SCREEN) key on the keyboard.\n\n","section":"SECTION IV","video":"n"},{"name":"Viewsetworksdiagnosticsconsole","menu":"TroubleShootingOptions","idNum":"000433","type":"help","title":"View Setworks Diagnostic Console","image":"./app/img/hlpSetDia.png","path":"Main Menu / Troubleshooting / View Setworks Diagnostics Console","content":"The diagnostics console is a program that starts the setworks program and is a link to the setworks.  Any communications between windows and the setworks is displayed in this window.  There may be additional numbers displayed on the bottom half of the window for LCI troubleshooting.\n\n","section":"SECTION IV","video":"n"},{"name":"Viewvoltages","menu":"TroubleShootingOptions","idNum":"000427","type":"help","title":"View Voltages","image":"./app/img/hlpVoltages.png","path":"Main Menu / Troubleshooting / View Voltages","content":"Use this screen to view the external voltages within the system.  The voltages are for reference and troubleshooting.  If you have a specific power supply problem, this screen can be useful.  For each positioner, the analog voltage to the servo valve is displayed.  If a voltage meter does not come close to the numbers displayed, there is a hardware malfunction.\n\n","section":"SECTION IV","video":"n"},{"name":"Viewpvaluesconsole","menu":"TroubleShootingOptions","idNum":"000430","type":"help","title":"View Pvalues Console","image":"./app/img/hlpViewPValues.png","path":"Main Menu / Troubleshooting / View Pvalues Console","content":"The pvalues console is a program that opens and saves all permanent values.  The pvalues console is also responsible for saving tally records to database files.  Without the pvalues console, no menu will run.  Once open, the Pvalues Console can be paused by clicking one of the entries.  At that point, new items will be added, but you may continue to view a particular item.  At some point, the list will become too large and the item you selected may disappear, at which point the selection is placed at the last new entry (at the bottom).  To un-pause the list, press (END) or click on the last item in the list.\n\n","section":"SECTION IV","video":"n"},{"name":"Shifttallysummary","menu":"ViewReportOptions","idNum":"000356","type":"help","title":"Shift Tally Summary","image":"./app/img/hlpShiftTallySum.png","path":"Main Menu / View and Report Options / Shift Tally Summary","content":"The Shift Tally Summary reports tallied logs cut by species and total for all species.  It reports average lines per log, average length, average trimmed length, average small-end diameter, average scale and total scale (your choice of rules or formula), average cubic and total cubic.  Total uptime and downtime is also shown.\n\n","section":"SECTION IV","video":"n"},{"name":"Sawdeviationmonitor","menu":"ViewReportOptions","idNum":"000367","type":"help","title":"Saw Deviation Montior","image":"./app/img/hlpSawDevMon.png","path":"Main Menu / View and Report Options / Saw Deviation Monitor","content":"This screen shows the deviation of the saw (based on the Saw Deviation Sensor) and velocity of the carriage (based on encoder readings) at two-foot increments for each log at it is cut.  \n\nThe Saw Deviation Monitor can be paused by clicking one of the entries.  At that point, new items will be added, but you may continue to view a particular item.  At some point, the list will become too large and the item you selected may disappear, at which point the selection is placed at the last new entry (at the bottom).  To un-pause the list, press (END) or click on the last item in the list.\n\n","section":"SECTION IV","video":"n"},{"name":"Viewmachineadjustments","menu":"ViewReportOptions","idNum":"000363","type":"help","title":"View Machined Adjustments","image":"./app/img/hlpViewMachine.png","path":"Main Menu / View and Report Options / View Machine Adjustments","content":"This menu item allows you to view all items relating to the carriage.  These include many key items in the System Startup Calibration, System Runtime Calibration, Clock and Shift Times, Tally and Downtime and Scanner Menus.  All adjustments cannot be displayed on one screen, so you must advance from page to page using the symbols at the top of the page.\n\n<b>NOTE:</b>  One of the most valuable things you can have is a recent printed copy of View Machine Adjustments.  It can be used to troubleshoot the system or as a permanent record of any changes you might make to the operating parameters.  A Machine Adjustments report is typically 15 pages.  Click on the Print button to generate the report.\n\n","section":"SECTION IV","video":"n"},{"name":"Tallyreports","menu":"ViewReportOptions","idNum":"000360","type":"help","title":"Tally Reports","image":"./app/img/hlpTallyReports.png","path":"Main Menu / View and Report Options / Tally Reports","content":"Your system may not include this option.  If printing reports for today, select the Todays Date option, otherwise choose Previous Day.  Next, choose the Species and Shift you wish to report on.  Currently, to get a specific report, you must select a Species and a Shift, otherwise you will get all species and all shifts.  Select which reports you would like to view or print by selecting the appropriate checkboxes.  Set how many copies you want (usually one copy of each report is adequate).  Then click on Print, Preview or OK.  Clicking on Print will print the selected reports.  Clicking Preview will allow you to preview the report on the screen (you will still be able to print if you wish).  Clicking OK will save your report selections and number of copies for later printing or auto-printing.\n\nFor analysis purposes, you may repeat the above procedure but select a different \"From Date\" and \"To Date\".  The system will access its database, compile the data, and create the appropriate reports.  Make sure that the dates you select in the date range are days that you were actually in production.\n\n","section":"SECTION IV","video":"n"},{"name":"Viewcurrentlog","menu":"ViewReportOptions","idNum":"000350","type":"help","title":"View Current Log","image":"./app/img/hlpViewCurrentLog.png","path":"Main Menu / View and Report Options / View Current Log","content":"This report shows a cross section and plan view graphic of the computer model of the log.  A plan view of the log line with respect to the knees is shown on the left side.  The Cut List is displayed near the center top of the dialog box.  Species, log number and face are located in the lower left corner.  Final knee positions for the current cut are shown in the upper right corner.  The lower right contains a cross sectional view of the current solution, current cut, and basic log shape.\n\n","section":"SECTION IV","video":"n"},{"name":"Individuallogmonitor","menu":"ViewReportOptions","idNum":"000346","type":"help","title":"Indivdual Log Monitor","image":"./app/img/hlpIndivLog.png","path":"Main Menu / View and Report Options / Individual Log Monitor","content":"The individual log monitor report shows a face-by-face information highlight of the current log showing how it was scaled.  The Individual Log Monitor can be paused by clicking one of the entries.  At that point, new items will be added, but you may continue to view a particular item.  At some point, the list will become too large and the item you selected may disappear, at which point the selection is placed at the last new entry (at the bottom).  To un-pause the list, press (END) or click on the last item in the list.\n\n<b>Save Logs to File</b> allows you to capture log data that can be used by an LCI Engineer to fine tune sawing solutions.  <b>NOTE:</b>  Logs will continue to accumulate in the log file.  You may run out of disk space if you leave this option on all of the time.\n\nReset Log File clears out the saved log file.\n\n","section":"SECTION IV","video":"n"},{"name":"Downtimesummary","menu":"ViewReportOptions","idNum":"000340","type":"help","title":"Downtime Summary","image":"./app/img/hlpDowntime.png","path":"Main Menu / View and Report Options / Downtime Summary","content":"Your system may not include this option.  Downtime is reported by time and percent of shift.  When carriage motion has stopped for a predetermined length of time (as set in Main Menu / Setup Options / Tally Parameters Setup) a downtime message will appear on the Sawyer Display.  The sawyer can apply downtime to a specific reason code by first pressing the downtime key and then selecting a reason by pressing the set button that corresponds to that reason.  If there is no downtime currently being accrued, this screen may not show any times.\n\n","section":"SECTION IV","video":"n"},{"name":"Sawyers2ddisplay","menu":"ViewReportOptions","idNum":"000353","type":"help","title":"Sawyer 2D Display","image":"./app/img/hlpSawyers.png","path":"Main Menu / View and Report Options / Sawyers 2D Display","content":"This screen shows a cross section graphic of the computer model of the log.  The Cut List is displayed near the left or right side of the dialog box (which side it is on is set in the Set View Options in the Setup Options menu).  Species, log number, line number, length, diameter or value, and scale are located in the upper portion of the dialog box.  The axis is colored to indicate the current cut axis.  Final knee positions for the current cut are shown in the upper left.  Just below the top portion is an area where error messages are displayed (up to six at a time).  The lower portion of the screen contains a cross sectional view of the current solution, current cut, and basic log shape.  The scanner is represented at the bottom.  The current time is located in the lower right corner.\n\n","section":"SECTION IV","video":"n"}]

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactBaseClasses = __webpack_require__(55);
var ReactChildren = __webpack_require__(94);
var ReactDOMFactories = __webpack_require__(98);
var ReactElement = __webpack_require__(16);
var ReactPropTypes = __webpack_require__(102);
var ReactVersion = __webpack_require__(104);

var createReactClass = __webpack_require__(105);
var onlyChild = __webpack_require__(107);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = __webpack_require__(37);
  var canDefineProperty = __webpack_require__(27);
  var ReactElementValidator = __webpack_require__(59);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(116);
var ReactInstrumentation = __webpack_require__(11);

var warning = __webpack_require__(1);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(45);
var setInnerHTML = __webpack_require__(32);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(46);
var setTextContent = __webpack_require__(72);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(24);
var EventPluginUtils = __webpack_require__(39);

var accumulateInto = __webpack_require__(64);
var forEachAccumulated = __webpack_require__(65);
var warning = __webpack_require__(1);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var EventPluginRegistry = __webpack_require__(29);
var EventPluginUtils = __webpack_require__(39);
var ReactErrorUtils = __webpack_require__(40);

var accumulateInto = __webpack_require__(64);
var forEachAccumulated = __webpack_require__(65);
var invariant = __webpack_require__(0);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }
};

module.exports = EventPluginHub;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

var getEventTarget = __webpack_require__(41);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(25);
var ViewportMetrics = __webpack_require__(71);

var getEventModifierState = __webpack_require__(43);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(8);
var DOMNamespaces = __webpack_require__(45);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(46);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(29);
var ReactEventEmitterMixin = __webpack_require__(142);
var ViewportMetrics = __webpack_require__(71);

var getVendorPrefixedEventName = __webpack_require__(143);
var isEventSupported = __webpack_require__(42);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = require("electron");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactErrorUtils = __webpack_require__(40);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(8);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(22);
var Danger = __webpack_require__(127);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(11);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(46);
var setInnerHTML = __webpack_require__(32);
var setTextContent = __webpack_require__(72);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactPropTypesSecret = __webpack_require__(76);
var propTypesFactory = __webpack_require__(60);

var React = __webpack_require__(19);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactCurrentOwner = __webpack_require__(12);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(11);
var ReactUpdates = __webpack_require__(13);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(10);
var warning = __webpack_require__(1);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(20),
    _assign = __webpack_require__(4);

var ReactNoopUpdateQueue = __webpack_require__(56);

var canDefineProperty = __webpack_require__(27);
var emptyObject = __webpack_require__(28);
var invariant = __webpack_require__(0);
var lowPriorityWarning = __webpack_require__(37);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(1);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(12);
var ReactComponentTreeHook = __webpack_require__(9);
var ReactElement = __webpack_require__(16);

var checkReactTypeSpec = __webpack_require__(99);

var canDefineProperty = __webpack_require__(27);
var getIteratorFn = __webpack_require__(58);
var warning = __webpack_require__(1);
var lowPriorityWarning = __webpack_require__(37);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = __webpack_require__(61);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(10);
var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var ReactPropTypesSecret = __webpack_require__(38);
var checkPropTypes = __webpack_require__(103);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(108);


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(8);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(17);

var invariant = __webpack_require__(0);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },


  track: function (inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function () {
        return descriptor.get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(8);
var escapeTextContentForBrowser = __webpack_require__(33);
var setInnerHTML = __webpack_require__(32);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(15);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(11);

var quoteAttributeValueForBrowser = __webpack_require__(141);
var warning = __webpack_require__(1);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(47);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(13);

var warning = __webpack_require__(1);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(149);
var ReactEmptyComponent = __webpack_require__(80);
var ReactHostComponent = __webpack_require__(81);

var getNextDebugID = __webpack_require__(152);
var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var React = __webpack_require__(19);

var invariant = __webpack_require__(0);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(153);

var getIteratorFn = __webpack_require__(154);
var invariant = __webpack_require__(0);
var KeyEscapeUtils = __webpack_require__(51);
var warning = __webpack_require__(1);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(10);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(166);

var containsNode = __webpack_require__(168);
var focusNode = __webpack_require__(73);
var getActiveElement = __webpack_require__(85);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var DOMLazyTree = __webpack_require__(22);
var DOMProperty = __webpack_require__(15);
var React = __webpack_require__(19);
var ReactBrowserEventEmitter = __webpack_require__(34);
var ReactCurrentOwner = __webpack_require__(12);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMContainerInfo = __webpack_require__(183);
var ReactDOMFeatureFlags = __webpack_require__(184);
var ReactFeatureFlags = __webpack_require__(68);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(11);
var ReactMarkupChecksum = __webpack_require__(185);
var ReactReconciler = __webpack_require__(21);
var ReactUpdateQueue = __webpack_require__(52);
var ReactUpdates = __webpack_require__(13);

var emptyObject = __webpack_require__(28);
var instantiateReactComponent = __webpack_require__(78);
var invariant = __webpack_require__(0);
var setInnerHTML = __webpack_require__(32);
var shouldUpdateReactComponent = __webpack_require__(50);
var warning = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(79);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = findTabbableDescendants;
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */

var tabbableNode = /input|select|textarea|button|object/;

function hidden(el) {
  return el.offsetWidth <= 0 && el.offsetHeight <= 0 || el.style.display === "none";
}

function visible(element) {
  var parentElement = element;
  while (parentElement) {
    if (parentElement === document.body) break;
    if (hidden(parentElement)) return false;
    parentElement = parentElement.parentNode;
  }
  return true;
}

function focusable(element, isTabIndexNotNaN) {
  var nodeName = element.nodeName.toLowerCase();
  var res = tabbableNode.test(nodeName) && !element.disabled || (nodeName === "a" ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);
  return res && visible(element);
}

function tabbable(element) {
  var tabIndex = element.getAttribute("tabindex");
  if (tabIndex === null) tabIndex = undefined;
  var isTabIndexNaN = isNaN(tabIndex);
  return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
}

function findTabbableDescendants(element) {
  return [].slice.call(element.querySelectorAll("*"), 0).filter(tabbable);
}
module.exports = exports["default"];

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertNodeList = assertNodeList;
exports.setElement = setElement;
exports.tryForceFallback = tryForceFallback;
exports.validateElement = validateElement;
exports.hide = hide;
exports.show = show;
exports.documentNotReadyOrSSRTesting = documentNotReadyOrSSRTesting;
exports.resetForTesting = resetForTesting;
var globalElement = null;

function assertNodeList(nodeList, selector) {
  if (!nodeList || !nodeList.length) {
    throw new Error("react-modal: No elements were found for selector " + selector + ".");
  }
}

function setElement(element) {
  var useElement = element;
  if (typeof useElement === "string") {
    var el = document.querySelectorAll(useElement);
    assertNodeList(el, useElement);
    useElement = "length" in el ? el[0] : el;
  }
  globalElement = useElement || globalElement;
  return globalElement;
}

function tryForceFallback() {
  if (document && document.body) {
    // force fallback to document.body
    setElement(document.body);
    return true;
  }
  return false;
}

function validateElement(appElement) {
  if (!appElement && !globalElement && !tryForceFallback()) {
    throw new Error(["react-modal: Cannot fallback to `document.body`, because it is not", "ready or available. If you are doing server-side rendering, use this", "function to defined an element. `Modal.setAppElement(el)` to make", "this accessible"].join(" "));
  }
}

function hide(appElement) {
  validateElement(appElement);
  (appElement || globalElement).setAttribute("aria-hidden", "true");
}

function show(appElement) {
  validateElement(appElement);
  (appElement || globalElement).removeAttribute("aria-hidden");
}

function documentNotReadyOrSSRTesting() {
  globalElement = null;
}

function resetForTesting() {
  globalElement = document.body;
}

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.add = add;
exports.remove = remove;
exports.totalCount = totalCount;
var classListMap = {};

function get() {
  return classListMap;
}

function add(bodyClass) {
  // Set variable and default if none
  if (!classListMap[bodyClass]) {
    classListMap[bodyClass] = 0;
  }
  classListMap[bodyClass] += 1;
  return bodyClass;
}

function remove(bodyClass) {
  if (classListMap[bodyClass]) {
    classListMap[bodyClass] -= 1;
  }
  return bodyClass;
}

function totalCount() {
  return Object.keys(classListMap).reduce(function (acc, curr) {
    return acc + classListMap[curr];
  }, 0);
}

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canUseDOM = undefined;

var _exenv = __webpack_require__(210);

var _exenv2 = _interopRequireDefault(_exenv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EE = _exenv2.default;

var SafeHTMLElement = EE.canUseDOM ? window.HTMLElement : {};

var canUseDOM = exports.canUseDOM = EE.canUseDOM;

exports.default = SafeHTMLElement;

/***/ }),
/* 92 */
/***/ (function(module, exports) {

module.exports = [{"name":"Intro","idNum":"000001","type":"section","section":"","content":"<center>\n<img className=\"pdfImg\" src=\"./app/img/pdfTitleImg.PNG\"</img>\n<p className=\"pdfText\">\n<b>\nLewis Controls, Inc. \n260 N 26 Ave. / PO Box 526 \nCornelius, OR 97113 \n503-648-9119 \nwww.lewiscontrols.com\n</b>\n</p>\n</center>\n</article>\n<article className=\"addPageBreakAfter\">\n<p className=\"pdfText\">\nThank you for purchasing your Lewis Controls Scanning Carriage Setworks control system. The goal of this manual is to provide valuable information that will allow you to take full advantage of the features and functions the system has to offer.\nThe goals of this manual are:\n<ol>\n<li>To outline the carriage Setworks & scanner system installation.</li>\n<li>To provide the information tools needed to adjust all of the system parameters to the best advantage of the mill.</li>\n<li>To provide the information tools needed to effectively maintain LCI carriage Setworks and scanner systems.</li>\n</ol>\nThis manual will, in some cases, discuss system components or features that are not implemented on your Setworks. This is a result of customizing each of our systems to the needs of the mill where it is to be used. We hope this does not create confusion.\n<b><i>NOTE:</i></b>\nAs with most manuals, we recommend you read this one from cover-to-cover before operating the system. Also, be aware that operations and practices vary from region to region. Menus may vary slightly from those depicted and various modes may be unused in your application and turned off in the software.\nOnce again, thank you for your business and we are confident that the system will provide you with years of excellent service. If you have any questions or comments regarding the information presented in this manual, please feel free to call or write.\n\n<center>\n<b>\nLEWIS CONTROLS, INC.\nP.O. BOX 526 CORNELIUS, OR 97113\n(503) 648-9119 FAX: (503) 693-1110\nsales@lewiscontrols.com\n</b>\n</center>"},{"name":"Important","idNum":"000002","type":"section","section":"","content":"<b>IMPORTANT NOTICE</b> \nALL SAWMILL EQUIPMENT AND CONTROLS SHOULD BE INSTALLED, OPERATED AND SERVICED BY TRAINED PERSONNEL ONLY. SUCH EQUIPMENT IS POTENTIALLY HAZARDOUS, AND EXTREME CAUTION MUST ALWAYS BE EXERCISED. IT IS THE OWNERS RESPONSIBILITY TO USE ONLY TRAINED PERSONNEL. \n\nMOST ITEMS SUPPLIED BY THE MANUFACTURERS ARE NOT COMPLETE, READY-TO-OPERATE MACHINES. PROPER INSTALLATION, ALIGNMENT AND PRE-OPERATION CHECKS MUST BE COMPLETED. WHEN INSTALLING THIS EQUIPMENT REFER TO APPLICABLE NATIONAL SAFETY STANDARDS, OSHA REGULATIONS, NATIONAL ELECTRICAL CODES, AND APPLICABLE STATE AND LOCAL CODES. FOR YOUR CONVENIENCE, A LISTING OF 'PRIMARY APPLICABLE SAFETY STANDARDS FOR SAWMILL MACHINERY' IS ENCLOSED (2-60A). \n\nEQUIPMENT SHOULD BE INSTALLED BY QUALIFIED AND PROPERLY LICENSED AND TRAINED PERSONNEL AND IF REQUIRED, INSPECTED BY AUTHORIZED STATE AND/OR LOCAL AUTHORITIES BEFORE START-UP. \n\n<b>IMPORTANT NOTICE</b>\nTHE MANUFACTURER IS CONCERNED ABOUT SAFETY AND INCORPORATES VARIOUS SAFETY FEATURES IN THE CONTROL SYSTEM. HOWEVER, NONE OF THESE ARE TRUE LOCKOUT DEVICES. IT IS THE OWNERS RESPONSIBILITY TO SEE THAT LOCKOUT DEVICES AND/OR OTHER DEVICES THAT MEET OR EXCEED OSHA AND/OR STATE LOCAL REQUIREMENTS ARE OBTAINED, INSTALLED AND USED PROPERLY. OWNERS ARE ALSO RESPONSIBLE FOR ESTABLISHING OPERATION, LOCKOUT/TAGOUT, AND SERVICING PROCEDURES FOR THE CONTROL SYSTEM AS WELL AS TRAINING PERSONNEL. \n\nSPECIFIC WARNINGS ARE HIGH-LIGHTED ON THE VARIOUS PAGES OF THIS MANUAL. THESE SHOULD BE READ AND UNDERSTOOD BY OPERATING PERSONNEL PRIOR TO START-UP OF THE CONTROL SYSTEM. \n"},{"name":"Safety","idNum":"000003","type":"section","section":"","content":"<p className=\"pdfText\">\n<b>PRIMARY APPLICABLE SAFETY STANDARDS FOR SAWMILL MACHINERY</b>\n\n<b>I. &nbsp;&nbsp;OSHA STANDARDS</b>\nFederal Register Volume 37 - Number 202 Part II - Title 29 - Labor Chapter XVII, Part 1910. Particularly, but not limited to, subpart 1910.265 'Sawmills', and 1910.147 'The Control of Hazardous Energy Source (Lockout/Tagout)'. For later revisions refer to subsequent volumes of the Federal Register and codifications thereof in the Code of Federal Regulations, Title 29 - Labor.\n\n<b>II. &nbsp;&nbsp;AMERICAN NATIONAL STANDARDS</b> \n\nMany Sections from above were adopted from the American National Standards and published by American National Standards Institute, Inc. 1430 Broadway, New York, New York 10018. Some of the applicable standards are.\n1. &nbsp;&nbsp;ANSI Z244.1-1982 &nbsp;&nbsp;&nbsp; Personnel Protection Lockout/Tagout of Energy Source\n2. &nbsp;&nbsp;ANSI 02.1 -1983 &nbsp;&nbsp;&nbsp;&nbsp; Safety Requirements for Sawmills\n3. &nbsp;&nbsp;ANSI B15.1-1984 &nbsp;&nbsp;&nbsp;&nbsp; Safety Standards for Mechanical Power Transmissions Apparatus\n4. &nbsp;&nbsp;ANSI B20.1-1987 &nbsp;&nbsp;&nbsp;&nbsp; Safety Standards for Conveyers Related Equipment\n5. &nbsp;&nbsp;ANSI A-12.1-1973 &nbsp;&nbsp;&nbsp;&nbsp; Floor and Wall Openings, Railings and Toeboards\n6. &nbsp;&nbsp;ANSI A58.1-1982 &nbsp;&nbsp;&nbsp;&nbsp; Minimum Design Loads in Buildings Stairs Fixed Industrial\n7. &nbsp;&nbsp;ANSI A64.1- 1968 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stairs Fixed Industrial\n\n<b>III. &nbsp;&nbsp;NATIONAL ELECTRICAL CODE</b>\n\nPublished annually by the National Fire Protection Association, 470 Atlantic Ave., Boston, Massachusetts 02210\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2-60A) Revised 2-12-91\n\n<b>IV. &nbsp;&nbsp;Laser Safety - Class 3B Lasers</b>\n\nIEC 60825-1, Am. 2 \nand IEC 60601-2-22 &nbsp;&nbsp;&nbsp; Final Guidance for Industry and FDA\n</p>"},{"name":"Section One","idNum":"000004","type":"section","section":"Section I","content":"<div>\n<b>SECTION I. - SYSTEM INSTALLATION</b>\n\n<b>A. &nbsp;Introduction</b>\nYou have made an investment in a high quality setworks/optimizing control system. Careful planning of the installation will pay dividends by minimizing start-up time, enhancing reliability and improving the maintainability of the system.\nInstalling the system is a process requiring many diverse steps. The following sections provide lists of tasks and information related to the installation. Our intent is to minimize the chance of oversight. The lists are not necessarily in sequence, should not be considered inclusive, and may discuss items not used on your system. If you have any questions, please do not hesitate to contact LCI for additional information or clarification.\nIn many cases, a great deal of installation work can be accomplished before the mill shuts down to make the change over. The involvement of LCI personnel onsite is generally limited to checkout, parameter setup and initial power-up. Beyond that point, LCI will assist in system troubleshooting, fine tuning and training of sawyers and maintenance personnel.\n</div>\n<div>\n<b>A-1. &nbsp;What is supplied by Lewis Controls, Inc. (LCI)?</b>\n<ul>\n<li>All hardware and software as defined by our contract and confirmed by the purchase order.</li>\n<li>All spares, manuals and operating supplies defined by our contract.</li>\n<li>All shielded cables required for positioners, Temposonics, displays, etc.</li>\n<li>System drawings which detail the wiring, conduit runs and system hardware.</li>\n<li>Initial checkout of the control system and set up of the initial system parameters.</li>\n<li>Training of Sawyers and Maintenance personnel as defined by our contract.</li>\n<li>Maintenance back-up and assistance for mill personnel as they maintain the system hardware and software, by phone or if required, on-site.</li>\n</ul>\n</div>\n<div>\n<b>A-2. Mill Or Others Responsibilities</b>\nThe mill responsibilities as outlined in this section are intended as a guideline. More detailed information is provided in the following sections. It is hoped that this will minimize areas of potential misunderstanding and oversight. In all cases the LCI contract will be used to resolve questioned areas and may, in some instances, override sections of this manual.\nIn general, the mill responsibilities are:\n<ul>\n<li>Provide and install all required conduit.</li>\n<li>Provide and install all required field wiring.</li>\n<li>Provide, install, wire and adjust all switches, and supply inputs to LCI equipment.</li>\n<li>Mount and wire all system components.</li>\n<li>Install, plumb, and flush the hydraulic components.</li>\n<li>Install 3D scan bar (shape scan systems)</li>\n<li>Install upper and lower scan bars (photocell scanner systems)</li>\n<li>Adjust scanner photocells (photocell scanner systems)</li>\n<li>Provide and install a blower and plenum, if necessary, to provide positive air pressure within the lower scanner housing (photocell scanner systems).</li>\n</ul>\n</div>\n<div>\n<b>A-3. Site Preparation</b>\nWhen locating system components, you should always consider:\n<ul>\n<li>Accessibility for maintenance.</li>\n<li>Accessibility for operation.</li>\n<li>Environment (vibration, temperature, humidity, and cleanliness).</li>\n<li>Ease of installation.</li>\n</ul>\n</div>\n<div>\n<b>A-4. System Drawing Package</b>\nThe system drawing packages supplied by LCI are intended for use during installation and maintenance activities. Minor wiring changes made during installation will be incorporated into LCIs master drawings and copies will be returned to the mill. This will allow LCI to better support your maintenance efforts in the future.\nThe system drawings provided by LCI identify:\n<ul>\n<li>AC Source requirements.</li>\n<li>Conduit requirements</li>\n<li>Functional unit identification and sizes.</li>\n<li>Pull boxes (required or recommended).</li>\n<li>DC wiring (wire sizes specified are minimum).</li>\n<li>AC wiring (wire sizes specified are minimum).</li>\n<li>Multiple conductor shielded cable requirements.</li>\n<li>Back panel layout (wiring and cable terminations).</li>\n<li>Setworks 'black' box layout and interconnect cables.</li>\n<li>Wiring diagram of computer cabinet.</li>\n<li>Console and handle layouts.</li>\n<li>Functional unit interconnection wiring.</li>\n<li>Scanner details.</li>\n<li>PLC layout and wiring.</li>\n<li>Positioner wiring.</li>\n</ul>\n</div>\n<div>\n<b>B. Sawyers Cab and Computer Installation</b>\n<b>B-1. Mill Responsibilities</b>\n<ul>\n<li>Mount the computer cabinet in the desired location (bolt to wall and floor)</li>\n<li>Mount the Programmable Logic Controller (PLC) - if a separate unit.</li>\n<li>Mount the operator console.</li>\n<li>Install all conduit runs per drawing package.</li>\n</ul>\n</div>\n<div>\n<b>B-2. General Recommendations</b>\nThere are usually a number of different options when mounting the computer cabinet and sawyer console. Here are some things to consider when installing your system.\nTry to pick a location for the computer cabinet that is subjected to minimal vibration. Avoid areas which receive regular heavy shocks from mill equipment. Although your equipment will function in these areas, constant and repeated vibration/shocks may shorten the life of some of the components in your system.\nMost systems will be mounted in the cab with the sawyer. If the computer cabinet is to be mounted in a separate room, we would suggest that you should be able to see the carriage from that room. This will improve system operation and simplify troubleshooting. Minimize the length of wiring runs. We recommend that from the computer out onto the carriage should be no more that 150 feet.\nThe computer environment should be temperature controlled (both heating and air conditioning). Minimize the amount of dust coming into the area if possible. If air conditioning is not already in place, consider drawing fresh air from low dust areas (such as outside or under the mill).\n</div>\n<div>\n<b>C. Carriage Electrical</b>\n<b>C-1. Mill Responsibilities</b>\n<ul>\n<li>Provide conduit for wiring runs between the computer cabinet and the carriage.</li>\n<li>Pull and terminate all wires and cables required per system drawing package.</li>\n<li>Mount all switches required: pantograph position, set enable, others as needed.</li>\n<li>Mount carriage position encoder</li>\n<li>Mount saw deviation sensors (if included with system)</li>\n<li>Mount saw guide position sensor (if included with system)</li>\n<li>Install shunt diodes on all DC relays driven by LCI equipment.</li>\n<li>Install MOV noise suppressers across all AC solenoids driven by LCI equipment.</li>\n<li>Install a dedicated phone line into the computer room/cab.</li>\n</ul>\n</div>\n<div>\n<b>C-2. Electrical Noise</b>\nLow voltage, low current high-speed electronics are quite susceptible to electrical noise. LCI equipment is designed to provide as much immunity to noise as practical. In a mill environment, some noise problems may need to be eliminated, minimized or isolated outside of the LCI supplied equipment.\nTo prevent operational problems caused by electrical noise, LCI recommends or specifies the following.\n<ul>\n<li>A separate AC source to LCI equipment.</li>\n<li>AC to the computer shall be supplied from a regulation transformer or UPS.</li>\n<li>Separate routing of AC & DC wiring within cabinets.</li>\n<li>AC solenoids powered from LCI equipment must have MOV R.F. noise suppressers across each solenoid.</li>\n<li>If discrete relays are used, the coils must have shunt diodes across each coil.</li>\n<li>Computer outputs are not to be connected to components not supplied or approved by LCI.</li>\n</ul>\n</div>\n<div>\n<b>C-3. Carriage Electrical Detail</b>\nTo reduce electrical noise, AC and DC wiring must be run in separate conduits. Wire runs from the computer cabinet across the pantograph to the carriage must be separated into two groups - AC and DC. These groups should be physically separated by at least 6 inches. The high voltage AC group includes all carriage solenoids (dogs up/down in/out, oil pump, etc.) The low voltage DC group will include all Temposonics and servo valve wiring. Do not connect cables on the carriage to either the hydraulic valves or Temposonics probes until the wiring has been checked by the LCI Engineer during startup. LCI recommends that Hydraulic Valve and Temposonics cables be run without any additional terminations from the carriage back to the computer.\nAllow extra length and provide strain relief at all pivot points for the wire runs that cross over the pantograph. Where the wires cross the elbow in the center of the pantograph, leave a service loop that hangs down about 1½ feet. A service loop that is too small will cause premature failure of the cables.\nAdjust all switches to provide a contact closure when operated. There are three different types of switches and sensors that may be found in your system - Pantograph, Carriage Reference/Set Enable and Saw Guide.\nThe <b>pantograph position switch</b> should close when the carriage passes the saw as it moves away from the load deck. The contact closure should occur when knee 2 passes the saw and must be maintained until the carriage returns to the load deck side of the saw.\nThe <b>carriage reference</b> and <b>set enable switches</b> serve two purposes. They are used to determine a starting point for tracking the carriage as it moves up and down the track and they are used to provide additional information on when it is safe to make a set. Drawing W-XXXX-20200 shows the suggested carriage reference and set enable proximity switch locations.\nThe <b>saw guide sensors</b> are mounted to the upper saw guide and are used to measure saw deflection. See drawing W-XXXX-20301. This is an optional system feature and may not have been included with your system.\nSystems with <b>saw guide control</b> will have a special Temposonics probe that is mounted along side of the saw guide with a rod that attaches to the saw guide. As the saw guide goes up and down, a magnet is moved up and down on the Temposonics probe. The purpose of this probe is to monitor the position of the saw guide so that the system can automatically set the saw guide just above the surface of the log. When mounting the Temposonics probe, it should be positioned so that magnet which slides up and down on the probe does not bottom out or come closer than ½ inch of the end of the probe as the saw guide moves between it- minimum and maximum height. This is an optional system feature and may not have been included with your system.\nThe <b>carriage encoder</b> is normally attached directly to the carriage drive drum using a stub shaft and a flex coupling. It may also be connected by using sprockets with a small chain or pulleys and a cogged belt. If the direct drive method is not used, the ratio between the carriage drum and the encoder should be approximately 1:1.\n</div>\n<div>\n<b>D. Setworks Hydraulics</b>\n<b>D-1 Mill Responsibilities</b>\n<ul>\n<li>Install hydraulic power unit and dump valve panel. Flush system per Section D-3.</li>\n<li>Install hydraulic positioners.</li>\n</ul>\n</div>\n<div>\n<b>D-2. Setworks Plumbing Schedule</b>\n<b>2 1/2'' Bore Setworks Cylinders:</b>\n<b>2 BLOCK CARRIAGES</b>\n<ul>\n<li>Pump to hydraulic safety valve package ......................... 1'' Schedule 80</li>\n<li>Carriage pressure header .............................................. 1'' Schedule 80</li>\n<li>Carriage cushion (T2) header ......................................... 1'' Schedule 80</li>\n<li>Carriage return (T1) header ............................................ 1'' Schedule 40</li>\n<li>Carriage to tank .............................................................. 1'' Schedule 40</li>\n</ul>\n<b>3 AND 4 BLOCK CARRIAGES</b>\n<ul>\n<li>Pump to hydraulic safety valve package ......................... 1'' Schedule 80</li>\n<li>Carriage pressure header .............................................. 1 1/4'' Schedule 80</li>\n<li>Carriage cushion (T2) header ......................................... 1'' Schedule 80</li>\n<li>Carriage return (T1) header ............................................ 1 1/4'' Schedule 40</li>\n<li>Return to tank........ ........................................................ 1 1/4'' Schedule 40</li>\n</ul>\n<b>3 1/4'' Bore Setworks Cylinders:</b>\n<b>2 BLOCK CARRIAGES</b>\n<ul>\n<li>Pump to hydraulic safety valve package ........................ 1'' Schedule 80</li>\n<li>Carriage pressure header ............................................. 1'' Schedule 80</li>\n<li>Carriage cushion (T2) header ........................................ 1'' Schedule 80</li>\n<li>Carriage return (T1) header ........................................... 1'' Schedule 40</li>\n<li>Carriage to tank ............................................................ 1'' Schedule 40</li>\n</ul>\n<b>3 BLOCK CARRIAGES - 3 1/4'' Setworks Cylinders:</b>\n<ul>\n<li>Pump to hydraulic safety valve package ........................ 1'' Schedule 80</li>\n<li>Carriage pressure header ............................................. 1 1/4'' Scheule 80</li>\n<li>Carriage cushion (T2) header ........................................ 1'' Schedule 80</li>\n<li>Carriage return (T1) header ........................................... 1 1/4'' Schedule 40</li>\n<li>Return to tank ............................................................... 1 1/4'' Schedule</li>\n</ul>\n<b>4 BLOCK CARRIAGES</b>\n<ul>\n<li>Pump to hydraulic safety valve package ........................ 1'' Schedule 80</li>\n<b>NOTE: If pump and motor capacity exceed 35 g/m use 1 1/4'' Schedule 80</b>\n<li>Carriage pressure header ............................................. 1 1/4'' Schedule 80</li>\n<li>Carriage cushion (T2) header ........................................ 1'' Schedule 80</li>\n<li>Carriage return (T1) header ........................................... 1 1/2'' Schedule 40</li>\n<li>Return to tank ............................................................... 1 1/2'' Schedule 40</li>\n</ul>\nTypical Hydraulic schematic drawing:\n<img src=\"./app/img/data/hydroDrawing.PNG\" className=\"pdfHelpImg\"></img>\n\n</div>\n<div>\n<b>D-3. Hydraulic Recommendations:</b>\n<ul>\n<li>Keep mill plumbing runs short and with as few turns as possible to minimize pressure losses in the plumbing.</li>\n<li>Use hoses to make 90 Degree turns in the mill plumbing runs. This allows for pipe expansion and contraction as well as minimizing pressure drops and trapping contaminants at turns.</li>\n<li>Use tubing with compression fittings. LCI advises against using threaded pipe because it increases the probability of leaks and contaminants.</li>\n<li>All hoses used on pressure and cushion lines are to be rated at 3000 psi.</li>\n<li>Hydraulic components are precision built units. Cleanliness during installation and maintenance is imperative to long life. All pipes, hoses, and tubing must be cleaned thoroughly and kept clean before installation between the hydraulic power unit and remote components. Use only pipe cleaned by pickling and pacifying (P.O.P.) or sandblasting to remove internal mill scale.</li>\n</ul>\n</div>\n<div>\n<b>D-4. Hydraulic System Startup</b>\n<ol>\n<li>When the plumbing and wiring have been completed, check motor rotation and fluid level. If filling is needed, a filtered pump and the quick connect filling provision should be used.</li>\n<li>Close all ball valves.</li>\n<li>Connect bypass couplings at each positioner to connect pressure hose (P) to return hose (T). Be sure to cap off the hose fittings on the cylinder.</li>\n<li>Start the power unit up at a reduced pressure.</li>\n<li>Check for leaks at the first ball valve. Manually or electrically energize the hydraulic safety valve.</li>\n<li>With pressure up on the positioner ball valves, sequentially open and close each ball valve and check for leaks.</li>\n<li>With the ball valves all closed, increase system pressure to 1800 psi and repeat steps 5 & 6.</li>\n<li>Top off the oil level, if necessary, at this time. This will ensure that all of the system oil will be filtered and that there will be sufficient oil to extend the cylinders.</li>\n<li>Start hydraulic system flushing. With system pressure to the positioner ball valves:</li>\n\n<ol type=\"a\">\n<li>Sequentially open and close each positioner ball valve 15-20 times at 10 second intervals. Leave each ball valve closed as you complete that positioner.</li>\n<li>Sequentially open each positioner ball valve and flush through that area by itself for 10-15 minutes.</li>\n<li>Open all of the system ball valves including the flushing bypass ball valve, if present. Flush six hours minimum. Use a hammer to vibrate all plumbing while flushing</li>\n<li>Shut down the power unit.</li>\n<li>Replace the filter cartridges. Spares are provided with the system for this purpose.</li>\n<li>Start-up the power unit and begin final flushing for 1 hour minimum with all ball valves open.</li>\n<li>Shut down the power unit and make the final connections to the positioners.</li>\n</ol>\n</ol>\nFlushing the hydraulic system in this manner will remove contaminants in the oil and protect the investment you have made in a high quality positioning system. We recommend replacing filter cartridges after one (1) month - operation and sampling the oil regularly. An oil sample should be taken after 3 months. Oil sample timing after that, should be based upon the sample results. Anytime the hydraulic system is opened, filters replaced, oil added, etc., the system should be flushed for at least two hours before operating the positioners.\n</div>\n<div>\n<b>E. Scanner - 3D Shape Scan Systems</b>\n<b>E-1. Mill Responsibilities</b>\n<ul>\n<li>Mount the upper scan beam per scanner installation drawings</li>\n<li>Mount the scanner wire duct to the support structure on the backside of the scan beam.</li>\n<li>Run conduit from the scanner wire duct to the computer cabinet.</li>\n<li>Pull laser and fiber optic cables back to computer cabinet.</li>\n</ul>\n</div>\n<div>\n<b>E-2. Scanner Support Structure and Wire Duct</b>\nWhen designing the structure that will support and position the scan bar, select a scanner mounting that is as free from vibration as possible. Avoid tying the support structure into mill steel, particularly if there is significant vibration from other equipment. If vibration is a concern, consider suspending the scan beam from the roof or building a scanner support structure from the ground up on an isolated concrete pad.\nIn addition to the scan bar, there is a wire duct that is normally mounted on the back side of the support structure behind the scan bar. This wire duct carries power supply and data cables for the individual laser scanners and must be mounted within 2 feet of the scan heads. To help prevent damage to fiber optic cables, LCI recommends using a 1 1/4'' diameter conduit and a 4'' or larger radius for the turns.\n</div>\n<div>\n<b>E-3. Scan Bar Location</b>\nYour system drawings show a preliminary location for the laser scan heads relative to the carriage. The scan heads will be mounted on a metal scan bar that can pivot to improve the scanning angle.\nAccurate placement of the scan bar is essential in obtaining consistent solutions and maximum recovery from your system. The scan bar must be level and parallel to the saw line. Refer to your system drawings (M-XXXX-40031) for the dimensions. For the most effective scanning, the log being scanned needs to lie between 90 and 120 inches (7.5 to 10 feet) from the scan heads and be positioned linearly so that at least one laser is toward the saw side of the log index line. For a flat carriage, the scan bar will normally be mounted at an angle of about 30Ã‚Â° or less from horizontal. The location and angle of the scan bar will be engineered by LCI to maximize the effectiveness of the scanner over the widest range of log diameters.\nNOTE: When mounting the scan bar, the scan bar should only be tack welded into position until an LCI engineer can verify its position during startup.\n</div>\n<div>\n<b>F. Scanner and Photocell Systems</b>\n<b>F-1. Mill Responsibilities</b>\n<ul>\n<li>Mount the lower scanner housing per scanner installation drawings (M-XXXX-6001, M-XXXX-6002)</li>\n<li>Mount upper scan beam per scanner installation drawings.</li>\n<li>Wire PEC transmitters and receivers.</li>\n<li>Connect blower and needed duct work to lower scanner housing.</li>\n</ul>\n</div>\n<div>\n<b>F-2. Photocell Scanner Assembly Installation</b>\nThe photocell scanner supplied by LCI uses Banner SM31 photoelectric cells. Each PEC location consists of a transmitter and a receiver. The transmitter is part number SM31EL. The receiver is part number SM31RL. The setup required is on receivers only.\nReceivers obtained from LCI will be set up as follows; light operate, maximum gain and aperture AP31040V installed.\nTransmitters are installed within the enclosed lower scanner housing. The wire connections are: blue to common and brown to +24VDC.\nThe receivers are mounted on the upper scanner beam. The wire connections are: blue to common, brown to +24 VDC, white to signal, and black is not used.\n</div>\n<div>\n<b>F-3. Scan Line Location</b>\nThere are several factors that have an influence on where the scan line should be located. In all cases, excellent scanner operation has resulted when the scan line is in the neighborhood of 1 inch on the carriage side of, and parallel to the saw line. The location selected for your mill is shown on drawing M-XXXX-6002.\n</div>\n<div>\n<b>F-4. Locating the lower Scanner Housing</b>\n<ol>\n<li>To get the lower scanner housing installed, it must be oriented properly in three dimensions.</li>\n<ol type=\"a\">\n<li>Spacing between segments. Most lower scanner housings are separated into two or more segments. Care must be taken to properly locate the scanner elements adjacent to the log turner to maintain proper photocell spacing as called out on system drawing M-XXXX-6001.</li>\n<li>The back of the lower scanner housing should be vertical.</li>\n<li>The photocell centerline must be located as shown on drawing M-XXXX-6002.</li>\n</ol>\n<li>To properly install the lower scanner housing, we suggest that the two housing ends adjacent to the log turner be located first and properly spaced per drawing M-XXXX-6001. The following information is needed to locate the scanner housing relative to the saw line.</li>\n<ol type=\"a\">\n<li>With a band mill (or circle) saw in place, measure from the end of the last knee\nbase to the saw. _________</li>\n<li>From drawing M-XXXX-6002 locate the distance from the saw line to the scan\nline. _________</li>\n<li>Subtract distance B from distance A. This is the distance from the reference\nknee to the scan line. _________________</li>\n<li>The photocell centerline to the back of the lower housing is 1.15''. Add distance\nC to 1.15'' to find the distance from the end of the reference knee to the back of\nthe lower housing. _______________</li>\nBy measuring from the end of the knee to a level, it is now quite simple to put the\nhousing in place. Avoid using the flat rail as a reference since it may not be parallel\nto the V-Rail.\nIn the example shown, we picked a three-knee carriage with knee three 1.25'' from a\nstrained up band mill.\n</ol>\n<b>Example:</b>\n<ul>\n<li>Knee-3 measured to saw equals 1.25''.</li>\n<li>Drawing M-XXXX-6002 Saw to photocell centerline is .65''.</li>\n<li>Calculate Knee-3 to photocell centerline (1.25''-.65'') .60''</li>\n<li>Calculate Knee-3 to back of housing (1.15'' +.60'') 1.75''</li>\n</ul>\n<img src=\"./app/img/sawToCell.PNG\" className=\"pdfHelpImg\"></img>\nDepending on what tools are available and your personal preference, you may want\nto use a long level clamped to the housing and a tape measure, or clamp an\nextension onto the knee and use a short level and plumb bob.\nWe suggest tacking the ends of the housing next to the turner first. When the\nhousing is true end-to-end, complete welding it down.\n<li>To locate the upper scanner frame, drop a plumb bob from the center of the receiver\nlenses at each end of that frame section. Position the receiver frame such that the\nplumb bobs are centered in the transmitter openings. The receiver frame can now\nbe tack welded at the ends. To keep the center of the receiver frame from moving, a\nbrace is usually installed. Again, drop a plumb from a receiver in the center of the\nscanner, adjust for position and weld.</li>\n<b>Note</b> that when the scanner is installed in this location the carriage bases cannot extend over the scanner.\n</ol>\nTypical installation drawings:\n<img src=\"./app/img/typicalDrawing1.PNG\" className=\"pdfHelpImg\"></img>\n<img src=\"./app/img/typicalDrawing2.PNG\" className=\"pdfHelpImg\"></img>\n</div>"},{"name":"Section Two","idNum":"000005","type":"section","section":"Section II","content":"<div>\n<b>SECTION II. SYSTEM START-UP & ADJUSTMENTS</b>\n<b>A. System Start-up</b>\nSystem start-up time provides an excellent opportunity for maintenance personnel to become familiar with system features and operation. Almost every part of the system is touched during start-up. As always, ensure all mill safety procedures are followed during start-up. . NOTE: Power is NOT to be applied to the system until the LCI engineer is onsite to complete the installation.\n</div>\n<div>\n<b>B. Initial Power-up</b>\n<ul>\n<li>Disconnect all cables going to external sources. (Console, scanner, Temposonics, shaft encoder, servo-valve, saw deviation cables, and all external AC wires to/from the PLC)</li>\n<li>Power-up the computer/setworks cabinet. Using the troubleshooting menu, verify all power supply voltages are correct.</li>\n<li>Power-down the computer/setworks cabinet.</li>\n<li>Plug in all external cables and wiring. Leave Temposonic, servo-valve, and shaft encoder cables unplugged at the mil-spec connector (carriage end).</li>\n<li>Power-up the computer/setworks cabinet. Using the troubleshooting menu, verify all power supply voltages are correct.</li>\n<li>Check power wiring to Temposonics at the carriage end of the cables.</li>\n<b>Temposonics (LH Series with DPM)</b>\nPin A, Ground\nPin E, +15V\n<li>Check power wiring to the servo-valves at the carriage end of the cables.</li>\n<b>Servo-valves (Bosch)</b>\nPin A, +24V (may be nearly +30V)\nPin B, Ground\n<li>Check power wiring to shaft encoder at the encoder end of the cable.</li>\n<b>Shaft Encoder</b>\nPin D, +15V\nPin F, Ground\n<li>Check power wiring to laser heads at the scan bar end of the cable (shape scan systems only).</li>\n<b>L4 Laser Heads</b>\nPin J, +15V\nPin F, Ground\n<li>Power-down the setworks cabinet.</li>\n<li>Plug in Temposonics, servo-valves, and shaft encoder. Plug in all other external cables and wires.</li>\n<li>Ensure that the hydraulic pressure to the carriage has been manually turned off (usually done at the accumulator).</li>\n<li>Power-up the setworks cabinet. Verify DC supplies remain at the proper voltage.</li>\n<li>Display targets and positions at the system terminal. Temposonic positioner input (current position) should be relatively stable. The position should not vary by more than a couple thousandths of an inch with the cylinder still.</li>\n<li><b>Note - During start-up, a knee may lunge or run-away as air is forced out of the system. It is strongly recommended that the carriage be parked next to the rub rail when the hydraulic pressure is turned on for the first time. Be very cautious.</b></li>\n<li>If the safety valve is working properly, enable the hydraulics and turn on the hydraulic power unit.</li>\n<li>At this point, the knees or slabber may be moved using the computer or by plugging in the Servo Test box. Generally, the Servo Test box, which is supplied with the system, will be used only when trying to troubleshoot a servo problem.</li>\n<li>Momentarily depressing the limit override button on the sawyerÃ¢â‚¬â„¢s console will allow the knees to move. Continue to do this until all knee movement has stopped and holding down limit override causes no further knee movement.</li>\n<li>Move the knees to a reasonable location. You may need to hold down limit override during knee movement.</li>\n<li>Adjust the actual knee position to be Ã¢â‚¬Å“closeÃ¢â‚¬Â to where the knees actually are by using the Automatic Positioner Calibration menu.</li>\n(Main Menu/Setup Options/Startup Options/Automatic Positioner Calibration)\n<li>Verify the function of all console & handle switches and indicators.</li>\n<li>Individually disable knees with dogs up and out to verify solenoid wiring. (Disabled knee dogs should go down and in. If setworks hydraulics are on, the disabled knees may creep.)</li>\n<li>Use taper buttons to position knees individually, then cancel taper.</li>\n<li>Verify set enable switch and pantograph position inputs by moving the carriage past the saw. Verify set enable on both sides of the saw</li>\n<b>Note: </b>The load deck set enable switch is also used to reference the carriageÃ¢â‚¬â„¢s position.\n<li>Operate dogs to verify proper function of cinch, etc.</li>\n<li>Test and adjust limits in all dog configurations.</li>\n(Main Menu / Setup Options / Runtime Options / Limits)\n<li>Test function of knee disables, tapers, dog cutouts, jogs, skews and cancels.</li>\n<li>Verify that scanner inputs switch on and off without cross talk by interrupting each beam separately (photocell systems only).</li>\n<li>Test all PLC functions not tested above. (decks, sawguides, oiler, etc.)</li>\n<li>Verify encoder count decreases as the carriage moves from the log deck end toward the mill end.</li>\n<li>Calibrate encoder counts per foot.</li>\n<li>Locate guide to Knee 1 at reference.</li>\n<li>If a shape scan system, input actual laser positions.</li>\n<li>If a photocell scan system, input actual photocell positions.</li>\n</ul>\n</div>\n<div>\n<b>C. Hydraulics System Adjustments</b>\nAt the power unit, locate the relief valve. (normally on the top of the reservoir) Loosen the lock nut and turn the relief clockwise 6 complete turns. We are now sure that the pump pressure can be set without the relief valve opening. Turn the compensator pressure adjustment to bring system pressure to the desired level (typically 1800 psi). With the system pressure set, the next step is to set the relief. Turn the relief counter clock-wise until it relieves. There are several ways to detect this; the pressure gauge will dip, the relief valve may squeal or hiss, the pump will stroke up more often. Turn the relief valve adjustment back clockwise to the point where relieving just stops. Turn it clockwise two complete revolutions past that point and lock it down. While at the power unit, adjust or verify:\n<ol type=\"a\">\n<li>fan temperature switch at 110&#176; f,</li>\n<li>over temperature switch at 140&#176; f,</li>\n<li>heater switch at 80&#176; f,</li>\n<li>float switch shipping bracket off and low level shut down working</li>\n</ol>\nAt the carriage, ensure the pressure gauge is showing full pump pressure. While watching the gauge, have someone turn off the power unit. Continue watching the gauge as pressure dissipates slowly and then dissipates quickly. The point at which it starts to dissipate quickly is the accumulator pre-charge level. The accumulator pre-charge should be about 60% of system pressure. Excessive pre-charge pressure should be bled off for proper operation.\n</div>\n<div>\n<b>D. Hydraulic Cushion Adjustment</b>\nMost systems are equipped with a two-stage cushioning assembly, which may be configured in several different ways. All cushion assemblies have two relief valves. One is active only when the dogs are up (and a log is being loaded or turned), and is called the \"soft cushion\" or \"part-time\" relief valve. The other relief valve is always active, and is called the \"full time\" relief valve.\nTo locate the cushion assembly, look for a manifold block that is plumbed to the hydraulic return line and has a pressure gauge, a small solenoid valve, and two adjustable relief valve cartridges. It is also plumbed to the cushion (T2) ports of the knee manifold blocks. The relief cartridge closest to the small solenoid is the part-time cushion relief, and usually will be physically located above the full-time valve. Note: There are two different manifolds pictured below.\n<img src=\"./app/img/pressureGuage.PNG\" className=\"pdfHelpImg\"></img>\n<ol>\n<li>Adjusting the cushion valves requires that the knee runaway software is disabled. In the Positioner Movement Setup Screen,\n(Main Menu / Setup Options / Startup Options / Positioner Movement Setup)\n<b>Note</b> the current runaway distances and then enter a value of 60 in both the in-the-cut Runaway Error and out-of the-cut Runaway Error.</li>\n<li>Put the dogs down and jog to the forward limit.</li>\n<li>Hold down the limit override push button and press a forward individual knee taper button until a knee comes forward into a mechanical stop.</li>\n<li>Loosen the lock nut on the Full-Time relief valve.</li>\n<li>With the buttons still depressed, turn the valve adjustment at the carriage counterclockwise until the relief pressure gauge dips.</li>\n<li>Turn the relief adjustment clockwise slowly until the gauge stops showing a pressure increase then release the buttons.</li>\n<li>Lock the adjustment down. The full time relief is now properly adjusted. The relief gauge and system pressure gauge should show about the same pressure.</li>\n<li>Press and hold the limit override button and use the individual knee taper button to bring the knees back within travel limits.</li>\n<li>Press Cancel Taper and the jog buttons to position the knees at mid-stroke. Raise the dogs.</li>\n<li>At the cushion block, adjust the soft cushion relief valve counter clockwise until it relieves (gauge pressure dips, hissing noise, etc.).</li>\n<li>Turn it clockwise until relieving stops.</li>\n<li>Note the position and turn it clockwise two complete revolutions and lock it down.</li>\n</ol>\nIf the sawyer feels it is to easy to push the knees around when loading and turning, raise the relief pressure by turning the upper relief adjustment clockwise one half revolution at a time until he can load and turn comfortably.\n</div>"},{"name":"Section Three","idNum":"000006","type":"section","section":"Section III","content":"<div>\n<b>SECTION III</b>\n\n<b>A. Scanning</b>\n<b>A-1. Shape Scan systems</b>\nOne of the key features of the Lewis Controls system is the 3D Laser Scanner.\n<b>WARNING: Laser radiation from the scan heads can be damaging to the eye. Never look directly into the scan heads when the lasers are on. Use caution when working on the carriage. The red lasers are visible to the eye. It is recommended that the lasers be turned off whenever someone is working on the carriage. Note the following:</b>\n1. A warning light, mounted near the laser heads will be on when the lasers are active.\n<ol>\n<b>\n<li>There are two laser remote shut off switches. One will be mounted near the operator inside the cab. The other will be near the carriage track access point. Pushing down on either of the mushroom switches will turn the lasers off. Pulling up on either switch will re-enable the lasers.</li>\n<li>Turning off the control power on the sawyers console will disable the lasers until it is turned back on.</li>\n<li>When the lasers are turned on, there is a 10 second delay before the lasers become active.</li>\n</b>\n</ol>\nThe scanning system consists of a series of two or more scan heads mounted on a beam that is positioned over the infeed deck. Each scan head has two cameras (one on each end) and four lasers (spaced 12 inches apart) in the middle. The scan heads project vertical laser lines onto the log on the carriage. Within each head, the two cameras look at the lines created by the four lasers and gather information about the shape of the log. That information is then sent to the computer.\nThe process of profiling the log consists of scanning the log multiple times as the carriage moves towards the saw. When the log is first scanned, cross section data is only collected every 12 inches along the log. Because of the multiple scans, additional log data is collected and refined until cross section data is present for each inch along the length of the log, producing a more accurate picture of the log.\nThe computer receives the scanner information and uses it to create a three dimensional model of the log that includes the logâ€™s shape, length and diameters. It then analyzes the model; sets opening faces, places cants and keeps track of wood available as the sawyer removes boards. The scanner is only used on unopened faces, with the computer keeping track of the remaining wood as additional passes are made. See section 5 for information about the actual sequence of cutting up a log.\n</div>\n<div>\n<b>A-2. Photocell systems</b>\nA optional photocell scanning system may be provided by Lewis Controls. This scanner consists of a series of photo-electric cells, with the transmitters on the bottom and the receivers on top. These photocell pairs are spaced on approximate 6'' intervals and enclosed in a protective housing placed in a reasonably clear area alongside the carriage flat rail. Properly installed, the scanner should run from as close to the saw as practical and past the far lumber line on the other end. Ideally, the scan line will be placed 1'' on the carriage side of the saw line. This gap on most scans allows you to achieve maximum knee speed through most of the set, pulls slack out of the dogs and results in a forward set motion all the way to the saw line.\nThe scanners primary job is to provide log edge definition, length and diameter information to the system computer which in turn develops a model of the log. The computer then analyzes the model, setting opening faces, placing cants and keeping track of wood available as the sawyer removes boards. The scanner is only used on unopened faces. See section 5 for information about the actual sequence of cutting up a log..\nThe Lewis Photocell System scans as the log moves in either the forward or reverse direction, depending on where the log is positioned when the sawyer initiates a scan by pressing ''set'' or ''compute.'' It will also scan and set as the sawyer is moving the carriage toward the saw or slabber (scanning on the fly.)\n\n<b>Scan Forward:</b> Rough log length is measured as the log rolls out of the stop and loader and across the scanner. If the sawyer sets the dogs with the scan bar unblocked, the system begins a forward scan. (See Diagram) The sequence is as follows:\n<ol type=\"a\">\n<li>Rough length is measured as the log rolls across the scanner</li>\n<li>Log is dogged</li>\n<li>Sawyer presses \"set\" or \"compute\" and starts carriage moving toward the saw</li>\n<li>Knees advance in unison toward the saw line</li>\n<li>Log edge crosses the scan line</li>\n<li>Rough length data is updated to better reflect actual log length</li>\n<li>Computer develops log model and calculates solution</li>\n<li>Knees taper the log into the proper position and set for depth of first cut in one motion.</li>\n</ol>\n<b>Scan Reverse:</b> Rough log length is measured as the log rolls out of the stop and loader and across the scanner. If the sawyer sets the dogs with the scanner blocked, the system begins a reverse scan. (See Diagram) The sequence is as follows:\n<ol type=\"a\">\n<li>Rough length is measured as the log rolls across the scanner</li>\n<li>Log is dogged</li>\n<li>Sawyer presses \"set\" or \"compute\" and starts carriage moving to saw</li>\n<li>Knees retract in unison away from the saw line</li>\n<li>Log edge crosses the scan line in reverse</li>\n<li>Rough length data is updated to better reflect actual log length</li>\n<li>Reverse knee movement stops and knees start forward</li>\n<li>Computer develops log model and calculates solution</li>\n<li>Knees taper the log forward into the proper position and set for depth of first cut in one motion</li>\n</ol>\n<b>NOTE: Whenever possible, avoid loading a log to be scanned partly over the scanner. The scan and set will be longer because of the amount of knee movement needed to gather edge data.</b>\n<h3>Scan FORWARD</h3>\n<img src=\"./app/img/scanForward.PNG\" className=\"pdfHelpImg\"></img>\n\n<h3>Scan REVERSE</h3>\n<img src=\"./app/img/scanReverse.PNG\" className=\"pdfHelpImg\"></img>\n</div>\n<div>\n<b>A-3. Scan Set Disable:</b> The Lewis System can be programmed to disable sets as the log approaches the saw or is in the saw. This feature can be turned on or off and adjusted from the system parameters (Main Menu / Setup Options / Scanner Setup / Scanner Options)\nThrough these menus we establish a point in front of the saw guide where the setworks are disabled as the log nears the saw. Working in combination with a similar point ''behind the front'' of the saw guide defines an area or ''dead zone'' around the saw where the knees are inhibited as the pieces are cut from the log.\nThe rough length of the log is initially measured when a log is viewed by the scanner. Length information is continually refined and corrected as the log is sawn.\nAll setworks motion will stop when the combined inputs from the encoder and the scanner conclude that part of the log is present in the defined ''dead zone.''\n<b>WARNING: Though normally quite reliable, the Scan Set Disable feature is not 100% fail-safe. It is intended primarily to save saws and not to ensure personal safety of people in the area. Broken or severely tapered log ends may not be \"seen\" reliably by the scanner, which in turn can show a false reading for predicted log end. A slipping encoder, loose drive cables, or photocells (if your system is equipped with photocells) covered by debris may also create false information.</b>\n<b><u>Nothing can take the place of a sawyer that stays in control of his machine at all times and makes safety a high priority.</u></b>\n</div>\n<div>\n<b>B. Solution Options</b>\nThe Lewis Controls Scanning Setworks system is a flexible tool. The hydraulic, electronic and software package has been designed to suit a wide variety of sawmill applications. As we go further in this manual we will discuss ways to access and modify the working system parameters from either the sawyers console or the computer menus.\nThe basic software package provided to each mill uses the Lewis Controls Cant Matrix system to break a log down. Optionally, we can activate a form of dollar driven software or a â€œpatternâ€ by diameter method of operation. The Cant Matrix system computes a solution to two basic questions: what cants and boards are in the log, and what depth of face should be opened.\n</div>\n<div>\n<b>B-1. Cant Matrix:</b> Selected from Parameters: Main Menu / Lumber Options / Cant Face Width Table\nThe Cant Matrix system will choose one cant per log, filling in side lumber from the board list. The selections are based largely on two tables in the Lumber Options Menu, the Board and Cant Sizes Setup table and the Cant Face Width table. In addition, these tables work in conjunction with the Fill Mask (selected by the sawyer on the console) which tells the system which Cants and Boards are allowed for that Species.\nIn the Board and Cant Sizes Setup, cants are defined by width (size) and given a numerical priority order. In the Cant Face Width table, all the cants with a width defined in Board and Cant Sizes Setup are listed by length and given either a minimum face width or an â€œIgnoreâ€ label. If the label is set to ignore, the system will not consider a cant of that length. If a face width is set, the face will be made full length on the cant.\n</div>\n<div>\n<b>B-2. Opening Faces:</b> The system will determine the opening face of a log based on many parameters. Generally, if you feel the slabs at times are too heavy, some software settings may be adjusted to compensate.\n<b>Computed Solution:</b> If you are sawing in Cant Matrix mode (as mentioned above), then opening faces are often determined by the size of face requested for each board and cant. For example, if the opening face is a cant face, then the face for that cant will be made at least as wide as requested for the entire length of the cant.\nIn the Species Setup screen, the Maximum Cant Face Difference parameter will also have an effect on opening faces. The more restrictive this parameter is set the more likely it is to cause slabs to be heavy. Cant Face restrictions may make it unable to pick up extra side boards.\n<b>Set Button Solution:</b> When a face is opened by pressing the set button, the Lewis scanning system calculates the face line using the following rules:\n<ol>\n<li>Test for ''grade face'' button on. If yes, use ''grade face'' parameters.</li>\n<li>Test log diameter against the automatic grade face parameter. If equal to or greater than the parameter, use ''grade face'' parameters. If not, use â€œMinimum Opening Faceâ€ parameters.</li>\n<li>Calculate the face opening line in accordance with the above parameters.</li>\n<li>Test for additional lumber lengths by using trade-off depth entered by the mill.</li>\n<li>With the final face line calculated, test to see if any common boards can be made from the slab wood.</li>\n</ol>\nWe define common boards as the active fill mask boards in that axis of that\nspecies.\nWe will open the log to recover any common boards that can be made without\nmoving the face line as placed by rules 1-5.\n<img src=\"./app/img/commonBoard.PNG\" className=\"pdfHelpImg\"></img>\n</div>"},{"name":"Section Five","idNum":"001005","type":"section","section":"Section V","content":"<div>\n<b>SECTION V. SYSTEM OVERVIEW AND SAWYERS CONSOLE</b>\nReliable system design, proper maintenance tools and accurate drawing packages, are all important part of your system. The final item left to enable mill personnel to effectively maintain the system is providing the information needed to understand the system, the subsystems and their interfaces.\n<b>A. Systems and subsystems interface</b>\nA block diagram illustrating the various subsystems is included in this section to assist in visualizing the interfaces. The heart of the system is the Windows based computer. It operates with real-time extensions, runs the cutting program software, watches all the sub-systems that provide input information, processes the information, sends instructions to subsystems, and provides the Windows user interface.\n<img src=\"./app/img/subSystem.PNG\" className=\"pdfHelpImg\"></img>\n</div>\n<div>\n<b>A-1. Windows User Interface</b>\nThe computer is used to view and change system parameters and mill specific information using the familiar Windows environment. It also is used for real-time troubleshooting, and to maintain tally databases (if any). The standard PC keyboard, monitor and mouse (or mouse equivalent) are used along with a touch screen for simplified navigation among menus.\n\n<b>A-2. Sawyer Display subsystem interface</b>\nThe sawyer display is a standard VGA display, usually LCD (flat panel) type, operating as the 2nd display in a 2-display windows system. It normally displays log and scanner data for the sawyer, but may also be used to display any information that is available to the system. This is especially useful during troubleshooting, when other real-time data may be useful.\n\n<b>A-3. Carriage positioning detection switches</b>\nThere are generally three switches used for carriage position detection functions. They are limit switches and proximity switches. Closing the switch mechanically or electronically completes a circuit, allowing current to flow through the system. The system can read no current (open) as well as current (closed) to determine the status of a switch.\n</div><div>\n<b>A-4. The Scanner subsystem interface</b>\nThe laser scanner gathers data by determining the distance of the lasers as they shine on the log. This data is sent directly to the PC via fiber optic cables. As the log moves, the lasers will gather log data at one-inch intervals. <b>WARNING: Laser radiation from the scan heads can be damaging to the eye. Never look directly into the scan heads when the lasers are on. Use caution when working on the carriage. The red lasers are visible to the eye. It is recommended that the lasers be turned off whenever someone is working on the carriage.</b>\n\n<b>A-5. The Sawyer Console interface</b>\nThe sawyer console interface is a combination of digital inputs and outputs. The input interface is located in the console, along with the lamp output interface circuitry. The subsystem in the console is connected to the computer using a high-speed serial connection. The sawyer console switches may be interfaced to the PLC by using preprogrammed spare inputs and outputs, using the existing serial interface and thus avoiding the use of extra wires between the console and the computer. In the rare event that a direct connection is required, note that the PLC is operated as a low-true logic system. As such, it expects to see 0 V input through the switch contacts to cause a response.\n</div>\n<div>\n<b>A-6. The Computer to PLC interface</b>\nThe Programmable Logic Controller (PLC) subsystem interface is a digital output interface from the PC computer. An example of our digital output circuit is provided for ease of understanding. The circuit and interface works as follows:\n<ul>\n<li>The computer instructs the digital I/O terminator board to output a specific bit.</li>\n<li>The instruction is carried to the board via ribbon cable</li>\n<li>The output LED then lights (it would always be lit if the output wire was shorted to ground)</li>\n<li>The digital I/O terminator board outputs the bit at zero volts (true)</li>\n<li>The zero volt output is fed through the wire to the PLC causing the PLC to recognize and react to the output.</li>\n</ul>\n<b>A-7. Shaft encoder interface</b>\nLCI uses a quadrature type of encoder that provides two square wave signals to the computer. By looking at the phasing of these signals the shaft encoder interface board can tell which direction the encoder is turning. The counter on the interface board then counts up or down to track carriage travel. The encoder requires +5 to +15V and DC ground to operate. The encoder cable terminates on the Shaft Encoder Input Terminator on the back panel, where the signal is converted to a ribbon cable attachment. The ribbon cable feeds directly to the PC.\n</div>\n<div>\n<b>A-8. Linear Positioner interface</b>\nThis interface consists of hydraulic cylinders, each normally bored for a Temposonic position sensor, with the sensor, hydraulic valve and manifold, and the associated cables needed to connect to the setworks control system. The basics of the closed loop linear positioner system are:\n<ul>\n<li>The computer decides to change the cylinder rod position. It sets the analog drive voltage to reposition it in or out. This sign of the voltage determines the direction; the magnitude of the voltage controls the amount of opening (velocity, when the rod is free to move).</li>\n<li>The computer continuously obtains rod position information from the Temposonic interface. The computer compares the current position with the desired position and updates the control voltage to the valve as required to bring the positioner to the desired final position.</li> To complete the interface these things must be working properly.\n<li>The positioner power supplies (+ 15V)</li>\n<li>The valve power supply (+ 24V)</li>\n<li>The cylinder control valve</li>\n<li>The Temposonic probe</li>\n<li>The valve control cabling</li>\n<li>The Temposonic cabling</li>\n<li>The hydraulic power system</li>\n<li>The PLC (to open the HSV (hydraulic safety valve))</li>\n</ul>\n</div>\n<div>\n<b>A-9. The Programmable Logic Controller</b>\nThe PLC interface to the outside world is a 115VAC interface. It is used to drive solenoids, motor starters, etc. in accordance with inputs from the computer or directly from switch inputs. A PLC circuit can generally be looked at in the same way as a relay with a DC solenoid and AC contacts. If the computer wants to send the dogs to the up position, it sends a DC signal (zero Volts) to the PLC. The PLC in turn energizes the Dogs Up outputs that connect 115VAC through a fuse to one side of the dogs up solenoids. The other side of the dogs up solenoids is connected to the neutral line of that AC circuit. In some cases, more than one input is needed to cause an output. Those circuits can be considered as relay contacts in series, with the last set of contacts connected to the output.\n</div>\n<div>\n<b>B. Faces and Axes</b>\nTo fully understand the way the system operates, we need to define some terms. A <b>face</b> is an open or unopened surface of the log that would be presented to the head saw. In our terminology, the first face on a new log is called <b>1F</b>, or <b>1 Front</b>. If the sawyer opens the log and makes a 180 degree turn, he would then be sawing <b>1B</b>, or <b>1 Back</b>. At this point, the log is open on two opposite faces. The next face opened, whether he turns the log one quarter turn down or three quarter turns, becomes <b>2F</b>, or <b>2 Front</b>. The final face becomes <b>2B</b> or <b>2 Back</b>. You may have noticed the log has been divided into two parts or axes. The first axis consists of sawlines running from 1F through 1B and the second axis consists of sawlines running from 2F through 2B. In a simple cant sawing operation axis 1 will contain a dimension width cant, 6\", 8\", etc. Axis 1 generally will also have one or more side boards to utilize the wood not needed for the cant. Axis 2 breakdown would normally consist of board thicknesses. The controls would be set up to make board thicknesses, 1\", 2\", etc. The boards may be computed as headrig sawlines, packages of boards for a resaw, or as cants for a gang.\n<center><b>Axis Memories</b></center>\n<img src=\"./app/img/axisMemory.PNG\" className=\"pdfHelpImg\"></img>\n\nThe normal face sequence is set up by the mill through the windows interface using the <b>Auto Face</b> selection in the Setup Options / Runtime Options / Opening Face Parameters submenu. As long as the sawyer turns logs as anticipated the system will remain on the proper axis and face. If the sawyer turns a log differently, he must tell the computer what he has done.\n\nFor Example: Mill normally turns 180 degrees from 1 front\n<ul>\n<li>Auto Face sequence is 1F, 1B, 2F, 2B</li>\n<li>On a large log the sawyer decides to turn 90 degrees down instead of 180 degrees</li>\n<li>Before scanning on the second face, he must press the 2F button on the console</li>\n<li>In most instances the sawyer knows ahead of time that he will need to override the auto face selection and can preset the next face (in this case 2F) as he is moving the carriage back to turn the log.</li>\n</ul>\n<b>Note</b> that if an unsawn side of the log is against the knees, the side toward the saw line is always a front face (either 1F or 2F). Conversely, if a sawn side of the log is against the knees, the side toward the saw is always a back face (1B or 2B). If a sawyer goes back to an axis for the 5th or 6th side sawing, he would alternate between 1B and 2B, never returning to a front face.\n<img src=\"./app/img/consoleImg.PNG\" className=\"pdfHelpImg\"></img>\n</div>\n<div>\n<b>C. Button Light Description</b>\nThe sawyers console is designed only after mill personnel are able to give their input on the selection and placement of buttons. Therefore every console is unique to the installation. The actual buttons and their placement will vary. However, the buttons on the console are arranged in logical groups. The actual placement and orientation of those groups depends in part on mill preference.\n<img src=\"./app/img/consoleImgTwo.PNG\" className=\"pdfHelpImg\"></img>\n\n</div>\n<div>\n<b>C-1. Group 1:</b> Control Power, Setworks Lock Out, Set Enable, Scan Set Disable, Hydraulic Pressure, Hydraulics Enabled, Set Achieved, Stack Computed, Knees Tapered, Console Status lights, Saw Deviation.\n<ol type=\"a\">\n<li><b>Control Power:</b> Mushroom Maintain - This large red switch serves as an emergency stop. Pushing down on the mushroom will remove all power from the carriage, cause the hydraulics to shut down, stop the knees from moving and cause the sawyers console to turn off. <b>Note: Because single solenoids re frequently used on carriages, when power is shut off to the carriage, board dogs may come down and other mechanical parts on the carriage may move - <u>use caution</u></b></li>\n<li><b>Setworks Lock Out:</b> Key Switch - This locking switch enables or disables setworks operation by supplying or removing A.C. voltage from the solenoids driven by the PLC. This switch should be in the Lock Out position whenever the sawyer leaves his seat, or when anyone is on or around the carriage. <b>WARNING: This switch does not constitute an official OSHA Lock out !!! Mill established lockout procedures should always be followed.</b></li>\n<li><b>Set Enable - Indicator Light:</b> Whenever the carriage is at either end of the track and the carriage frame blocks one of the set enable (proximity) switches, the light will be on and the computer will be able make sets, jog the knees, etc.</li>\n<li><b>Scan Set Disable - Indicator Light:</b> This light will come on whenever the system thinks that the log is close to or in the saw. Note: In some cases, it may be possible to have the log in the saw while one of the set enable switches is still blocked (and the Set Enable light still on). In this case, the system will still stop the sawyer from making any sets or jogging the knees.</li>\n<li><b>Hydraulic Pressure - Indicator Light:</b> The input for this light comes from a pressure switch located after the safety valve (but before the knees) in the hydraulic circuit. When the light is on, it indicates that there is oil pressure at the knees.</li>\n<li><b>Hydraulics Enabled - Indicator Light:</b> This light will be on when the system opens the Hydraulic Safety Valve allowing oil to flow to the carriage. If the system shuts down the hydraulics for any reason, this light will be off.</li>\n<li><b>Set Achieved - Indicator Light:</b> This light is on when the knees and slabber have moved to the commanded set position</li>\n<li><b>Stack Computed - Indicator Light:</b> This light is on whenever the sawyer has computed a stack for an axis.</li>\n<li><b>Knees Tapered - Indicator Light:</b> This is illuminated whenever the knees are in a tapered position relative to the saw line.</li>\n<li><b>Console Status - Indicator Lights:</b> A series of 5 small LEDs are located next to the system status lights. These lights: +5, +24, Rx, Tx, and Run are diagnostic lights for the console. Under normal conditions, all these lights will be on. Rx and Tx may appear to be dimmer than the other lights.</li>\n<li><b>Saw Deviation - Indicator Lights:</b> On systems with the saw deviation option, these lights indicate when the saw has exceeded the limits set in the system software. The warning light will come on when the lower limit has been exceeded and the hazard light will light when the upper limit has been exceeded.</li>\n</ol>\n<img src=\"./app/img/consoleImgThree.PNG\" className=\"pdfHelpImg\"></img>\n\n</div>\n<div>\n<b>C-2. Group 2:</b> Saw Guide Auto, Saw Guide Up/Down, Slabber Auto, Slabber Sets, Slabber Retract, Slab Attach, Individual Knee Controls, Cancel Taper, Limit Override, Skew Left, Skew Right.\n<ol type=\"a\">\n<li><b>Saw Guide Auto Lighted Pushbutton:</b> The Saw Guide Auto feature allows the system to automatically position the saw guide for the sawyer based on the scanned diameter of the log. If the guide is too high or too low, the sawyer may override the system by using the Saw Guide Up/Down switch located on the side of the sawyers console. If Saw Guide Auto is on, once the guide position has been overridden, the guide will stay in position until a new face has been scanned at which point it will be automatically repositioned. If Saw Guide Auto is turned off, the sawyer will be responsible for positioning the guide.</li>\n<li><b>Slabber Auto Lighted Pushbutton:</b> With the Slabber Auto button on, the slabber will automatically set to the thickness of the board being taken by the slabber. Turning it off will force the sawyer to manually select slabber sets. The sawyer can override a set without taking the system out of automatic simply by pushing one of the slabber set buttons. When the slabber pass is completed, the system will return to the automatic mode of operation.</li>\n<li><b>Slabber Sets Lighted Pushbuttons:</b> The slabber set buttons, marked 0 - 5 allow the sawyer to force the slabber to a predetermined position. Pushing button 0 will cause the slabber to be moved to a position even with the sawline. The values for buttons 1-5 will be the first 5 board sets in the Board and Cant Sizes Setup parameters. (Main Menu / Lumber Options / Board and Cant Sizes Setup). If the slabber is in auto, the set lights will come on when the slabber set matches the size for that button.</li>\n<li><b>Slabber Retract Lighted Pushbutton:</b> Pushing the Slabber retract button will cause the slabber to go to the slabber retract position as defined in the system parameters. Pushing it a second time will cause the slabber to go to its reverse limit.</li>\n<li><b>Slab Attach Lighted Pushbutton:</b> The state of this button determines how the opening face boards will be cut. If Slab Attach is on, the knees will position the log so that the saw cuts the slab and the first board on the first pass. If it is off, the log will be positioned so that the slab is cut off first and then the board will be cut on the next pass. For systems with a slabber, the Slab Attach button will normally be on.</li>\n<li><b>Individual Knee Control - Momentary Pushbuttons:</b> Each knee control group consists of three buttons: Disable, Jog forward and Jog Reverse. The disable button is used to temporarily take a knee out of service. A knee is disabled by jogging it knee back until it hits the reverse limit and pressing the disable button. Depending on the null of the hydraulic valve, disabled knees may drift towards the saw line. <b>To prevent disabled knees from drifting forward, close the ball valve on the hydraulic pressure line for that knee or chain the knee so it cannot move forward</b>. The Disable button is red and is labeled with a ''D'' and the knee number (for example, the button to disable knee 2 reads D ). When a knee is disabled, the button will light. The individual knee taper buttons are labeled with an arrow that indicates the direction to move the knee. The taper buttons may be used to move an individual knee to help it conform to the shape of a log. When the taper buttons are lit, that indicates that the computer thinks the knees are tapered. If the taper buttons are flashing, the system has detected a drive runaway condition. (See limit override)</li>\n<li><b>Cancel Taper - Momentary Pushbutton:</b> This button, when pressed, forces all taper out of the knees. It is done in two stages. If you press it once, all skew taper is removed from the knees but any individual knee taper is kept. If you press it a second time, all individual knee taper is canceled.</li>\n<li><b>Limit Override - Lighted Pushbutton:</b> This switch, when pressed, will allow the sawyer to move positioners beyond the normal setworks limits or bring them back within limits. It must be held down until the drives have reached the desired position. If a positioner drifts beyond a limit, the sawyer must hold the Limit Override button down while using the jog button to move the knee to a position within limits. Instances where Limit Override is used include: moving a knee or knees when the set disable lamp is on, moving a knee that, when disabled, had drifted out of limits due to servo null, or when a drive runaway error has been experienced. <b>WARNING: Use this switch carefully, especially in correcting drive runaways, or moving knees in the saw zone. Limits are set in the system parameters to assist the sawyer in operating the machine safely. <i>THIS PUSHBUTTON OVERRIDES THOSE LIMITS</i>.</b></li>\n<li><b>Skew Left, Skew Right - Momentary Pushbuttons:</b> These buttons allow the sawyer to manually skew (pivot) the knees about the middle of the carriage. Under normal conditions, the computer does the skew function automatically.</li>\n</ol>\n<img src=\"./app/img/consoleImgFour.PNG\" className=\"pdfHelpImg\"></img>\n</div>\n<div>\n<b>C-3. Group 3:</b> Scanner On, Taper (Auto, Full, Half, None), Calibrate, Down Time\n<ol type=\"a\">\n<li><b>Scanner on - Lighted Pushbutton:</b> This button illuminates when the scanner is active for a particular face. Like taper, it must be selected for each species and face by pressing the Face button and pressing the Scan On button. If it is not selected for a face, the system will not scan on that face. WARNING: If \"scan on\" is not selected for a face, the software set disable feature (which tracks when the log is in the saw) will not be active on that face.</li>\n<li><b>Taper (Auto, Full, Half, None) - Lighted Pushbuttons:</b> These buttons are used to tell the computer the desired taper orientation to use in calculating opening faces and computing runs on unopened faces. Taper rates may be setup either automatically or manually. Auto Taper will select a taper rate based on overall log taper. These taper rates are set up in using the Auto Taper Rates screen. (Main Menu / Setup Options / Scanner Setup / Auto Taper Rates) See Section 4 B-3.c.3 for more information. Full taper is sawn parallel to the bark of a log. Half taper is sawn parallel to the centerline of a log. Selecting No taper (none) causes the knees to be aligned parallel to the saw. See diagrams below.</li>\n<center><h3>Full Taper Solution</h3></center>\n<img src=\"./app/img/taperSolution.PNG\" className=\"pdfHelpImg\"></img>\n<center><h3>Half Taper Solution</h3></center>\n<img src=\"./app/img/taperHalfSolution.PNG\" className=\"pdfHelpImg\"></img>\n<center><h3>Zero Taper Solution</h3></center>\n<img src=\"./app/img/zeroTaperSolution.PNG\" className=\"pdfHelpImg\"></img>\n\n<li><b>Scan Calibrate - Lighted Pushbutton:</b> Pushing this button will initiate the scanner calibration procedure. See section I below for a detailed procedure.</li>\n<li><b>Downtime - Lighted Pushbutton:</b> If the carriage has been inactive for a specified time (set up in parameter menu), downtime will begin accumulating. To tally this downtime to a defined reason the sawyer must follow these steps:</li> First press the downtime button. This can be done at any time, even before the computer senses a down condition. This will light the set buttons.\n</ol>\nEach set button is numbered starting with number one for the top left set button and has a corresponding downtime reason. When a set button is pressed the corresponding downtime category appears on the sawyerâ€™s display. This will cause downtime to be counted for that reason. The set lamps will go out and the downtime button will blink. Downtime will continue to accumulate until the downtime button is pressed again. This allows the sawyer to continue to saw while a piece of downstream equipment such as a resaw is down. Downtime reasons are specified in the Main Menu / View/Report Options / Downtime Summary\n<img src=\"./app/img/consoleImgFive.PNG\" className=\"pdfHelpImg\"></img>\n</div>\n<div>\n<b>C-4. Group 4:</b> Species, Bark On, Grade Face, Package Modes (Single, Package, Resaw), Face 1F - 1B - 2F - 2B, Patterns, Boards, Cants, Multiples, Fill Mask, Default Set, Cancel Entries.\n<ol type=\"a\">\n<li><b>Species - Lighted Pushbuttons:</b> Each species button calls up a separate set of operating parameters including lumber sizes, cant priorities, prices (if used), turn sequences, fill mask and scan and taper settings. A mill can use the species buttons to actually saw different species, or they can use them to saw different products out of various sizes or grades of logs. See section D below for more information</li>\n<li><b>Bark On “ Lighted Pushbutton:</b> Occasionally, when there is an equipment failure, logs will still have bark on them when they are brought to the carriage. Turning this button on will cause the system to compensate for the extra bark on the outside of the log by taking larger faces. The thickness of the bark is set up in the scanner options. (Main Menu / Setup Options / Scanner Setup / Scanner Options).</li>\n<li><b>Grade Face - Lighted Pushbutton:</b> When active (lit) and the sawyer opens a face on 'set' rather then 'compute,' this button tells the system to use an alternative minimum opening face width defined in the parameter menu as 'Grade Face.' Grade Face can be selected manually by the sawyer or can come on automatically when the scanner detects a log that exceeds the diameter set for 'Auto Grade Face.'</li>\n<li><b>Package Modes (Single, Package, Resaw) - Lighted Pushbutton:</b> These three buttons determine how boards will be cut off the outside of the log. Single Mode allows only single boards to be cut from the log. Package Mode allows boards of the same thickness to be cut as multiples and be sent to resaw. Resaw mode allows the sawyer to cut any combination of multiples. These boards are not necessarily made up of boards of the same thickness. See section 4 B-3.b for more detailed information.</li>\n<li><b>Face (1F, 1B ,2F, 2B, Reset) Lighted Pushbutton:</b> 1F, 1B, 2F and 2B tell the sawyer which face the computer believes it is sawing. During normal operation, these buttons switch and light up in a pre-programmed autoface sequence. If the sawyer turns a log in a manner that is not consistent with his normal turn sequence, he must press the correct face button before continuing. This allows the computer to keep track of the wood remaining on each axis. The face buttons are also used to set up which faces are automatically scanned and what the fill mask contains for each axis. Under some conditions, it is desirable to rescan the log after the initial scan has been completed. Pushing the Reset button after selecting the face will cause the system to rescan when the set or compute button is pressed.</li>\n<li><b>Patterns (1,2,3,4,5) - Lighted Pushbuttons:</b> Patterns are an optional feature not found on all systems. In the parameter entries there is a table that allows the mill to define a series of sets and kerfs in sequence, by species. These sequences are then assigned to one of the five pattern buttons. Boards defined in the pattern set up do not have to be included in the fill mask. Whenever the sawyer needs to call in one of these sequences he presses the appropriate pattern button. Typical applications for patterns include mills that cut vertical grain free of heart products on their large logs, or mills that have a fairly consistent depth of shop lumber just inside the sapwood portion of their higher quality logs. In these cases the mills can call in patterns and cut their specialty products without having the specialty products active in their fill mask. When using cant matrix patterns, patterns can be used as cants by selecting them in the fill mask.</li>\n<li><b>Boards - Lighted Pushbuttons:</b> The 'board' buttons represent individual board thicknesses. They can be used singly as part of a manually entered stack. As with cants, the number of board buttons and their labels are defined prior to system delivery.</li>\n<li><b>Cants - Lighted Pushbuttons:</b> The 'cant' buttons call up a cant set, either as an individual entry, or as a part of a manually entered stack. The system honors the sawyer input. It will put whatever cant the sawyer calls for in the solution without regard to minimum face requirements. Cants widths are defined in the parameter entry tables. Normally, a mill will define cant widths for use in the first axis (1F, 1B) such as 4'' and 6''. The number of cant buttons and their label requirements are defined during the order engineering process.</li>\n<li><b>Multiples - Lighted Pushbuttons:</b> These buttons are not present in all systems. They are used by the sawyer to force a package with two or more like boards, separated by resaw kerf. The sawyer can use the 2x, 3x, and 4x buttons in single mode or he can use them to override a computer selected multiple in package mode.</li>\n<li><b>Fill Mask - Lighted Pushbutton:</b> The fill mask determines what products will\nbe automatically selected when the sawyer presses the compute button to fill out\nthe log. These products are defined by axis (1 or 2) and must be setup for each\nspecies. See Section F Below for more information.</li>\n<li><b>Default Set - Lighted Pushbutton:</b> This push button allows the sawyer to choose his 'default' board. The default board is the piece thickness that the system will set to if Set is pushed on a non-computed face and no board buttons are lit. When the default set button is pressed once, it will blink and the current default board size button will light. To change to a different default board simply press the desired button. That button will light and the previous size will go out. When the desired default board is lit, press the default set button again to turn it off. Note that each species normally has its own default set.</li>\n<li><b>Cancel Entries - Momentary Pushbutton:</b> This switch is used to back out size button pushes the sawyer has made. If the sawyer was entering in a stack to be sawn on a computed run and hit the wrong button, he would press cancel entries button once to remove that piece from the stack. Pressing it a second time removes all entries from the stack.</li>\n</ol>\n\n<img src=\"./app/img/handleAndFootSwitch.PNG\" className=\"pdfHelpImg\"></img>\n</div>\n<div>\n<b>C-5. Groups Sawyers Handles and Foot Switches:</b> Backset, Jog Reverse, Jog Forward, Set, Compute, Dogs Up/Dn, Dogs In/Out, Other handle functions, Log Loader, Other Foot Switches. The buttons on the sawyers handles are fairly standard. Button position on the handle, and even which handle a particular button is on, is strictly a matter of mill preference\n<ol type=\"a\">\n<li><b>Backset - Momentary Pushbutton:</b> Pressing Backset will cause the knees to back off the current active set (computed, selected from console, or default board) from the last sawline.</li>\n<b>WARNING:</b> If the sawyer has jogged the knees forward or reverse after the last set was achieved, Backset will still back off the current set from the last sawline. If the sawyer has jogged reverse the knees may actually move forward on the Backset command.\n<li><b>Jog Reverse Momentary Pushbutton:</b> The sawyer uses this button to physically position or reposition the knees in the reverse direction. All knees jog in unison.</li>\n<li><b>Jog Forward Momentary Pushbutton:</b> The sawyer uses this button to physically position or reposition the knees in a forward direction. All knees jog in unison.</li>\n<li><b>Set - Momentary Pushbutton:</b> The sawyer uses this button to either initiate a minimum opening face scan without a computed solution or to set for the next board. See Section E below for more information</li>\n<li><b>Compute - Momentary pushbutton:</b> The sawyer uses the compute button to compute a stack. It could be to open a new face to a computed solution, or to have the system calculate a computed run to finish a log after grade has been removed. Once on a computed run for a face, the compute button acts like the set button. See section E below for more information.</li>\n<li><b>Dogs Up/Dn, Dogs In/Out - Momentary pushbuttons:</b> These buttons are used\nto raise and lower the dogs as well as move them in and out.</li>\n<li><b>Other handle functions “ Momentary pushbuttons:</b> Cant Kickers, Cant Flippers, Brownsville Turners are examples of various functions frequently found on the sawyers handles.</li>\n<li><b>Log Loader “ Foot Switch:</b> The log loader serves two purposes; to load the log onto the carriage and to signal the computer that a new log is being loaded.\nh. Other Foot Switches may be present using spare outputs configured with your system. These may include such things gates or tipples for lumber handling.</li>\n</ol>\n</div>\n<div>\n<b>D. Species</b>\nMultiple species capability is included as part of the Lewis system. By pressing a different species button a sawyer can call in an entirely different set of sawing rules including different:\n<ul>\n<li>set size values</li>\n<li>board or cant selections by axis in the fill masks</li>\n<li>sawing modes, (single, resaw by axis)</li>\n<li>solution type, (cant matrix)</li>\n<li>auto face sequences</li>\n<li>scanning rules</li>\n</ul>\nTypical examples of how species can be used effectively would include mills that actually bring in mixed species logs during a shift, or cutting separate products out of each species.\n</div>\n<div>\n<b>E. Set and Compute</b>\nOn the sawyers handles you will find two buttons, ''set'' and ''compute.'' Both will initiate system actions. When to set and when to compute should be fully understood by the sawyer. The following is a chart that outlines the system responses for set and compute actions.\n\n<table>\n<tr>\n<th>CONDITION</th>\n<th>ACTION</th> \n<th>SYSTEM RESPONSE</th>\n</tr>\n<tr>\n<td>Unopened Face</td>\n<td>Press Set</td>\n<td>System will scan and set to a minimum opening\nface. <b>Note:</b> MOF may be altered with user\nparameters and may actually be longer or wider\nthan anticipated, if certain features such as\n<b>tradeoff depth or auto grade face</b> are active.</td>\n</tr>\n<tr>\n<td>Opened Face\nNo Computed Run:</td>\n<td>Press Set</td>\n<td>System sets off either the set size selected by the\nsawyer or a default board</td>\n</tr>\n<tr>\n<td>Opened Face\nComputed Run:</td>\n<td>Press Set</td>\n<td>The next board in the computed run will be set off\nfor sawing. <b>NOTE:</b> The system will not normally\nallow a cant to be set off on front faces.</td>\n</tr>\n<tr>\n<td>Opened Face\nComputed Run\nSize pressed:</td>\n<td>Press Set</td>\n<td>If the alternate size chosen is in the computed run,\nthe system will pull it from the stack and set it off,\nmoving the original size to the ''next'' position in the\nrun. If the alternative size is not in the stack, the\ncomputed run is cancelled and may need to be\nrecomputed later. This will result in a shim line on\nback faces (1B, 2B).</td>\n</tr>\n<tr>\n<td>Unopened Face 1F:</td>\n<td>Press Compute</td>\n<td>The system will scan and set taper for 1F, and will compute a whole log solution based on the solution\noption chosen and the active fill mask choices for\nthat axis.</td>\n</tr>\n<tr>\n<td>Unopened Faces:</td>\n<td>Press Compute</td>\n<td>The system will scan and set taper for 1B, 2F, 2B the chosen face and will compute the remainder of\nthe log based on the solution option chosen and\nactive fill mask choices for that axis. The sawyer\ncan also manually pre-select a cant and/or cant and\nboard stack before pressing compute. Remaining\nwood is filled automatically fro m active fill mask\nsizes.</td>\n</tr>\n<tr>\n<td>Opened Faces\nNo computed run:</td>\n<td>Press Compute</td>\n<td>The system will select a cant and stack in sideboards from the fill mask until no size 1B, 2B\nwill fit. The system will set off the shim.</td>\n</tr>\n<tr>\n<td>Opened Faces\nComputed run:</td>\n<td>Press Compute</td>\n<td>Acts like 'set' and will cause the next size in the run to be set off.</td>\n</tr>\n</table>\n</div>\n<div>\n<b>F. The Fill Mask & Fill With Last Board Parameter</b>\nThroughout this manual you will find references to \"the fill mask.\" Boards must be entered into the fill mask for each axis of each species. The fill mask should include all products that you typically want the computer to automatically include in a computed run for a particular species. In the Species Setup screen (located in the Lumber Options menu) is a checkbox called Fill With Last Board. If the checkbox is unchecked when the sawyer presses compute, any remaining wood is filled with boards that have been entered into the fill mask. The computer will attempt to fit the board with the largest size number in the fill mask as many times as it will fit, then will try the next smallest-numbered board, and so on. Boards not in the fill mask can only appear in a computed solution if they are manually selected by the sawyer (or are part of a larger pattern in systems where sawing patterns are used). If the Fill With Last Board checkbox is checked when the sawyer presses compute, all the remaining wood is filled with the last board the sawyer entered into the stack. However, when there is not enough wood left to fill with any more of this (last) board, the computer will attempt to fit the largest board form the fill mask that will fit in the remaining space and will work until no more fill mask boards will fit. The shim is taken with the slab when compute is pressed on an unopened face. If compute is pressed on a face that is already cut, a separate shim will be computed. If the system is equipped with a slabber, the slabber will take the shim and the saw the first board on the same pass. If no slabber is in use, an extra line will be required to take the shim.\n<b>To set the Fill Mask:</b>\n<ol>\n<li>Select a species and press a face button to define the axis. (For example, 1F for axis 1, 2F for axis 2)</li>\n<li>Press the Fill Mask button. The boards and cants that are currently in the fill mask for that species and axis will light up. Pressing a lit button will remove that set from the fill mask, pressing an unlit button will put that set size in the fill mask as an active choice.</li>\n<li>All the active choices should be lit and all the inactive choices should be unlit.\n<li>Usually both boards and cants should be selected in the axis 1 fill mask.</li>\n<li>Repeat the procedure for axis 2. In most cases, only board sizes are active because cant width was established on axis 1. If the cant is actually</li> dimensioned in both axes, e.g. a tie, timber, or pallet cant, then axis 2 may also contain a cant size.</li>\n<li>Press the fill mask button again to turn off the lamp and resume normal operation.</li>\n</ol>\n</div>\n<div>\n<b>G. Stack Entry</b>\nIn many grade mills and quite a few dimension mills a sawyer needs to have the ability to manually enter a stack. He may have a few products or small orders to fill that are not included in a days normal production, or he may see the opportunity to take some high value products that werent predictable when he first opened a log. The Lewis system allows a sawyer to do this quite easily and still lets him use the normal set and compute routines. For illustration, we will discuss stack entry on a back face first. In the Species Setup screen (located in the Lumber Options menu), there is a checkbox, Fill With Last Board. In essence, a question is being asked: Does the sawyer want to fill with the last board chosen? This parameter determines how the wood not used by the sawyer entered stack is to be filled. If Fill With Last Board is checked, the sawyer can enter any combination of cants\nand boards, singly or using his multiple buttons ''2x,3x,4x'' to cause the headrig to make resaw packages. The system will then stack them in the order they were entered. When he has entered his last board and presses the ''compute'' button, the system will enter his stack and fill any remaining wood with the last board in the stack. When there is not enough wood to fit another (last) board, the system will find the largest active fill mask board that will fit in the available space and work from there until no fill mask board will fit. The shim is taken with the slab if the stack entry/compute was on an unopened face. If the stack was entered and computed on an opened face, a shim line will be computed. If Fill with Last Board chosen is set to no (unchecked), the stack that the sawyer enters stays exactly how he enters it. Any additional fill boards needed to utilize the wood are picked from the fill mask. His last chosen board is not always repeated. If the sawyer enters a stack on the front face, the cant he chooses will be centered and the sideboards he chooses will be added to both sides of the log. Normal fill rules apply to take care of any excess wood. The sawyer entered boards are stacked from the slab in, in the order they were pressed.\n</div>\n<div>\n<b>H. Sawyers Tutorial (How to Saw a Log)</b>\nDepending on what type of logs you process and your production goals, such as grade and dimension, the Lewis system can be set up to handle most sawing processes. After a short adjustment period, the sawyer will learn to use the ''set'' button and the ''compute'' button at appropriate times. To refresh your memory, ''set'' on an unopened face will trigger the scan process\nand produce a ''minimum'' opening face. ''Set'' on an opened face will cause the default board or the selected board, either manually entered or part of a computed run, to be set off. The ''compute'' button tells the computer to use the chosen method of optimization (value driven, cant matrix) and the cants and boards selected in the ''Fill Mas'' to arrive at a computer driven solution for the whole or partially processed log. This computed run will be displayed on the sawyers display.\n</div>\n<div>\n<b>H-1. Simple Dimension Sawing</b>\n<ol type=\"a\">\n<li>Sawyer loads log and dogs it in place</li>\n<li>Sawyer presses ''Compute.'' The system will scan and set taper for the opening face</li>\n<li>Sawyer saws the first line</li>\n<li>Sawyer checks his display, and if he agrees with the next cut, presses the\n''Set'' button</li>\n<li>Sawyer saws the next line and continues until a cant size is next on the cut list</li>\n<li>Sawyer turns the log</li>\n<li>Sawyer repeats the process for the second side, ''Compute'' followed by successive ''Sets''</li>\n</ol>\n<b>WARNING: There are variations to the above. The sawyer may choose to manually saw front faces using his set button first and compute only on back faces.</b>\n</div>\n<div>\n<b>H-2. Grade Sawing</b>\n<ol>\n<li>Sawyer loads log and dogs it in place</li>\n<li>Sawyer presses ''Set.'' The system will scan and set taper for a minimum face.</li>\n<li>Sawyer saws off the slab, or slab and board if sawing ''slab attached.''</li>\n<li>Sawyer chooses the next set from the console and presses ''set'' to set it off. (If the indicator light for the desired board is already lit, or the desired board is the ''default board'', the sawyer only presses ''set.'')</li>\n<li>When out of grade for that particular face, turn and dog.</li>\n<li>At sawyer discretion, choose ''set'', ''compute'', or enter a cant size and board then ''compute''.</li>\n<li>''Set'' will open to a minimum face (an internal shim will likely result when you ''compute'' after sawing off a few grade boards.)</li>\n<li>''Compute'' will place the highest priority cant next to the knees and will fill remaining wood from the fill mask.</li>\n<li>Entering a cant and sideboard combination prior to ''compute'' will allow the sawyer to stack in a run. If ''fill with last board'' is checked in the Species Setup, the last board entered in the stack will fill the remaining wood until that board will not fit. The fill mask takes over after that. If fill with last board is unchecked, remaining wood between the entered boards and the cant or knees will be fit from the fill mask.</li>\n<li>For third and fourth sides, repeat (a) through (i)</li>\n</ol>\n</div>\n<div>\n<b>I. Scanner Calibration Procedure</b> \nAccurate placement of faces on the log is dependent on having a good scanner calibration. Lewis Controls provides two different types of scanning systems; A laser 3D scanner and a light curtain photocell scanner. The calibration procedures, which are similar, are described below.\n<b>I-1. Laser 3D Scanner Calibration Procedure</b> \nThe 3D laser scanners provide log profile information to the computer. That information is used to generate a solution for the log. The distance of the scan heads from the saw line, coupled with the position of the knees and the scanner data is critical to obtaining accurate solutions. When the scanner has been properly calibrated, these distances will be precise leading to correct solutions. Automatically calibrating the scanner is a simple and quick procedure that assures scanner accuracy. Follow the steps below:\n<ol>\n<li>Calibrate all the knees and verify that the set achieved lamp on the operators console comes on for each cut. Any knee calibration or setting accuracy error will be applied to the scanner calibration.</li>\n<li>Clean all windows on the scan heads - that is, the small round apertures where the lasers come out, as well as the oval cameras at each end of the head. Follow safety procedures and turn the scanners off prior to cleaning. Use a clean soft, dry cloth. If stubborn deposits are present, try using a window cleaner or alcohol. Do not use industrial solvents.</li>\n<li>If possible, position a log on the carriage so that all scan lines will be blocked during the calibration process.</li>\n<li>Make four faces on the log. The system needs a square backstand to ensure the log is flush against the knees, and it needs a square front and top as well. After making the last pass to square up the cant, leave the hydraulics on and refrain from jogging the knees.</li>\n<li>Position the carriage so that the cant is directly in front of the scanners. Press the SCAN CALIBRATE button on the operatorâ€™s console. The button will light indicating that the system is ready to start the calibration process.\n<li>Press the Set button to start the calibration. After a few seconds, the console will beep when the calibration is complete.</li>\n<b>NOTE:</b> If the cant is long enough, position the carriage so that both ends of the cant are beyond the end lasers. This will ensure that the scanner can 'see' the entire cant. If the cant is too short, calibrate twice: once\nwith the front of the cant just beyond the first laser, and again with the back of the cant just beyond the last laser.</li>\n<li>When calibration is complete, press the SCAN CALIBRATE button again and the lamp will go off. Check the L4 Scanner setup screen to view the results. (Main Menu / Setup Options / Scanner Setup / L4 Scanner Setup). Compare the Current and Last calibration values. You are now again ready to manufacture lumber and can finish cutting the cant if necessary.</li>\n</ol>\n</div>\n<div>\n<b>I-2 Photocell Scanner Calibration Procedure</b> \nThe photocell scanners, like the 3D scanner, also provide log profile information to the computer that is used for creating a solution. Automatically calibrating the scanner is a simple and quick procedure that assures scanner accuracy. Follow the steps below:\n<ol>\n<li>Calibrate all the knees and verify that the set achieved lamp on the operatorâ€™s console comes on for each cut. Any knee calibration or setting accuracy error will be applied to the scanner calibration.</li>\n<li>Clean all the photocells - both top and bottom. Generally, the top photocells will not require much in the way of cleaning. For the bottom scan bar, clean each individual photocell. Use a clean soft, dry cloth. If stubborn deposits are present, try using a window cleaner or alcohol. Do not use industrial solvents.</li>\n<li>If possible, position a log on the carriage so that all scan lines will be blocked during the calibration process.</li>\n<li>Make four faces on the log. The system needs a square backstand to ensure the log is flush against the knees. After making the last pass to square up the cant, leave the hydraulics on and refrain from jogging the knees.</li>\n<li>Position the carriage so that the cant is directly in front of the scanners. Press the <b>SCAN CALIBRATE</b> button on the operatorâ€™s console. The button will light indicating that the system is ready to start the calibration process.</li>\n<li> Press the Set button to start the calibration. The system will automatically start the process of moving the cant back and forth (into and out of the saw line)</li>\n<b>NOTE: If the cant is long enough, position the carriage so that both ends of the cant are beyond the end photocells. This will ensure that the scanner can 'see' the entire cant. If the cant is too short, calibrate twice: once with the front of the cant just beyond the first photocell, and again with the back of the cant just beyond the last photocell.</b>\n<li>When calibration is complete, press the SCAN CALIBRATE button again and the lamp will go off. Check the Scanner setup screen to view the results. (Main Menu / Setup Options / Scanner Setup / Scanner Setup). Compare the Current and Last calibration values. You are now again ready to manufacture lumber and can finish cutting the cant if necessary.</li>\n</ol>\n</div>"},{"name":"Section Six","idNum":"010016","type":"section","section":"Section VI","content":"<div>\n<b>SECTION VIII - MAINTENANCE NOTES</b>\n\n<b>A. The setworks hydraulic system</b>\nThe major reason for adding linear positioners to a carriage is to improve the knee setting accuracy and speed. To do this, very close tolerance components are used with high pressure. Satisfactory system operation and hydraulic component life depends greatly on the adjustments of the hydraulic system being done and checked regularly. It is also necessary to consider how one adjustment may effect other adjustments.\n\n<b>A-1. Hydraulic Cleanliness</b> \nOpening the hydraulic system exposes the system to the risk of introducing contamination (dirt). Contamination can cause early valve failures. It is very important to do all you can to prevent introducing contaminants. It is also important to understand that some contaminants are going to get in the system. To flush as much of the contaminants as possible through the plumbing and trap them in the filters, we furnish ball valves to control oil flow routing.\n\n<b>A-2. Hydraulic Filters</b>\nEach filter is equipped with an indicator that shows when the filter is becoming plugged. The filters should be changed when indicated or after 6 months use, whichever comes first. Any filter change should be followed by at least a one hour flush of the hydraulic system.\n\n<b>A-3. Hydraulic Oil</b>\nThe hydraulic oil received from your distributor is never as clean as the specification stated by servo valve manufacturers. It is very important to flush this oil before it is used to move positioners. We recommend a minimum of 4 hours. The grade of hydraulic oil you choose will certainly have an effect on the system operation. Most pump manufacturers recommend a grade or weight of 68. The choice must, however, be tempered by other factors. The oil viscosity range must be such that cold weather will not cause it to gel in the plumbing and the cylinders and warm weather will not lower the viscosity to the point where it loses lubricating properties. The power units we supply have tank heaters and oil coolers to help the mill keep the oil in a desirable viscosity range. Other possibilities are locating the power unit for effective cooling and heating and to minimize the length of plumbing runs. Under severe conditions, wrapping the plumbing or using heat tape may be advisable. Keeping the reservoir topped off and fully retracting the cylinders when the carriage is idle also can help keep oil in the desired temperature range.\n</div>\n<div>\n<b>B. Component Handling</b>\nReasonable care and precautions are necessary when handling electronic and hydraulic components. The systems AC power should always be switched off before servicing any electrical parts.\n\n<b>B-1. Wiring</b>\nWhen running or replacing wiring the areas which are required to flex (such as the pantograph arms) should have extra length and strain relief if possible. Wiring should be protected from abrasion, excess heat, dirt and moisture. Wire terminations must be tight enough to ensure a good electrical connection. Excessive tightening will cause broken wires.\n\n<b>B-2. Circuit Boards</b>\nWhen changing circuit boards remove power by turning the system power off. Remove any cables which are in the way of the board. (Note where each cable plugs in.) Take care where you put the circuit board so it does not get damaged, including damage from static electricity. When all the boards and cables are back in their proper place, the system can be turned on and tested for proper operation.\n\n<b>C. Intermittent Problems</b>\nWhen trying to locate the cause of an intermittent problem, it is frequently advisable to keep a log of the activities, i.e., replaced circuit board XXX with spare circuit board YYY. You will not only know what steps you have tried, but when the problem is resolved you will know what parts need repair or replacement to keep your spares ready to support your system.\n</div>\n<div>\n<b>D. Installing the Spare Black Box</b>\nThere are ten steps to correctly install the spare black box. Please follow the instructions for each step to guard against loss of data or excessive downtime.\n<b>D - 1. Determine that a replacement black box is needed</b>\nAn LCI engineer has helped you troubleshoot your system, and the diagnosis is that your black box computer needs to be replaced. Take care to follow these steps in the order presented.\n\n<b>D - 2. Save Pvalues to Compact Flash (if possible)</b>\nIf your computer is still operable, you need to run a small program that will save all your current program values to an external storage device called 'Flash Drive'. If you are unable to run your computer, simply remove the compact flash card from the SanDisk reader and save it for later. The compact flash will have the values from the last time you backed up your system (hopefully that has been done on a regular basis). If you can run your computer, follow these steps to perform one final backup. To run the program, click on Start, point to Programs and Carriage Menu and then click on Save Program to Flash.\n<center><img src=\"./app/img/savePVaules.PNG\" className=\"pdfHelpImg\"></img></center>\nA window will pop up momentarily; when the window disappears, you are ready to save current species settings. From the Main Menu of Lewis Controls software click on <b>File Options</b> and then click on <b>Save Current Species & Machine Values to Disk</b>. Figure 2 shows the window that will come up.\n<center><img src=\"./app/img/}hlpViewMachine.PNG\" className=\"pdfHelpImg\"></img></center>\nClick in the box for 'Backup values to flash' (as shown) and click 'Accept'. The window will disappear and your values will be backed up. Now you should remove the compact flash card from the SanDisk reader and save it for later.\n</div>\n<div>\n<b>D - 3. Shut Down and Power off the black box</b>\nClick on the Start button and choose Ã¢â‚¬Å“Shut Down.Ã¢â‚¬Â\n<center><img src=\"./app/img/shuttingDown.PNG\" className=\"helpFileImgSmall\"></img></center>\nWhen the drop down window says 'Shut Down', Click 'OK' on the Shut Down Windows dialog, as shown below in Figure 4.\n<center><img src=\"./app/img/shutDownIndication.PNG\" className=\"helpFileImgSmall\"></img></center>\nWhen the comuter indicates you can turn the power off, turn off the power by pressing the red Power button on the lower left side of the front of the machine. At this time make sure that the Control Panel and PLC have been turned off as well.\n</div>\n<div>\n<b>D - 4. Unplug all input leads</b>\nAfter the computer has been turned off, remove the panel from the top of the black box. The top has two thumbscrews and should lift off easily after they have been loosened. After removing the top, shut off the power supply by flipping the switch next to the power cord (this switch is circled in Figure 5).\n<center><img src=\"./app/img/blackBrickPower.PNG\" className=\"helpFileImgSmall\"></img></center> \nNext, unplug all the input leads from the top of the computer. You may wish to label each lead so you know where it goes when you hook up the spare Here is a list of items to be removed:\n<ul>\n<li>Power supply cable (black)</li>\n<li>USB connectors:</li>\n<ul>\n<li>Flash (Do not remove)</li>\n<li>Shape scan input</li>\n<li>Touch screen input</li>\n<li>UPS communication</li>\n</ul>\n<li>Remove the protective plastic strips from the top and bottom of the hole on the left and slide the uLinks USB to 485 converter out through the hole. Put the plastic strips back into their original position.</li>\n<li>Network cable to Ethernet Hub</li>\n<li>Keyboard and mouse cords (color coded plugs)</li>\n<li>Phone cord - Modem card (if present)</li>\n<li>Monitor cables (2) - Sawyer Display and Touch Screen</li>\n<li>Com 1 and Com 2 serial cables (gray)</li>\n<li>12V DC connection (black and yellow twisted wire)</li>\n<li>Laser scanner fiber optic cables (label these to maintain order)</li>\n<li>Remove the Ethernet hub from the right side of the black box</li>\n<li>Remove the compact flash card from the SanDisk reader.</li>\n<li>Last, unplug the five ribbon cables that plug into the left side of the black box. The ribbon cables are already labeled for installation convenience.</li>\n</ul>\n</div>\n<div>\n<b>D - 5. Remove black box from back panel</b>\nRemove the four nuts from the bolts that hold the black box to the back panel, and lift it off the panel. Carefully package the black box for shipping to Lewis Controls for repair.\n\n<b>D - 6. Place spare black box on back panel</b>\nNow that the old black box has been disconnected and removed, we start to assemble the spare system by following the reverse of what we have done so far. Place the spare black box on the back panel and secure it with the nuts you removed in Step VI.\n<center><img src=\"./app/img/blackBoxSpare.PNG\" className=\"pdfHelpImg\"></img></center>\n</div>\n<div>\n<b>D - 7. Plug in all leads</b>\nBefore putting on the top panel, you must reattach all the cables and cords that are attached to the top of the computer. Use this list and Figure 6 to assist you in plugging everything back in.\n<ul>\n<li>Power supply cable (black)</li>\n<li>USB connectors:</li>\n<ul>\n<li>Flash (Should already be present in the new black box)</li>\n<li>Shape scan input</li>\n<li>Touch screen input</li>\n<li>UPS communication</li>\n</ul>\n<li>Attach Ethernet hub to outside of black box on the right side and reconnect</li>\n<li>network cable to Hub</li>\n<li>Keyboard and mouse cords (color coded plugs)</li>\n<li>Phone cord (if present)</li>\n<li>Monitor cables (2) - Sawyer Display and Touch Screen</li>\n<li>Com 1 and Com 2 serial cables</li>\n<li>12V DC connection (black and yellow twisted wire)</li>\n<li>Laser scanner fiber optic cables (order is important!)</li>\n<li>Insert the compact flash card into the SanDisk reader</li>\n<li>Remove the protective plastic strips from the top and bottom of the hole on the left and slide the uLinks USB to 485 converter back in through the hole.</li>\n<li>Reconnect to USB. Put the plastic strips back into their original position.</li>\n<li>Plug the five ribbon cables into the side connectors on the left side of the box.</li>\n<li>Flip the power switch near the power cord so the Ã¢â‚¬Å“IÃ¢â‚¬Â is down.</li>\n<li>Replace the cover over the top of the black box.</li>\n</ul>\n</div>\n<div>\n<b>D - 8. Power on</b>\nTurn the power on by pressing the red 'Power', switch on the front of the black box. (It may be necessary to remove the small black plate at the bottom to gain access to the switch). You should prevent the Carriage software from starting. To do this, hold down the Shift key as Windows is booting up (start holding down the Shift key when a small window appears that says 'Windows is starting up'). You will get a window prompting for a password; use the password 'carriage' to continue. As soon as you enter the password, you must depress the Shift key again! If the Carriage software starts, close it before continuing on to Step IX.\n\n<b>D - 9. Restore values from Flash</b>\nIf you were able to save your program values to the Flash disk (Step II), or even if you werent but had backup values saved previously, click on:\n<i>Start->Programs->Carriage Menu->Recover Values From Flash.</i>\n<center><img src=\"./app/img/flashValues.PNG\" className=\"pdfHelpImg\"></img></center>\nA new window will open, and before you can read the contents of the window, you will be presented with a dialog as shown in Figure 8. Clicking Yes will allow you to view the contents of the new window.\n<center><img src=\"./app/img/flashValues.PNG\" className=\"pdfHelpImg\"></img></center>\nThe new window is a web page with two buttons on the bottom. File names (and the dates that they were saved) will be displayed with Current files names on the left and the Saved file names on the right. Files under the Current column are backed up automatically by the system on a periodic basis. Files under the Saved column are backed up only when specifically commanded by using the system menus. (Main Menu / File Options / Save Current Species & Machine Values to Disk) Click the button on the right that says, 'Recover from Saved Flash Values.'\n<center><img src=\"./app/img/recoverValuesFlash.PNG\" className=\"pdfHelpImg\"></img></center>\nClick Yes to confirm the copy. When it is finished, you will be presented with a dialog confirming success, as\n<center><img src=\"./app/img/flashOk.PNG\" className=\"helpFileImgSmall\"></img></center>\nClick 'OK', close the window, and continue to the next step.\n</div>\n<div>\n<b>D - 10. Test and run</b>\nOpen the Carriage menu and see if the carriage can make lumber. Make sure the Control Panel and PLC have been switched on.\n\n<b>E. LCI Service</b>\nThe LCI engineering department is available to assist your maintenance efforts. We will provide phone support or, if needed, on-site support. Our support people include an in-house service technician, who can handle many of the mill problems through phone support, repair of defective parts, or by sending spare parts to the mill.\n</div>"}]

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(62);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Landing = __webpack_require__(193);

var _Landing2 = _interopRequireDefault(_Landing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_reactDom2.default.render(_react2.default.createElement(_Landing2.default, null), document.getElementById('feed'));

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(95);
var ReactElement = __webpack_require__(16);

var emptyFunction = __webpack_require__(10);
var traverseAllChildren = __webpack_require__(96);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(20);

var invariant = __webpack_require__(0);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(20);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(57);

var getIteratorFn = __webpack_require__(58);
var invariant = __webpack_require__(0);
var KeyEscapeUtils = __webpack_require__(97);
var warning = __webpack_require__(1);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(16);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(59);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(20);

var ReactPropTypeLocationNames = __webpack_require__(100);
var ReactPropTypesSecret = __webpack_require__(101);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(9);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(16),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(60);

module.exports = factory(isValidElement);

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__(0);
  var warning = __webpack_require__(1);
  var ReactPropTypesSecret = __webpack_require__(38);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(55),
    Component = _require.Component;

var _require2 = __webpack_require__(16),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = __webpack_require__(56);
var factory = __webpack_require__(106);

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyObject = __webpack_require__(28);
var _invariant = __webpack_require__(0);

if (process.env.NODE_ENV !== 'production') {
  var warning = __webpack_require__(1);
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (process.env.NODE_ENV !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (process.env.NODE_ENV !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(20);

var ReactElement = __webpack_require__(16);

var invariant = __webpack_require__(0);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(5);
var ReactDefaultInjection = __webpack_require__(109);
var ReactMount = __webpack_require__(86);
var ReactReconciler = __webpack_require__(21);
var ReactUpdates = __webpack_require__(13);
var ReactVersion = __webpack_require__(187);

var findDOMNode = __webpack_require__(188);
var getHostComponentFromComposite = __webpack_require__(87);
var renderSubtreeIntoContainer = __webpack_require__(189);
var warning = __webpack_require__(1);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = __webpack_require__(8);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = __webpack_require__(11);
  var ReactDOMUnknownPropertyHook = __webpack_require__(190);
  var ReactDOMNullInputValuePropHook = __webpack_require__(191);
  var ReactDOMInvalidARIAHook = __webpack_require__(192);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(110);
var BeforeInputEventPlugin = __webpack_require__(111);
var ChangeEventPlugin = __webpack_require__(115);
var DefaultEventPluginOrder = __webpack_require__(123);
var EnterLeaveEventPlugin = __webpack_require__(124);
var HTMLDOMPropertyConfig = __webpack_require__(125);
var ReactComponentBrowserEnvironment = __webpack_require__(126);
var ReactDOMComponent = __webpack_require__(132);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(158);
var ReactDOMTreeTraversal = __webpack_require__(159);
var ReactDOMTextComponent = __webpack_require__(160);
var ReactDefaultBatchingStrategy = __webpack_require__(161);
var ReactEventListener = __webpack_require__(162);
var ReactInjection = __webpack_require__(164);
var ReactReconcileTransaction = __webpack_require__(165);
var SVGDOMPropertyConfig = __webpack_require__(171);
var SelectEventPlugin = __webpack_require__(172);
var SimpleEventPlugin = __webpack_require__(173);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(23);
var ExecutionEnvironment = __webpack_require__(8);
var FallbackCompositionState = __webpack_require__(112);
var SyntheticCompositionEvent = __webpack_require__(113);
var SyntheticInputEvent = __webpack_require__(114);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(17);

var getTextContentAccessor = __webpack_require__(66);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(24);
var EventPropagators = __webpack_require__(23);
var ExecutionEnvironment = __webpack_require__(8);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(13);
var SyntheticEvent = __webpack_require__(14);

var inputValueTracking = __webpack_require__(69);
var getEventTarget = __webpack_require__(41);
var isEventSupported = __webpack_require__(42);
var isTextInputElement = __webpack_require__(70);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(117);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(119);
var ReactHostOperationHistoryHook = __webpack_require__(120);
var ReactComponentTreeHook = __webpack_require__(9);
var ExecutionEnvironment = __webpack_require__(8);

var performanceNow = __webpack_require__(121);
var warning = __webpack_require__(1);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(1);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(122);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(8);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(23);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(31);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(15);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(44);
var ReactDOMIDOperations = __webpack_require__(131);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var DOMLazyTree = __webpack_require__(22);
var ExecutionEnvironment = __webpack_require__(8);

var createNodesFromMarkup = __webpack_require__(128);
var emptyFunction = __webpack_require__(10);
var invariant = __webpack_require__(0);

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(8);

var createArrayFromMixed = __webpack_require__(129);
var getMarkupWrap = __webpack_require__(130);
var invariant = __webpack_require__(0);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(0);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(8);

var invariant = __webpack_require__(0);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(44);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(133);
var CSSPropertyOperations = __webpack_require__(134);
var DOMLazyTree = __webpack_require__(22);
var DOMNamespaces = __webpack_require__(45);
var DOMProperty = __webpack_require__(15);
var DOMPropertyOperations = __webpack_require__(75);
var EventPluginHub = __webpack_require__(24);
var EventPluginRegistry = __webpack_require__(29);
var ReactBrowserEventEmitter = __webpack_require__(34);
var ReactDOMComponentFlags = __webpack_require__(63);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(144);
var ReactDOMOption = __webpack_require__(145);
var ReactDOMSelect = __webpack_require__(77);
var ReactDOMTextarea = __webpack_require__(146);
var ReactInstrumentation = __webpack_require__(11);
var ReactMultiChild = __webpack_require__(147);
var ReactServerRenderingTransaction = __webpack_require__(156);

var emptyFunction = __webpack_require__(10);
var escapeTextContentForBrowser = __webpack_require__(33);
var invariant = __webpack_require__(0);
var isEventSupported = __webpack_require__(42);
var shallowEqual = __webpack_require__(49);
var inputValueTracking = __webpack_require__(69);
var validateDOMNesting = __webpack_require__(53);
var warning = __webpack_require__(1);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(73);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(74);
var ExecutionEnvironment = __webpack_require__(8);
var ReactInstrumentation = __webpack_require__(11);

var camelizeStyleName = __webpack_require__(135);
var dangerousStyleValue = __webpack_require__(137);
var hyphenateStyleName = __webpack_require__(138);
var memoizeStringOnly = __webpack_require__(140);
var warning = __webpack_require__(1);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(136);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(74);
var warning = __webpack_require__(1);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(139);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(33);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(24);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(8);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(75);
var LinkedValueUtils = __webpack_require__(47);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(13);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(19);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(77);

var warning = __webpack_require__(1);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(47);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(13);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactComponentEnvironment = __webpack_require__(48);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(11);

var ReactCurrentOwner = __webpack_require__(12);
var ReactReconciler = __webpack_require__(21);
var ReactChildReconciler = __webpack_require__(148);

var emptyFunction = __webpack_require__(10);
var flattenChildren = __webpack_require__(155);
var invariant = __webpack_require__(0);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(21);

var instantiateReactComponent = __webpack_require__(78);
var KeyEscapeUtils = __webpack_require__(51);
var shouldUpdateReactComponent = __webpack_require__(50);
var traverseAllChildren = __webpack_require__(82);
var warning = __webpack_require__(1);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(9);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var React = __webpack_require__(19);
var ReactComponentEnvironment = __webpack_require__(48);
var ReactCurrentOwner = __webpack_require__(12);
var ReactErrorUtils = __webpack_require__(40);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(11);
var ReactNodeTypes = __webpack_require__(79);
var ReactReconciler = __webpack_require__(21);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(150);
}

var emptyObject = __webpack_require__(28);
var invariant = __webpack_require__(0);
var shallowEqual = __webpack_require__(49);
var shouldUpdateReactComponent = __webpack_require__(50);
var warning = __webpack_require__(1);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactPropTypeLocationNames = __webpack_require__(151);
var ReactPropTypesSecret = __webpack_require__(76);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(9);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(51);
var traverseAllChildren = __webpack_require__(82);
var warning = __webpack_require__(1);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(9);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(17);
var Transaction = __webpack_require__(30);
var ReactInstrumentation = __webpack_require__(11);
var ReactServerUpdateQueue = __webpack_require__(157);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(52);

var warning = __webpack_require__(1);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(22);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var invariant = __webpack_require__(0);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(44);
var DOMLazyTree = __webpack_require__(22);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(33);
var invariant = __webpack_require__(0);
var validateDOMNesting = __webpack_require__(53);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(13);
var Transaction = __webpack_require__(30);

var emptyFunction = __webpack_require__(10);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(83);
var ExecutionEnvironment = __webpack_require__(8);
var PooledClass = __webpack_require__(17);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(13);

var getEventTarget = __webpack_require__(41);
var getUnboundedScrollPosition = __webpack_require__(163);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(15);
var EventPluginHub = __webpack_require__(24);
var EventPluginUtils = __webpack_require__(39);
var ReactComponentEnvironment = __webpack_require__(48);
var ReactEmptyComponent = __webpack_require__(80);
var ReactBrowserEventEmitter = __webpack_require__(34);
var ReactHostComponent = __webpack_require__(81);
var ReactUpdates = __webpack_require__(13);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(67);
var PooledClass = __webpack_require__(17);
var ReactBrowserEventEmitter = __webpack_require__(34);
var ReactInputSelection = __webpack_require__(84);
var ReactInstrumentation = __webpack_require__(11);
var Transaction = __webpack_require__(30);
var ReactUpdateQueue = __webpack_require__(52);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(8);

var getNodeForCharacterOffset = __webpack_require__(167);
var getTextContentAccessor = __webpack_require__(66);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(169);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(170);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(23);
var ExecutionEnvironment = __webpack_require__(8);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(84);
var SyntheticEvent = __webpack_require__(14);

var getActiveElement = __webpack_require__(85);
var isTextInputElement = __webpack_require__(70);
var shallowEqual = __webpack_require__(49);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(2);

var EventListener = __webpack_require__(83);
var EventPropagators = __webpack_require__(23);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(174);
var SyntheticClipboardEvent = __webpack_require__(175);
var SyntheticEvent = __webpack_require__(14);
var SyntheticFocusEvent = __webpack_require__(176);
var SyntheticKeyboardEvent = __webpack_require__(177);
var SyntheticMouseEvent = __webpack_require__(31);
var SyntheticDragEvent = __webpack_require__(179);
var SyntheticTouchEvent = __webpack_require__(180);
var SyntheticTransitionEvent = __webpack_require__(181);
var SyntheticUIEvent = __webpack_require__(25);
var SyntheticWheelEvent = __webpack_require__(182);

var emptyFunction = __webpack_require__(10);
var getEventCharCode = __webpack_require__(54);
var invariant = __webpack_require__(0);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(25);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(25);

var getEventCharCode = __webpack_require__(54);
var getEventKey = __webpack_require__(178);
var getEventModifierState = __webpack_require__(43);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(54);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(31);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(25);

var getEventModifierState = __webpack_require__(43);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(14);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(31);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(53);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(186);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(2);

var ReactCurrentOwner = __webpack_require__(12);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstanceMap = __webpack_require__(26);

var getHostComponentFromComposite = __webpack_require__(87);
var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(86);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(15);
var EventPluginRegistry = __webpack_require__(29);
var ReactComponentTreeHook = __webpack_require__(9);

var warning = __webpack_require__(1);

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(9);

var warning = __webpack_require__(1);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(15);
var ReactComponentTreeHook = __webpack_require__(9);

var warning = __webpack_require__(1);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Header = __webpack_require__(199);

var _Header2 = _interopRequireDefault(_Header);

var _Menu = __webpack_require__(200);

var _Menu2 = _interopRequireDefault(_Menu);

var _HelpFile = __webpack_require__(202);

var _HelpFile2 = _interopRequireDefault(_HelpFile);

var _electron = __webpack_require__(35);

var _electron2 = _interopRequireDefault(_electron);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Landing = function (_Component) {
	_inherits(Landing, _Component);

	function Landing(props) {
		_classCallCheck(this, Landing);

		var _this = _possibleConstructorReturn(this, (Landing.__proto__ || Object.getPrototypeOf(Landing)).call(this, props));

		_this.state = {
			helpFileName: 'Mainmenu',
			menuName: 'MainMenu'
		};
		return _this;
	}

	_createClass(Landing, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			var hlpString = __webpack_require__(35).remote.getGlobal('sharedObject').hlpOne;
			var tstFile = '';

			if (hlpString != null && hlpString != '.') {
				hlpString = hlpString.toLowerCase().replace(/\s+/g, '');
				hlpString = hlpString.charAt(0).toUpperCase() + hlpString.substr(1);

				var menuToOpen = this.props.data.filter(function (obj) {
					return hlpString === obj.name;
				}).map(function (obj, idx) {
					tstFile = obj.menu;
					return _react2.default.createElement(
						'div',
						{ key: idx },
						obj.menu
					);
				});

				this.setState({
					helpFileName: hlpString,
					menuName: tstFile
				});
			}
		}
	}, {
		key: 'handleHelpChange',
		value: function handleHelpChange(helpFileName) {
			this.setState({ helpFileName: helpFileName });
		}
	}, {
		key: 'handleMenuClick',
		value: function handleMenuClick(menuName) {
			this.setState({ menuName: menuName });
		}
	}, {
		key: 'handleMenuChange',
		value: function handleMenuChange(menuName) {
			this.setState({ menuName: '' });
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_Header2.default, null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					{ className: 'mainMenuDiv' },
					_react2.default.createElement(_Menu2.default, { handleHelpChange: this.handleHelpChange.bind(this), menuName: this.state.menuName, handleMenuChange: this.handleMenuChange.bind(this) })
				),
				_react2.default.createElement(
					'div',
					{ className: 'mainContainerDiv' },
					_react2.default.createElement(_HelpFile2.default, { name: this.state.helpFileName })
				)
			);
		}
	}]);

	return Landing;
}(_react.Component);

Landing.propTypes = {
	data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

Landing.defaultProps = {
	data: _HelpFileData2.default
};

exports.default = Landing;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(195)(undefined);
// imports


// module
exports.push([module.i, ".cols3 {\n  -webkit-column-count: 3;\n  -webkit-column-gap: 20px;\n  -webkit-column-rule: 1px solid #000;\n  -moz-column-count: 3;\n  -moz-column-gap: 20px;\n  -moz-column-rule: 1px solid #000;\n  column-count: 3;\n  column-gap: 20px;\n  column-rule: 1px solid #000; }\n\n.cols2 {\n  -webkit-column-count: 2;\n  -webkit-column-gap: .25em;\n  -moz-column-count: 2;\n  -moz-column-gap: .25em;\n  float: left;\n  column-count: 2;\n  column-gap: .25em; }\n\n.cols2Front {\n  -webkit-column-count: 2;\n  -moz-column-count: 2;\n  column-count: 2; }\n\n/************************\nKNEE MOVEMENT BETA ANIMATION\n************************/\n@keyframes jUp {\n  0% {\n    top: 1; }\n  50% {\n    top: -3; }\n  100% {\n    top: 1; } }\n\n.kneeOne {\n  display: inline-block;\n  border: 2px solid #0080ff;\n  height: 150px;\n  width: 100px;\n  margin: 5px;\n  padding: 10px;\n  vertical-align: text-bottom; }\n\n.kneeTwo {\n  display: inline-block;\n  border: 2px solid #0080ff;\n  height: 150px;\n  width: 100px;\n  margin: 5px;\n  padding: 10px;\n  vertical-align: text-bottom; }\n\n.kneeThree {\n  display: inline-block;\n  border: 2px solid #0080ff;\n  height: 150px;\n  width: 100px;\n  margin: 5px;\n  padding: 10px;\n  vertical-align: text-bottom; }\n\n@-webkit-keyframes divFadeIn {\n  0% {\n    opacity: 0; }\n  50% {\n    opacity: .5; }\n  100% {\n    opacity: 1; } }\n\n@keyframes divFadeIn {\n  0% {\n    opacity: 0; }\n  50% {\n    opacity: .5; }\n  100% {\n    opacity: 1; } }\n\n@-webkit-keyframes titleSlide {\n  0% {\n    right: 0px;\n    opacity: 1;\n    text-shadow: 200px 0px #FFF;\n    color: black; }\n  15% {\n    right: 10px;\n    opacity: .7;\n    text-shadow: 200px 0px #FFF;\n    color: black; }\n  30% {\n    right: 30px;\n    opacity: .4;\n    text-shadow: 200px 0px #FFF;\n    color: black; }\n  55% {\n    right: 60px;\n    opacity: 0;\n    text-shadow: 200px 0px #FFE;\n    color: white; }\n  60% {\n    right: 120px;\n    opacity: .4;\n    text-shadow: 200px 0px #FEE;\n    color: white; }\n  75% {\n    right: 170px;\n    opacity: .7;\n    text-shadow: 200px 0px #EEE;\n    color: white; }\n  100% {\n    right: 200px;\n    opacity: 1;\n    text-shadow: 200px 0px #000;\n    color: white; } }\n\n@keyframes titleSlide {\n  0% {\n    right: 0px;\n    opacity: 1;\n    text-shadow: 200px 0px #FFF;\n    color: black; }\n  15% {\n    right: 10px;\n    opacity: .7;\n    text-shadow: 200px 0px #FFF;\n    color: black; }\n  30% {\n    right: 30px;\n    opacity: .4;\n    text-shadow: 200px 0px #FFF;\n    color: black; }\n  55% {\n    right: 60px;\n    opacity: 0;\n    text-shadow: 200px 0px #FFE;\n    color: white; }\n  60% {\n    right: 120px;\n    opacity: .4;\n    text-shadow: 200px 0px #FEE;\n    color: white; }\n  75% {\n    right: 170px;\n    opacity: .7;\n    text-shadow: 200px 0px #EEE;\n    color: white; }\n  100% {\n    right: 200px;\n    opacity: 1;\n    text-shadow: 200px 0px #000;\n    color: white; } }\n\n@-webkit-keyframes bumpFirst {\n  0% {\n    top: 1; }\n  50% {\n    top: -2; }\n  100% {\n    top: 1; } }\n\n@keyframes bumpFirst {\n  0% {\n    top: 1; }\n  50% {\n    top: -2; }\n  100% {\n    top: 1; } }\n\n@keyframes skewLeft {\n  0% {\n    transform: skewY(0deg);\n    transform: skewX(0deg); }\n  40% {\n    transform: skewY(10deg);\n    transform: skewX(7deg); }\n  70% {\n    transform: skewY(10deg);\n    transform: skewX(7deg); }\n  100% {\n    transform: skewY(0deg);\n    transform: skewX(0deg); } }\n\n@keyframes skewRight {\n  0% {\n    transform: skewY(0deg);\n    transform: skewX(0deg); }\n  40% {\n    transform: skewY(-10deg);\n    transform: skewX(-7deg); }\n  65% {\n    transform: skewY(-10deg);\n    transform: skewX(-7deg); }\n  100% {\n    transform: skewY(0deg);\n    transform: skewX(0deg); } }\n\ndiv {\n  font-family: Helvetica; }\n\np {\n  font-family: Helvetica; }\n\n.slideIn {\n  position: relative;\n  text-decoration: none !important;\n  animation: skewLeft 1.5s forwards;\n  animation-delay: 4s; }\n\n.headerDiv {\n  padding-right: 20px; }\n\n.container {\n  height: 100%;\n  width: 100%;\n  background: white;\n  color: black;\n  display: inline-block; }\n\n.divContent {\n  width: 48%;\n  display: inline-block; }\n\n.headDiv {\n  width: 100%;\n  background: #0080ff;\n  height: 52px; }\n\n.menuDiv {\n  display: inline-block;\n  padding-bottom: 100px; }\n\n.mainContent {\n  width: 100%;\n  padding-left: 5%; }\n\n.helpFileContainer {\n  width: 100%;\n  padding-left: 5%; }\n\n.mainMenuDiv {\n  height: 100%;\n  float: left;\n  display: inline-block; }\n\n.mainContainerDiv {\n  padding-left: 160px;\n  display: block; }\n\n.displayLineBreak {\n  white-space: pre-line;\n  display: inline-block;\n  width: 65%;\n  vertical-align: top; }\n\n.printDiv {\n  display: inline-block;\n  vertical-align: top; }\n\n.vidContent {\n  white-space: pre-line;\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n  float: right;\n  width: 25%;\n  vertical-align: top;\n  border: 2px solid #0080ff; }\n\n.fadingDiv {\n  text-align: justify;\n  padding: 0px 20px 0px 0px;\n  -webkit-animation: divFadeIn .75s ease-in forwards;\n  animation: divFadeIn .75s ease-in forwards; }\n\n.addFade {\n  -webkit-animation: divFadeIn .75s ease-in forwards;\n  animation: divFadeIn .75s ease-in forwards; }\n\n::-webkit-scrollbar {\n  background-color: #fff;\n  width: 2em; }\n\n::-webkit-scrollbar-thumb:window-inactive,\n::-webkit-scrollbar-thumb {\n  background: #0080ff; }\n\n@media print {\n  .fadingDiv {\n    padding: 0px !important; }\n  .addPageBreak {\n    page-break-before: always !important; }\n  .addPageBreakAfter {\n    page-break-after: always !important; }\n  .artPDF {\n    page-break-before: always !important;\n    padding: 16px; }\n  .mainMenuDiv {\n    display: none !important;\n    visibility: hidden !important; }\n  .printBtn {\n    display: none !important;\n    visibility: hidden !important; }\n  .displayLineBreak {\n    width: 100% !important;\n    overflow: visible;\n    padding: 16px 16px 32px 16px !important;\n    display: inline !important; }\n  .divImg {\n    float: none !important;\n    width: 46% !important;\n    margin-left: 174px !important;\n    margin-bottom: 8px !important;\n    margin-top: 4px !important; }\n  .pdfHelpImg {\n    margin-left: 174px !important;\n    margin-bottom: 8px !important;\n    margin-top: 4px !important; }\n  .mainContainerDiv {\n    float: none !important;\n    padding-left: 0px !important;\n    margin-bottom: 8px !important;\n    margin-top: 4px !important;\n    width: 100% !important;\n    display: inline !important;\n    overflow: visible; }\n  .rdyScan {\n    margin-top: -49.5158px !important;\n    text-decoration: underline !important;\n    font-size: 22px !important; }\n  .sectionDiv {\n    position: absolute;\n    bottom: 0; }\n  .sectionFooter {\n    width: 100%;\n    vertical-align: bottom;\n    padding-left: 350px; }\n  .closeAllBtnHeader {\n    display: none !important; } }\n\n/*********\n\n\th2 {\n\t   page-break-after: avoid;\n\t        page-break-inside: avoid;\n\t}\n\t\n\tarticle {\n\t   page-break-before: always;\n\t       \n\t}\n\t\n  .mainMenuDiv {\n\tfloat: none!important;\n    display: none!important;\n    visibility: hidden!important;\n\toverflow:visible;\n\t//width: 100%!important;\n  }\n  \n  .printBtn {\n    display: none!important;\n    visibility: hidden!important;\n\toverflow:visible;\n  }\n  \n  .displayLineBreak {\n\tfloat: none!important;\n  \twidth: 100%!important;\n\tpadding: 8px!important;\n\tpage-break-before: always!important;\n\toverflow:visible;\n  }\n  \n  .mainContainerDiv {\n\tfloat: none!important;\n\tpadding-left: 0px!important;\n\tmargin-bottom: 8px!important;\n\twidth: 100%!important;\n\tdisplay: block!important;\n\tposition: absolute!important;\n\toverflow:visible;\n  }\n  \n  .divImg {\n\tfloat: none!important;\n\twidth: 50%!important;\n\tmargin-left: 170px!important;\n\tmargin-bottom: 8px!important;\n\tpage-break-before:always!important;\n\toverflow:visible;\n\t     page-break-inside: avoid;\n  }\n  \n  .pdfHelpImg {\n\tpage-break-before:always!important;\n\toverflow:visible;\n\t     page-break-inside: avoid;\n  }\n  \n  .pdfPrint {\n\tfloat: none!important;\n  \tpage-break-before:always!important;\n  }\n\n\n\n****/\n.footer {\n  width: 100%;\n  background: lightgrey; }\n\na {\n  color: black;\n  text-decoration: none; }\n\n/*\n\tBar over top of link animation\n.barTopNav {\n\t@include linkStyle;\n\t\n\t&:after {\n\t\t@include outsideLinks;\n\t}\n\t&:hover:after {\n\t  @include outsideHover;\n\t}\n}\n*/\n@keyframes fadeInOut {\n  0% {\n    opacity: 0; }\n  20% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n/* Firefox < 16 */\n@-moz-keyframes fadeInOut {\n  0% {\n    opacity: 0; }\n  20% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n/* Safari, Chrome and Opera > 12.1 */\n@-webkit-keyframes fadeInOut {\n  0% {\n    opacity: 0; }\n  20% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n/* Internet Explorer */\n@-ms-keyframes fadeInOut {\n  0% {\n    opacity: 0; }\n  20% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n/* Opera < 12.1 */\n@-o-keyframes fadeInOut {\n  0% {\n    opacity: 0; }\n  20% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n@-webkit-keyframes fadeInRight {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateX(20px); }\n  100% {\n    opacity: 1;\n    -webkit-transform: translateX(0); } }\n\n@keyframes fadeInRight {\n  0% {\n    opacity: 0;\n    transform: translateX(20px); }\n  100% {\n    opacity: 1;\n    transform: translateX(0); } }\n\n@-webkit-keyframes textDis {\n  0% {\n    left: 0px;\n    bottom: 0px; }\n  100% {\n    left: 4px;\n    bottom: 4px; } }\n\n@keyframes textDis {\n  0% {\n    left: 0px;\n    bottom: 0px; }\n  100% {\n    left: 4px;\n    bottom: 4px; } }\n\n@-webkit-keyframes txtSha {\n  0% {\n    bottom: 0px;\n    text-shadow: 0px 12px #000; }\n  100% {\n    bottom: 8px;\n    text-shadow: 0px 12px #000; } }\n\n@keyframes txtSha {\n  0% {\n    bottom: 0px;\n    text-shadow: 0px 12px #000; }\n  100% {\n    bottom: 8px;\n    text-shadow: 0px 12px #000; } }\n\n@-webkit-keyframes txtUp {\n  0% {\n    bottom: 0px; }\n  100% {\n    bottom: 12px; } }\n\n@keyframes txtUp {\n  0% {\n    bottom: 0px; }\n  100% {\n    bottom: 12px; } }\n\n@-webkit-keyframes txtDown {\n  0% {\n    top: 0px; }\n  100% {\n    top: 12px; } }\n\n@keyframes txtDown {\n  0% {\n    top: 0px; }\n  100% {\n    top: 12px; } }\n\n@-webkit-keyframes pulse {\n  0% {\n    word-spacing: 0px; }\n  50% {\n    word-spacing: 5px; }\n  100% {\n    word-spacing: 10px; } }\n\n@keyframes pulse {\n  0% {\n    transform: scale(1); }\n  50% {\n    transform: scale(1.1); }\n  100% {\n    transform: scale(1); } }\n\n.pulseTxt {\n  padding-left: 20px;\n  position: relative;\n  display: inline-block;\n  height: 24px;\n  text-decoration: none !important;\n  color: black;\n  padding-left: 5px; }\n  .pulseTxt:active {\n    color: white !important; }\n  .pulseTxt:hover {\n    -webkit-animation: pulse .25s ease-in-out forwards;\n    animation: pulse .25s ease-in-out forwards; }\n\n.displaceText {\n  padding-left: 20px;\n  position: relative;\n  display: inline-block;\n  height: 24px;\n  text-decoration: none !important;\n  color: black;\n  padding-left: 5px; }\n  .displaceText:active {\n    color: white !important; }\n\n.disShadow {\n  padding-left: 20px;\n  position: relative;\n  display: inline-block;\n  height: 24px;\n  text-decoration: none !important;\n  color: black;\n  padding-left: 5px; }\n  .disShadow:active {\n    color: white !important; }\n  .disShadow:hover {\n    -webkit-animation: txtUp .35s ease-in-out forwards;\n    animation: txtUp .35s ease-in-out forwards;\n    text-shadow: 0px 12px #000;\n    -webkit-transition: 1s ease;\n    -moz-transition: 1s ease;\n    -ms-transition: 1s ease;\n    transition: 1s ease; }\n\n.modalTitle {\n  color: black;\n  font-size: 32px;\n  weight: 500;\n  text-shadow: 0px 1px #FEE; }\n\n.pdfText {\n  padding: 10px 10px 20px 10px; }\n\n.addBold {\n  font-weight: bold; }\n\n.rdyScan {\n  padding-left: 280px;\n  margin-top: -66px;\n  font-weight: bold;\n  font-size: 24px;\n  text-shadow: .25px .25px #FFF;\n  vertical-align: middle; }\n\n.banner {\n  width: 100%;\n  display: inline-block;\n  padding: 0; }\n\n.divImg {\n  width: 26%;\n  margin: 0px 0px 0px 20px;\n  padding: 1px;\n  background: #0080ff;\n  border: 2px solid #0080ff;\n  border-radius: 2px;\n  display: inline-block;\n  vertical-align: top; }\n\n.pdfImg {\n  width: 70%;\n  margin: 0px 0px 0px 0px;\n  padding: 1px;\n  background: #0080ff;\n  border: 2px solid #0080ff;\n  border-radius: 2px;\n  display: inline-block;\n  vertical-align: top; }\n\n.pdfHelpImg {\n  width: 45%;\n  height: auto;\n  margin-left: 160px;\n  border: 2px solid #0080ff;\n  border-radius: 2px; }\n\n.helpFileImg {\n  width: 100%;\n  height: auto; }\n\n.helpFileImgSmall {\n  width: 35%;\n  height: auto; }\n\n.subMenuImg {\n  width: 100%;\n  height: auto;\n  display: inline-block;\n  padding: 0; }\n\n.resizeLogo {\n  width: 14%;\n  height: auto; }\n\n.headerLogo {\n  width: 194px;\n  height: 80px;\n  padding-left: 40px; }\n\n.imgModal {\n  width: 50%;\n  padding: 2px;\n  background: #0080ff;\n  border: 1px solid #0080ff;\n  border-radius: 2px;\n  display: inline-block;\n  vertical-align: top; }\n\n@-webkit-keyframes btnFade {\n  0% {\n    background: white;\n    color: red;\n    border: 1px solid black; }\n  50% {\n    background: white;\n    color: red;\n    border: 1px solid gray; }\n  100% {\n    background: red;\n    color: white;\n    border: 1px solid white; } }\n\n@keyframes btnFade {\n  0% {\n    background: white;\n    color: black;\n    border: 1px solid black; }\n  50% {\n    background: #0080ff;\n    color: white;\n    border: 1px solid gray; }\n  100% {\n    background: #0080ff;\n    color: white;\n    border: 1px solid white; } }\n\n@-webkit-keyframes prevFade {\n  0% {\n    background: #0080ff;\n    color: white;\n    border: 1px solid white; }\n  50% {\n    background: white;\n    color: black;\n    border: 1px solid gray; }\n  100% {\n    background: white;\n    color: black;\n    border: 1px solid black; } }\n\n@keyframes prevFade {\n  0% {\n    background: #0080ff;\n    color: white;\n    border: 1px solid white; }\n  50% {\n    background: white;\n    color: black;\n    border: 1px solid gray; }\n  100% {\n    background: white;\n    color: black;\n    border: 1px solid black; } }\n\n@-webkit-keyframes expand {\n  0% {\n    width: 15%; }\n  50% {\n    width: 35%; }\n  100% {\n    width: 45%; } }\n\n@keyframes expand {\n  0% {\n    width: 15%; }\n  50% {\n    width: 35%; }\n  100% {\n    width: 45%; } }\n\n.printBtn {\n  height: 38px;\n  width: 68px;\n  padding: 4px;\n  float: right;\n  color: white;\n  border-radius: 4px;\n  overflow: hidden;\n  background: #0080ff;\n  border: 1px solid white;\n  vertical-align: text-bottom; }\n  .printBtn:hover {\n    -webkit-animation: prevFade .35s ease-out forwards;\n    animation: prevFade .35s ease-out forwards; }\n\n.closeBtn {\n  height: 32px;\n  width: 32px;\n  padding: 4px;\n  margin: 1px;\n  float: right;\n  color: white;\n  border-radius: 4px;\n  overflow: hidden;\n  background: #0080ff;\n  border: 1px solid white;\n  vertical-align: text-bottom; }\n  .closeBtn:hover {\n    -webkit-animation: prevFade .35s ease-out forwards;\n    animation: prevFade .35s ease-out forwards; }\n\n.closeAllBtn {\n  height: 34px;\n  width: 50px;\n  padding: 4px;\n  float: right;\n  color: white;\n  border-radius: 4px;\n  overflow: hidden;\n  background: #0080ff;\n  border: 1px solid white;\n  vertical-align: top; }\n  .closeAllBtn:hover {\n    -webkit-animation: prevFade .35s ease-out forwards;\n    animation: prevFade .35s ease-out forwards; }\n\n.closeAllBtnHeader {\n  height: 34px;\n  width: 54px;\n  padding: 4px;\n  margin: -4px 10px 0px 0px;\n  display: inline-block;\n  float: right;\n  color: white;\n  border-radius: 4px;\n  overflow: hidden;\n  background: #0080ff;\n  border: 1px solid white;\n  vertical-align: top; }\n  .closeAllBtnHeader:hover {\n    -webkit-animation: prevFade .35s ease-out forwards;\n    animation: prevFade .35s ease-out forwards; }\n\n.aMenuButton {\n  height: 60px;\n  width: 150px;\n  font-size: 14px;\n  padding: 6px;\n  overflow: hidden;\n  background: white;\n  margin: 2px;\n  border: 1px solid black;\n  vertical-align: text-bottom;\n  border-radius: 2px;\n  weight: 600;\n  display: block; }\n  .aMenuButton:hover {\n    -webkit-animation: btnFade .35s ease-out forwards;\n    animation: btnFade .35s ease-out forwards; }\n\n.aPrevButton {\n  color: white;\n  height: 60px;\n  width: 150px;\n  font-size: 14px;\n  padding: 6px;\n  overflow: hidden;\n  background: #0080ff;\n  margin: 2px;\n  border: 1px solid white;\n  vertical-align: text-bottom;\n  border-radius: 2px;\n  display: block; }\n  .aPrevButton:hover {\n    -webkit-animation: prevFade .35s ease-out forwards;\n    animation: prevFade .35s ease-out forwards; }\n\n.createButton {\n  height: 60px;\n  width: 150px;\n  font-size: 14px;\n  padding: 6px;\n  overflow: hidden;\n  background: white;\n  margin: 2px;\n  border: 1px solid black;\n  vertical-align: text-bottom;\n  border-radius: 2px;\n  weight: 600;\n  display: block; }\n  .createButton:hover {\n    -webkit-animation: btnFade .35s ease-out forwards;\n    animation: btnFade .35s ease-out forwards; }\n\n.toggleMenu {\n  height: 26px;\n  width: 80px;\n  font-size: 10px;\n  padding: 2px;\n  overflow: hidden;\n  background: white;\n  margin: 1px;\n  border: 1px solid black;\n  vertical-align: text-bottom;\n  border-radius: 4px; }\n  .toggleMenu:hover {\n    -webkit-animation: btnFade .35s ease-out forwards;\n    animation: btnFade .35s ease-out forwards; }\n\n/**************************************************\n\tFORMS CSS\n***************************************************/\n.inputHlp {\n  width: 60%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #0080ff;\n  border-radius: 4px;\n  box-sizing: border-box; }\n\n.inputSearch {\n  width: 15%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #0080ff;\n  border-radius: 4px;\n  box-sizing: border-box; }\n  .inputSearch:hover {\n    -webkit-animation: expand .55s ease-out forwards;\n    animation: expand .55s ease-out forwards; }\n\n.txtInput {\n  width: 100%;\n  height: 250px;\n  padding: 12px 20px;\n  box-sizing: border-box;\n  border: 2px solid #0080ff;\n  border-radius: 4px;\n  background-color: #f8f8f8; }\n\n.txtSelect {\n  width: 30%;\n  padding: 10px 20px;\n  border: 1px solid #0080ff;\n  border-radius: 4px;\n  background-color: #FFF; }\n\n.subBtn {\n  height: 38px;\n  width: 68px;\n  padding: 4px;\n  color: white;\n  border-radius: 4px;\n  overflow: hidden;\n  background: #0080ff;\n  border: 1px solid white;\n  vertical-align: text-bottom; }\n  .subBtn:hover {\n    -webkit-animation: prevFade .35s ease-out forwards;\n    animation: prevFade .35s ease-out forwards; }\n", ""]);

// exports


/***/ }),
/* 195 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			memo[selector] = fn.call(this, selector);
		}

		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(197);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 197 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(10);
var invariant = __webpack_require__(0);
var ReactPropTypesSecret = __webpack_require__(38);

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _electron = __webpack_require__(35);

var _electron2 = _interopRequireDefault(_electron);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';
var logoImg = './app/img/lcLogo.PNG';

var Header = function (_Component) {
	_inherits(Header, _Component);

	function Header() {
		_classCallCheck(this, Header);

		return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
	}

	_createClass(Header, [{
		key: 'closeApp',
		value: function closeApp() {
			var window = _electron.remote.getCurrentWindow();
			window.close();
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				{ className: 'headDiv' },
				_react2.default.createElement('img', { className: 'headerLogo', src: imgPath + 'lcLogo.PNG' }),
				' ',
				_react2.default.createElement(
					'p',
					{ className: 'rdyScan' },
					_react2.default.createElement(
						'i',
						null,
						'READYSCAN SYSTEM'
					),
					'  ',
					_react2.default.createElement(
						'button',
						{ className: 'closeAllBtnHeader', onClick: this.closeApp },
						'EXIT'
					)
				)
			);
		}
	}]);

	return Header;
}(_react.Component);

exports.default = Header;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
			value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Options = __webpack_require__(201);

var _Options2 = _interopRequireDefault(_Options);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var buttonStyle = {
			height: '80px',
			width: '180px',
			fontSize: '44px',
			padding: '1px',
			overflow: 'hidden'
};

var Menu = function (_Component) {
			_inherits(Menu, _Component);

			function Menu(props) {
						_classCallCheck(this, Menu);

						var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

						_this.state = {
									Selected: props.menuName,
									name: '',
									togglePDF: 'off',
									toggleHLP: 'off',
									toggleDELETE: 'off',
									toggleEDIT: 'off',
									togglePDFEDIT: 'off'
						};
						return _this;
			}

			_createClass(Menu, [{
						key: 'componentWillMount',
						value: function componentWillMount() {

									// temps for menu options
									var pdfBtn = 'options';
									var temp = '';
									var tempTwo = '';
									var tempThree = '';
									var tempFour = '';
									var tempFive = '';

									var getOptions = this.props.data.filter(function (obj) {
												return pdfBtn === obj.menu;
									}).map(function (obj, idx) {
												temp = obj.pdf;
												tempTwo = obj.createhlp;
												tempThree = obj.deletehlp;
												tempFour = obj.edithlp;
												tempFive = obj.editpdf;
												return _react2.default.createElement(
															'div',
															{ key: idx },
															obj.pdf,
															obj.createhlp,
															obj.deletehlp,
															obj.edithlp,
															obj.editpdf
												);
									});

									this.setState({
												togglePDF: temp,
												toggleHLP: tempTwo,
												toggleDELETE: tempThree,
												toggleEDIT: tempFour,
												togglePDFEDIT: tempFive
									});
						}
			}, {
						key: 'componentWillReceiveProps',
						value: function componentWillReceiveProps(nextProps) {
									if (this.state.Selected !== nextProps.menuName) {
												this.state.Selected === nextProps.menuName;
									}
						}
			}, {
						key: 'handleChange',
						value: function handleChange(name) {
									this.setState({
												name: name
									});
						}
			}, {
						key: 'handleClick',
						value: function handleClick(e, num) {
									var _this2 = this;

									this.setState({
												name: num
									}, function () {
												var helpFileName = num;
												helpFileName = helpFileName.toLowerCase().replace(/\s+/g, '');
												//Cap the first letter in the name and add the rest of the name 
												helpFileName = helpFileName.charAt(0).toUpperCase() + helpFileName.substr(1);
												_this2.props.handleHelpChange(helpFileName);
									});
						}
			}, {
						key: 'handleMenuClick',
						value: function handleMenuClick(e, num, opt) {
									var _this3 = this;

									this.setState({
												name: num,
												Selected: opt
									}, function () {
												var helpFileName = num;
												//  let menuString = 'LumberOptions'
												helpFileName = helpFileName.toLowerCase().trim();
												//Cap the first letter in the name and add the rest of the name 
												helpFileName = helpFileName.charAt(0).toUpperCase() + helpFileName.substr(1);
												// this.props.handleMenuChange(menuString);
												_this3.props.handleHelpChange(helpFileName);
									});
						}
			}, {
						key: 'render',
						value: function render() {
									var _this4 = this;

									var MainMenu = function MainMenu() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'File Options'
																					//onClick={() => this.setState({ Selected: FileOptions })} 
																					, onClick: function onClick(e) {
																								return _this4.handleMenuClick(e, 'Fileopt', FileOptions);
																					}
																					//onClick={() => this.setState({ Selected: FileOptions })} 
																					, className: 'aMenuButton'
																		},
																		'FILE OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Setup Options',
																					onClick: function onClick(e) {
																								return _this4.handleMenuClick(e, 'Setupopt', SetUpOptions);
																					},
																					className: 'aMenuButton'
																		},
																		'SETUP OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Lumber Options',
																					onClick: function onClick(e) {
																								return _this4.handleMenuClick(e, 'Lumberopt', LumberOptions);
																					},
																					className: 'aMenuButton'
																		},
																		'LUMBER OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Shift Setup',
																					onClick: function onClick(e) {
																								return _this4.handleMenuClick(e, 'Shiftopt', ShiftSetUp);
																					},
																					className: 'aMenuButton'
																		},
																		'SHIFT SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View/Report',
																					onClick: function onClick(e) {
																								return _this4.handleMenuClick(e, 'Viewopt', ViewReportOptions);
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW AND REPORT OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Troubleshooting',
																					onClick: function onClick(e) {
																								return _this4.handleMenuClick(e, 'Troubleopt', TroubleShootingOptions);
																					},
																					className: 'aMenuButton'
																		},
																		'TROUBLESHOOTING'
															),
															_this4.state.togglePDF === 'on' ? _react2.default.createElement(
																		'button',
																		{
																					label: 'CreatePDF',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Createpdfopt');
																					},
																					className: 'createButton'
																		},
																		'CREATE PDF'
															) : '',
															_this4.state.toggleHLP === 'on' ? _react2.default.createElement(
																		'button',
																		{
																					label: 'Createhlpfile',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Createhlpfile');
																					},
																					className: 'createButton'
																		},
																		'CREATE HELP FILE'
															) : '',
															_this4.state.toggleDELETE === 'on' ? _react2.default.createElement(
																		'button',
																		{
																					label: 'Deletehlpfile',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Deletehlpfile');
																					},
																					className: 'createButton'
																		},
																		'DELETE HELP FILE'
															) : '',
															_this4.state.toggleEDIT === 'on' ? _react2.default.createElement(
																		'button',
																		{
																					label: 'Edithlpfile',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Edithlpfile');
																					},
																					className: 'createButton'
																		},
																		'EDIT HELP FILE'
															) : '',
															_this4.state.togglePDFEDIT === 'on' ? _react2.default.createElement(
																		'button',
																		{
																					label: 'Editpdffile',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Editpdffile');
																					},
																					className: 'createButton'
																		},
																		'EDIT PDF'
															) : '',
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Main Menu',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Mainmenu');
																					},
																					className: 'aPrevButton'
																		},
																		'MAIN MENU'
															)
												);
									};

									var FileOptions = function FileOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Load Default Values',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Load Default Values');
																					},
																					className: 'aMenuButton'
																		},
																		'LOAD DEFAULT VALUES'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Open Species Values From Disk',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Open Species Values From Disk');
																					},
																					className: 'aMenuButton'
																		},
																		'OPEN SPECIES VALUES FROM DISK'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Save Current Species Machine Values To Disk',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Save Current Species Machine Values To Disk');
																					},
																					className: 'aMenuButton'
																		},
																		'SAVE CURRENT SPECIES && MACHINE VALUES'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Recover Machine Values',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Recover Machine Values');
																					},
																					className: 'aMenuButton'
																		},
																		'RECOVER MACHINES VALUES'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: MainMenu });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var SetUpOptions = function SetUpOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Startup Options',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: StartUpOptions });
																					},
																					className: 'aMenuButton'
																		},
																		'STARTUP OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Runtime Options',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: RunTimeOptions });
																					},
																					className: 'aMenuButton'
																		},
																		'RUNTIME OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Scanner Setup',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: ScannerSetup });
																					},
																					className: 'aMenuButton'
																		},
																		'SCANNER SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Tally Parameters Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Tally Parameters Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'TALLY PARAMENTS SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Zero Tally and Downtime',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Zero Tally and Downtime');
																					},
																					className: 'aMenuButton'
																		},
																		'ZERO TALLY AND DOWNTIME'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Set View Options',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Set View Options');
																					},
																					className: 'aMenuButton'
																		},
																		'SET VIEW OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Saw Deviation Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Saw Deviation Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'SAW DEVIATION SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Adv Saw Deviation Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Adv Saw Deviation Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'ADV SAW DEVIATION SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: MainMenu });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var StartUpOptions = function StartUpOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Automatic Positioner Calibration',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Automatic Positioner Calibration');
																					},
																					className: 'aMenuButton'
																		},
																		'AUTOMATIC POSITIONER CALIBRATION'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Basic Positioner Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Basic Positioner Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'BASIC POSITIONER SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Positioner Movement Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Positioner Movement Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'POSITIONER MOVEMENT SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Console Mapping',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Console Mapping');
																					},
																					className: 'aMenuButton'
																		},
																		'CONSOLE MAPPING'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Spares Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Spares Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'SPARES SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'System Setup',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'System Setup');
																					}
																		},
																		'SYSTEM SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: SetUpOptions });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var RunTimeOptions = function RunTimeOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Kerfs',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Kerfs');
																					},
																					className: 'aMenuButton'
																		},
																		'KERFS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Limits',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Limits');
																					},
																					className: 'aMenuButton'
																		},
																		'LIMITS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Delays',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Delays');
																					},
																					className: 'aMenuButton'
																		},
																		'DELAYS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Oiler Adjustments',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Oiler Adjustments');
																					},
																					className: 'aMenuButton'
																		},
																		'OILER ADJUSTMENTS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Opening Face Parameters',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Opening Face Parameters');
																					},
																					className: 'aMenuButton'
																		},
																		'OPENING FACE PARAMETERS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Package Mode / Max Set Setup',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Package Mode / Max Set Setup');
																					}
																		},
																		'PACKAGE MODE / MAX SET SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Auto Saw Guide Setup',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Auto Saw Guide Setup');
																					}
																		},
																		'AUTO SAW GUIDE SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Timber Bind Adjustments',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Timber Bind Adjustments');
																					}
																		},
																		'TIMBER BIND ADJUSTMENTS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Encoder Pantograph Switch Setup',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Encoder Pantograph Switch Setup');
																					}
																		},
																		'ENCODER PANTOGRAPH SWITCH SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Slabber Setup',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Slabber Setup');
																					}
																		},
																		'SLABBER SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: SetUpOptions });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var ScannerSetup = function ScannerSetup() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Scanner Options',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Scanner Options');
																					},
																					className: 'aMenuButton'
																		},
																		'SCANNER OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Scanner Calibration Options',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Scanner Calibration Options');
																					},
																					className: 'aMenuButton'
																		},
																		'SCANNER CALIBRATION OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Auto Taper Rates',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Auto Taper Rates');
																					},
																					className: 'aMenuButton'
																		},
																		'AUTO TAPER RATES'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Scanner Setup Options',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Scanner Setup Options');
																					},
																					className: 'aMenuButton'
																		},
																		'SCANNER SETUP OPTIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Shapescan Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Shapescan Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'SHAPESCAN SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Filter Log Turner',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Filter Log Turner');
																					}
																		},
																		'FILTER LOG TURNER'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Head S/N Assignment',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Head S/N Assignment');
																					}
																		},
																		'HEAD S/N ASSIGNMENT'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Scanner Calibration',
																					className: 'aMenuButton',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Scanner Calibration');
																					}
																		},
																		'SCANNER CALIBRATION'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: SetUpOptions });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var LumberOptions = function LumberOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Species Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Species Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'SPECIES SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Board and Cant Sizes Setup',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Board and Cant Sizes Setup');
																					},
																					className: 'aMenuButton'
																		},
																		'BOARD AND CANT SIZES SETUP'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Cant Face Width Table',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Cant Face Width Table');
																					},
																					className: 'aMenuButton'
																		},
																		'CANT FACE WIDTH TABLE'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Optimizer Adjustments',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Optimizer Adjustments');
																					},
																					className: 'aMenuButton'
																		},
																		'OPTIMIZER ADJUSTEMENTS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: MainMenu });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var ShiftSetUp = function ShiftSetUp() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Add a Shift',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Add a Shift');
																					},
																					className: 'aMenuButton'
																		},
																		'ADD A SHIFT'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Delete a Shift',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Delete a Shift');
																					},
																					className: 'aMenuButton'
																		},
																		'DELETE A SHIFT'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Day Shift',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Day Shift');
																					},
																					className: 'aMenuButton'
																		},
																		'DAY SHIFT'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: MainMenu });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															),
															_react2.default.createElement('br', null)
												);
									};

									var ViewReportOptions = function ViewReportOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Downtime Summary',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Downtime Summary');
																					},
																					className: 'aMenuButton'
																		},
																		'DOWNTIME SUMMARY'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Individual Log Monitor',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Individual Log Monitor');
																					},
																					className: 'aMenuButton'
																		},
																		'INDIVIDUAL LOG MONITOR'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View Current Log',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'View Current Log');
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW CURRENT LOG'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Sawyers 2D Display',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Sawyers 2D Display');
																					},
																					className: 'aMenuButton'
																		},
																		'SAWYERS 2D DISPLAY'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Shift Tally Summary',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Shift Tally Summary');
																					},
																					className: 'aMenuButton'
																		},
																		'SHIFT TALLY SUMMARY'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Tally Reports',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Tally Reports');
																					},
																					className: 'aMenuButton'
																		},
																		'TALLY REPORTS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View Machine Adjustments',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'View Machine Adjustments');
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW MACHINE ADJUSTMENTS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Saw Deviation Monitor',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Saw Deviation Monitor');
																					},
																					className: 'aMenuButton'
																		},
																		'SAW DEVIATION MONITOR'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: MainMenu });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var TroubleShootingOptions = function TroubleShootingOptions() {
												return _react2.default.createElement(
															'div',
															null,
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Targets and Positions',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Targets and Positions');
																					},
																					className: 'aMenuButton'
																		},
																		'TARGET AND POSITIONS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Last Scan',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Last Scan');
																					},
																					className: 'aMenuButton'
																		},
																		'LAST SCAN'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Encoder Info Display',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Encoder Info Display');
																					},
																					className: 'aMenuButton'
																		},
																		'ENDCODER INFO DISPLAY'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Setworks History',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Setworks History');
																					},
																					className: 'aMenuButton'
																		},
																		'SETWORKS HISTORY'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Solution History',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Solution History');
																					},
																					className: 'aMenuButton'
																		},
																		'SOLUTION HISTORY'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'System Overview',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'System Overview');
																					},
																					className: 'aMenuButton'
																		},
																		'SYSTEM OVERVIEW'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View Voltages',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'View Voltages');
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW VOLTAGES'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View Pvalues Console',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'View Pvalues Console');
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW PVALUES CONSOLE'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View Setworks Diagnostics Console',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'View Setworks Diagnostics Console');
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW SETWORKS DIAGNOSTICS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'View Scanner Diagnostics',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'View Scanner Diagnostics');
																					},
																					className: 'aMenuButton'
																		},
																		'VIEW SCANNER DIAGNOSTICS'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Positioner Graph',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Positioner Graph');
																					},
																					className: 'aMenuButton'
																		},
																		'POSITIONER GRAPH'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Last Scan Log Line',
																					onClick: function onClick(e) {
																								return _this4.handleClick(e, 'Last Scan Log Line');
																					},
																					className: 'aMenuButton'
																		},
																		'LAST SCAN LOG LINE'
															),
															_react2.default.createElement(
																		'button',
																		{
																					label: 'Previous Menu',
																					onClick: function onClick() {
																								return _this4.setState({ Selected: MainMenu });
																					},
																					className: 'aPrevButton'
																		},
																		'PREVIOUS MENU'
															)
												);
									};

									var Selected = this.state.Selected;


									return _react2.default.createElement(
												'div',
												null,
												_react2.default.createElement(
															'div',
															{ className: 'menuButtons' },
															Selected === 'MainMenu' ? _react2.default.createElement(MainMenu, null) : _react2.default.createElement(Selected, null),
															Selected === 'FileOptions' ? _react2.default.createElement(FileOptions, null) : '',
															Selected === 'SetUpOptions' ? _react2.default.createElement(SetUpOptions, null) : '',
															Selected === 'StartUpOptions' ? _react2.default.createElement(StartUpOptions, null) : '',
															Selected === 'ScannerSetup' ? _react2.default.createElement(ScannerSetup, null) : '',
															Selected === 'RunTimeOptions' ? _react2.default.createElement(RunTimeOptions, null) : '',
															Selected === 'LumberOptions' ? _react2.default.createElement(LumberOptions, null) : '',
															Selected === 'ShiftSetUp' ? _react2.default.createElement(ShiftSetUp, null) : '',
															Selected === 'ViewReportOptions' ? _react2.default.createElement(ViewReportOptions, null) : '',
															Selected === 'TroubleShootingOptions' ? _react2.default.createElement(TroubleShootingOptions, null) : ''
												)
									);
						}
			}]);

			return Menu;
}(_react.Component);

Menu.propTypes = {
			handleHelpChange: _propTypes2.default.func,
			handleMenuClick: _propTypes2.default.func,
			handleMenuChange: _propTypes2.default.func,
			name: _propTypes2.default.string,
			menuName: _propTypes2.default.string,
			data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

Menu.defaultProps = {
			data: _Options2.default
};

exports.default = Menu;

/*
	////////////////
    //////  ADD A HELP FILE BUTTON TO A SUBMENU
	////////////////

	1. Copy the button code below.
	2. Paste the button code above into the correct sub menu.
	    Ex.  If you have created a new dialog under Shift Setup sub menu...
	            a.) copy the button the code
	            b.) scroll up to the 'const ShiftSetUp = () => (' function
	            c.) place the button inside of the <div> tag next to the other buttons.  
	3. Change the label and other occurences of the label name to the name of the button you wish to create.  (This MUST be the dialog title given to the dialog from ReadyScan software)
	4. Save the file
	5. run this command in CMD or Powershell from the home directory of DevHelpSystem -  "npm run build"
	6. The button can now be used and tested with "npm start" - if you like the new change run "npm run package-r" to create a new release build for the help file system

	// HELP FILE BUTTON CODE

                <button 
		            label="Positioner Graph"
					onClick={(e) => this.handleClick(e, 'Positioner Graph')}
		            className="aMenuButton"
		        >POSITIONER GRAPH</button>


   ///////////////
   /////   ADD A MENU
   //////////////

				const NewMenu = () => (
					<div>
					</div>
				)


*/

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports = [{"menu":"options","pdf":"on","createhlp":"off","deletehlp":"off","edithlp":"on","editpdf":"on"}]

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _HelpFileRender = __webpack_require__(203);

var _HelpFileRender2 = _interopRequireDefault(_HelpFileRender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HelpFile = function (_Component) {
	_inherits(HelpFile, _Component);

	function HelpFile() {
		_classCallCheck(this, HelpFile);

		return _possibleConstructorReturn(this, (HelpFile.__proto__ || Object.getPrototypeOf(HelpFile)).apply(this, arguments));
	}

	_createClass(HelpFile, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_HelpFileRender2.default, { name: this.props.name })
			);
		}
	}]);

	return HelpFile;
}(_react.Component);

HelpFile.propTypes = {
	name: _propTypes2.default.string
};

HelpFile.defaultProps = {
	name: ''
};

exports.default = HelpFile;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _reactModal = __webpack_require__(204);

var _reactModal2 = _interopRequireDefault(_reactModal);

var _ReadyPDF = __webpack_require__(211);

var _ReadyPDF2 = _interopRequireDefault(_ReadyPDF);

var _electron = __webpack_require__(35);

var _electron2 = _interopRequireDefault(_electron);

var _SectionFive = __webpack_require__(218);

var _SectionFive2 = _interopRequireDefault(_SectionFive);

var _SectionSix = __webpack_require__(219);

var _SectionSix2 = _interopRequireDefault(_SectionSix);

var _AddHelpFile = __webpack_require__(220);

var _AddHelpFile2 = _interopRequireDefault(_AddHelpFile);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

var _PDFData = __webpack_require__(92);

var _PDFData2 = _interopRequireDefault(_PDFData);

var _DeleteHelpFile = __webpack_require__(221);

var _DeleteHelpFile2 = _interopRequireDefault(_DeleteHelpFile);

var _EditHelpFile = __webpack_require__(222);

var _EditHelpFile2 = _interopRequireDefault(_EditHelpFile);

var _EditPDF = __webpack_require__(223);

var _EditPDF2 = _interopRequireDefault(_EditPDF);

var _MainRender = __webpack_require__(224);

var _MainRender2 = _interopRequireDefault(_MainRender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Modal dynamic positioning
var customStyles = {
	content: {
		top: '40%',
		left: '40%',
		right: 'auto',
		bottom: 'auto',
		marginRight: '-40%',
		border: '2px solid #0080ff',
		transform: 'translate(-40%, -40%)'
	}
};

var imgPath = './app/img/';
var logoImg = './app/img/lcLogo.PNG';

var upperStyle = {
	textTransform: 'uppercase'
};

var HelpFileContainer = function (_Component) {
	_inherits(HelpFileContainer, _Component);

	function HelpFileContainer() {
		_classCallCheck(this, HelpFileContainer);

		var _this = _possibleConstructorReturn(this, (HelpFileContainer.__proto__ || Object.getPrototypeOf(HelpFileContainer)).call(this));

		_this.state = {
			modalIsOpen: false,
			massData: ''
		};

		_this.openModal = _this.openModal.bind(_this);
		_this.afterOpenModal = _this.afterOpenModal.bind(_this);
		_this.closeModal = _this.closeModal.bind(_this);
		return _this;
	}

	_createClass(HelpFileContainer, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			var pdfData = this.props.dataTwo;
			var hlpData = this.props.data;

			var allData = pdfData.concat(hlpData);

			function compare(a, b) {
				if (a.idNum < b.idNum) {
					return -1;
				}
				if (a.idNum > b.idNum) {
					return 1;
				}
				return 0;
			}

			allData.sort(compare);

			this.setState({
				massData: allData
			});
		}
	}, {
		key: 'openModal',
		value: function openModal() {
			this.setState({ modalIsOpen: true });
		}
	}, {
		key: 'afterOpenModal',
		value: function afterOpenModal() {
			// references are now sync'd and can be accessed.
			this.subtitle.style.color = '#f00';
		}
	}, {
		key: 'closeModal',
		value: function closeModal() {
			this.setState({ modalIsOpen: false });
		}
	}, {
		key: 'printPage',
		value: function printPage() {
			window.print();
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var getRawHTML = function getRawHTML(html) {
				return {
					__html: html
				};
			};

			var renderHelpFile = this.props.data.filter(function (obj) {
				return _this2.props.name === obj.name;
			}).map(function (obj, idx) {
				return _react2.default.createElement(
					'div',
					{ key: idx, className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						obj.video === 'n' ? _react2.default.createElement(
							'div',
							null,
							_react2.default.createElement(
								'button',
								{ className: 'printBtn', onClick: _this2.printPage },
								'PRINT SCREEN'
							)
						) : _react2.default.createElement(
							'div',
							null,
							_react2.default.createElement(
								'button',
								{ className: 'printBtn', onClick: _this2.printPage },
								'PRINT SCREEN'
							),
							_react2.default.createElement(
								'button',
								{ className: 'printBtn', onClick: _this2.openModal },
								'VIEW VIDEO'
							)
						),
						_react2.default.createElement(
							'h2',
							{ style: upperStyle },
							' ',
							obj.title,
							' '
						),
						_react2.default.createElement(
							'b',
							null,
							'Path:'
						),
						' ',
						obj.path,
						' ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) }),
						_react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.more) }),
						_react2.default.createElement('br', null)
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: '' + obj.image, className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									obj.title,
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: '' + obj.image, className: 'helpFileImg' })
								)
							)
						)
					)
				);
			});

			var renderPDF = this.props.data.map(function (obj, idx) {
				return _react2.default.createElement(
					'article',
					{ className: 'artPDF' },
					_react2.default.createElement(
						'div',
						{ className: 'headDiv' },
						_react2.default.createElement('img', { className: 'headerLogo', src: '' + logoImg }),
						' ',
						_react2.default.createElement(
							'p',
							{ className: 'rdyScan' },
							_react2.default.createElement(
								'i',
								null,
								'READYSCAN 2 SYSTEM'
							)
						)
					),
					_react2.default.createElement(
						'div',
						{ key: idx },
						_react2.default.createElement(
							'div',
							{ className: 'displayLineBreak' },
							_react2.default.createElement(
								'h2',
								{ style: upperStyle },
								' ',
								obj.title,
								' '
							),
							_react2.default.createElement(
								'b',
								null,
								'Path:'
							),
							' ',
							obj.path,
							' ',
							_react2.default.createElement('br', null),
							_react2.default.createElement('br', null),
							_react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) })
						),
						_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('img', { src: '' + obj.image, className: 'pdfHelpImg' })
						),
						_react2.default.createElement(
							'div',
							{ className: 'sectionDiv' },
							obj.section,
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement('br', null)
					)
				);
			});

			var renderMASS = this.state.massData.map(function (obj, idx) {
				return _react2.default.createElement(
					'article',
					{ className: 'artPDF' },
					_react2.default.createElement(
						'div',
						{ className: 'headDiv' },
						_react2.default.createElement('img', { className: 'headerLogo', src: '' + logoImg }),
						' ',
						_react2.default.createElement(
							'p',
							{ className: 'rdyScan' },
							_react2.default.createElement(
								'i',
								null,
								'READYSCAN 2 SYSTEM'
							)
						)
					),
					_react2.default.createElement(
						'div',
						{ classname: 'sectionDiv' },
						_react2.default.createElement(
							'p',
							null,
							'fixed'
						)
					),
					_react2.default.createElement(
						'div',
						{ key: idx },
						_react2.default.createElement(
							'div',
							{ className: 'displayLineBreak' },
							obj.type === 'section' ? _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) })
							) : _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'h2',
									{ style: upperStyle },
									' ',
									obj.title,
									' '
								),
								_react2.default.createElement(
									'b',
									null,
									'Path:'
								),
								' ',
								obj.path,
								' ',
								_react2.default.createElement('br', null),
								_react2.default.createElement('br', null),
								_react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) }),
								_react2.default.createElement(
									'div',
									null,
									_react2.default.createElement('img', { src: '' + obj.image, className: 'pdfHelpImg' })
								)
							)
						)
					)
				);
			});

			var renderSections = this.props.data.map(function (obj, idx) {
				return _react2.default.createElement(
					'article',
					{ className: 'artPDF' },
					_react2.default.createElement(
						'div',
						{ className: 'headDiv' },
						_react2.default.createElement('img', { className: 'headerLogo', src: '' + logoImg }),
						' ',
						_react2.default.createElement(
							'p',
							{ className: 'rdyScan' },
							_react2.default.createElement(
								'i',
								null,
								'READYSCAN 2 SYSTEM'
							)
						)
					),
					_react2.default.createElement(
						'div',
						{ key: idx },
						_react2.default.createElement(
							'div',
							{ className: 'displayLineBreak' },
							_react2.default.createElement(
								'h2',
								{ style: upperStyle },
								' ',
								obj.title,
								' '
							),
							_react2.default.createElement(
								'b',
								null,
								'Path:'
							),
							' ',
							obj.path,
							' ',
							_react2.default.createElement('br', null),
							_react2.default.createElement('br', null),
							_react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) })
						),
						_react2.default.createElement(
							'div',
							{ className: 'sectionDiv' },
							obj.section,
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement('br', null)
					)
				);
			});

			var Mainmenu = function Mainmenu() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(_MainRender2.default, null)
				);
			};

			var Fileopt = function Fileopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						_react2.default.createElement(
							'div',
							{ className: 'headerDiv' },
							_react2.default.createElement(
								'h2',
								null,
								'FILE OPTIONS'
							),
							' ',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Path: '
						),
						' Main Menu / File Options ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'b',
							null,
							'NOTE:'
						),
						' YOU SHOULD NEVER PRESS ',
						_react2.default.createElement(
							'b',
							null,
							'LOAD DEFAULT VALUES'
						),
						' on your ReadyScan 2 system unless instructed by an LCI employee.'
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: imgPath + 'hlpSetup.PNG', className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									'FILE OPTIONS',
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: imgPath + 'fileOptions.PNG', className: 'helpFileImg' })
								)
							)
						)
					)
				);
			};

			var Setupopt = function Setupopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						_react2.default.createElement(
							'div',
							{ className: 'headerDiv' },
							_react2.default.createElement(
								'h2',
								null,
								'SETUP OPTIONS'
							),
							' ',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Path: '
						),
						' Main Menu / Setup Options ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'In setup optins you will find three additional sub menus, Startup Options, Runtime Options and Scanner Options.  Selecting these choices will provide you with additonal menu options to choose from.'
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: imgPath + 'hlpSetup.PNG', className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									'SETUP OPTIONS',
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: imgPath + 'hlpSetup.PNG', className: 'helpFileImg' })
								)
							)
						)
					)
				);
			};

			var Lumberopt = function Lumberopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						_react2.default.createElement(
							'div',
							{ className: 'headerDiv' },
							_react2.default.createElement(
								'h2',
								null,
								'LUMBER OPTIONS'
							),
							' ',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Path: '
						),
						' Main Menu / Lumber Options ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'Inside here you will find various ways to customize your boards.'
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: imgPath + 'hlpLumberScreen.PNG', className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									'LUMBER OPTIONS',
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: imgPath + 'hlpLumberScreen.PNG', className: 'helpFileImg' })
								)
							)
						)
					)
				);
			};

			var Shiftopt = function Shiftopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						_react2.default.createElement(
							'div',
							{ className: 'headerDiv' },
							_react2.default.createElement(
								'h2',
								null,
								'SHIFT SETUP'
							),
							' ',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Path: '
						),
						' Main Menu / Shift Setup ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'This menu will allow you to customize your shifts.'
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: imgPath + 'hlpShiftScreen.PNG', className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									'SHIFT SETUP',
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: imgPath + 'hlpShiftScreen.PNG', className: 'helpFileImg' })
								)
							)
						)
					)
				);
			};

			var Viewopt = function Viewopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						_react2.default.createElement(
							'div',
							{ className: 'headerDiv' },
							_react2.default.createElement(
								'h2',
								null,
								'VIEW AND REPORT OPTIONS'
							),
							' ',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Path: '
						),
						' Main Menu / View and Report Options ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'View various reports and information.'
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: imgPath + 'hlpViewReportScreen.PNG', className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									'VIEW AND REPORT OPTIONS',
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: imgPath + 'hlpViewReportScreen.PNG', className: 'helpFileImg' })
								)
							)
						)
					)
				);
			};

			var Troubleopt = function Troubleopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'div',
						{ className: 'displayLineBreak' },
						_react2.default.createElement(
							'div',
							{ className: 'headerDiv' },
							_react2.default.createElement(
								'h2',
								null,
								'TROUBLESHOOTING'
							),
							' ',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Path: '
						),
						' Main Menu / View and Report Options ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'Troubleshoot dialogs and menu options within here.'
					),
					_react2.default.createElement(
						'div',
						{ className: 'divImg' },
						_react2.default.createElement('img', { src: imgPath + 'hlpTroubleScreen.PNG', className: 'helpFileImg', onClick: _this2.openModal }),
						_react2.default.createElement(
							_reactModal2.default,
							{
								isOpen: _this2.state.modalIsOpen,
								onAfterOpen: _this2.afterOpenModal,
								onRequestClose: _this2.closeModal,
								style: customStyles,
								contentLabel: 'Lewis Controls'
							},
							_react2.default.createElement(
								'center',
								null,
								_react2.default.createElement(
									'p',
									{ style: upperStyle, className: 'modalTitle' },
									'TROUBLESHOOTING',
									_react2.default.createElement(
										'button',
										{ className: 'closeBtn', onClick: _this2.closeModal },
										'x'
									)
								),
								_react2.default.createElement(
									'div',
									{ className: 'imgModal' },
									_react2.default.createElement('img', { src: imgPath + 'hlpTroubleScreen.PNG', className: 'helpFileImg' })
								)
							)
						)
					)
				);
			};

			var GrabSection = function GrabSection() {
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_SectionFive2.default, null)
				);
			};

			var Createpdfopt = function Createpdfopt() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(
						'button',
						{ className: 'printBtn', onClick: _this2.printPage },
						'PRINT SCREEN'
					),
					renderMASS
				);
			};

			var Createhlpfile = function Createhlpfile() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(_AddHelpFile2.default, null)
				);
			};

			var Deletehlpfile = function Deletehlpfile() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(_DeleteHelpFile2.default, null)
				);
			};

			var Edithlpfile = function Edithlpfile() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(_EditHelpFile2.default, null)
				);
			};

			var Editpdffile = function Editpdffile() {
				return _react2.default.createElement(
					'div',
					{ className: 'fadingDiv' },
					_react2.default.createElement(_EditPDF2.default, null)
				);
			};

			return _react2.default.createElement(
				'div',
				{ className: 'fadingDiv' },
				this.props.name === 'Mainmenu' ? _react2.default.createElement(Mainmenu, null) : renderHelpFile,
				this.props.name === 'Fileopt' ? _react2.default.createElement(Fileopt, null) : '',
				this.props.name === 'Setupopt' ? _react2.default.createElement(Setupopt, null) : '',
				this.props.name === 'Lumberopt' ? _react2.default.createElement(Lumberopt, null) : '',
				this.props.name === 'Shiftopt' ? _react2.default.createElement(Shiftopt, null) : '',
				this.props.name === 'Viewopt' ? _react2.default.createElement(Viewopt, null) : '',
				this.props.name === 'Troubleopt' ? _react2.default.createElement(Troubleopt, null) : '',
				this.props.name === 'Kneeopt' ? _react2.default.createElement(Kneeopt, null) : '',
				this.props.name === 'Createpdfopt' ? _react2.default.createElement(Createpdfopt, null) : '',
				this.props.name === 'Createhlpfile' ? _react2.default.createElement(Createhlpfile, null) : '',
				this.props.name === 'Deletehlpfile' ? _react2.default.createElement(Deletehlpfile, null) : '',
				this.props.name === 'Edithlpfile' ? _react2.default.createElement(Edithlpfile, null) : '',
				this.props.name === 'Editpdffile' ? _react2.default.createElement(Editpdffile, null) : ''
			);
		}
	}]);

	return HelpFileContainer;
}(_react.Component);

var HelpFileRender = function (_Component2) {
	_inherits(HelpFileRender, _Component2);

	function HelpFileRender() {
		_classCallCheck(this, HelpFileRender);

		return _possibleConstructorReturn(this, (HelpFileRender.__proto__ || Object.getPrototypeOf(HelpFileRender)).apply(this, arguments));
	}

	_createClass(HelpFileRender, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(HelpFileContainer, { data: this.props.data, dataTwo: this.props.dataTwo, name: this.props.name })
			);
		}
	}]);

	return HelpFileRender;
}(_react.Component);

HelpFileRender.propTypes = {
	data: _propTypes2.default.arrayOf(_propTypes2.default.object),
	dataTwo: _propTypes2.default.arrayOf(_propTypes2.default.object),
	name: _propTypes2.default.string
};

HelpFileRender.defaultProps = {
	data: _HelpFileData2.default,
	dataTwo: _PDFData2.default,
	name: ''
};

exports.default = HelpFileRender;

/***
	//<div className="sectionDiv">
										{obj.section}<br />
									//</div>

	const Createpdfopt = () => {
			return (
				<div className="fadingDiv">
					<button className="printBtn" onClick={this.printPage}>PRINT SCREEN</button>
					<ReadyPDF />
						{renderPDF}
					<SectionFive />
					<SectionSix />	
				</div>
			)
		};

componentWillMount() {
		 let pdfData = fs.readFileSync('./app/data/PDFData.json');
		 let hlpData = fs.readFileSync('./app/data/HelpFileData.json');
         
         let allData = pdfData + helpData;

         console.log(allData);
	}

***/

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Modal = __webpack_require__(205);

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Modal2.default;
module.exports = exports["default"];

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bodyOpenClassName = exports.portalClassName = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(62);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ModalPortal = __webpack_require__(206);

var _ModalPortal2 = _interopRequireDefault(_ModalPortal);

var _ariaAppHider = __webpack_require__(89);

var ariaAppHider = _interopRequireWildcard(_ariaAppHider);

var _safeHTMLElement = __webpack_require__(91);

var _safeHTMLElement2 = _interopRequireDefault(_safeHTMLElement);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var portalClassName = exports.portalClassName = "ReactModalPortal";
var bodyOpenClassName = exports.bodyOpenClassName = "ReactModal__Body--open";

var isReact16 = _reactDom2.default.createPortal !== undefined;
var createPortal = isReact16 ? _reactDom2.default.createPortal : _reactDom2.default.unstable_renderSubtreeIntoContainer;

function getParentElement(parentSelector) {
  return parentSelector();
}

var Modal = function (_Component) {
  _inherits(Modal, _Component);

  function Modal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Modal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal.__proto__ || Object.getPrototypeOf(Modal)).call.apply(_ref, [this].concat(args))), _this), _this.removePortal = function () {
      !isReact16 && _reactDom2.default.unmountComponentAtNode(_this.node);
      var parent = getParentElement(_this.props.parentSelector);
      parent.removeChild(_this.node);
    }, _this.portalRef = function (ref) {
      _this.portal = ref;
    }, _this.renderPortal = function (props) {
      var portal = createPortal(_this, _react2.default.createElement(_ModalPortal2.default, _extends({ defaultStyles: Modal.defaultStyles }, props)), _this.node);
      _this.portalRef(portal);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!_safeHTMLElement.canUseDOM) return;

      if (!isReact16) {
        this.node = document.createElement("div");
      }
      this.node.className = this.props.portalClassName;

      var parent = getParentElement(this.props.parentSelector);
      parent.appendChild(this.node);

      !isReact16 && this.renderPortal(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      if (!_safeHTMLElement.canUseDOM) return;
      var isOpen = newProps.isOpen;
      // Stop unnecessary renders if modal is remaining closed

      if (!this.props.isOpen && !isOpen) return;

      var currentParent = getParentElement(this.props.parentSelector);
      var newParent = getParentElement(newProps.parentSelector);

      if (newParent !== currentParent) {
        currentParent.removeChild(this.node);
        newParent.appendChild(this.node);
      }

      !isReact16 && this.renderPortal(newProps);
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(newProps) {
      if (!_safeHTMLElement.canUseDOM) return;
      if (newProps.portalClassName !== this.props.portalClassName) {
        this.node.className = newProps.portalClassName;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!_safeHTMLElement.canUseDOM || !this.node || !this.portal) return;

      var state = this.portal.state;
      var now = Date.now();
      var closesAt = state.isOpen && this.props.closeTimeoutMS && (state.closesAt || now + this.props.closeTimeoutMS);

      if (closesAt) {
        if (!state.beforeClose) {
          this.portal.closeWithTimeout();
        }

        setTimeout(this.removePortal, closesAt - now);
      } else {
        this.removePortal();
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (!_safeHTMLElement.canUseDOM || !isReact16) {
        return null;
      }

      if (!this.node && isReact16) {
        this.node = document.createElement("div");
      }

      return createPortal(_react2.default.createElement(_ModalPortal2.default, _extends({
        ref: this.portalRef,
        defaultStyles: Modal.defaultStyles
      }, this.props)), this.node);
    }
  }], [{
    key: "setAppElement",
    value: function setAppElement(element) {
      ariaAppHider.setElement(element);
    }

    /* eslint-disable react/no-unused-prop-types */

    /* eslint-enable react/no-unused-prop-types */

  }]);

  return Modal;
}(_react.Component);

Modal.propTypes = {
  isOpen: _propTypes2.default.bool.isRequired,
  style: _propTypes2.default.shape({
    content: _propTypes2.default.object,
    overlay: _propTypes2.default.object
  }),
  portalClassName: _propTypes2.default.string,
  bodyOpenClassName: _propTypes2.default.string,
  className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    base: _propTypes2.default.string.isRequired,
    afterOpen: _propTypes2.default.string.isRequired,
    beforeClose: _propTypes2.default.string.isRequired
  })]),
  overlayClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    base: _propTypes2.default.string.isRequired,
    afterOpen: _propTypes2.default.string.isRequired,
    beforeClose: _propTypes2.default.string.isRequired
  })]),
  appElement: _propTypes2.default.instanceOf(_safeHTMLElement2.default),
  onAfterOpen: _propTypes2.default.func,
  onRequestClose: _propTypes2.default.func,
  closeTimeoutMS: _propTypes2.default.number,
  ariaHideApp: _propTypes2.default.bool,
  shouldFocusAfterRender: _propTypes2.default.bool,
  shouldCloseOnOverlayClick: _propTypes2.default.bool,
  shouldReturnFocusAfterClose: _propTypes2.default.bool,
  parentSelector: _propTypes2.default.func,
  aria: _propTypes2.default.object,
  role: _propTypes2.default.string,
  contentLabel: _propTypes2.default.string,
  shouldCloseOnEsc: _propTypes2.default.bool
};
Modal.defaultProps = {
  isOpen: false,
  portalClassName: portalClassName,
  bodyOpenClassName: bodyOpenClassName,
  ariaHideApp: true,
  closeTimeoutMS: 0,
  shouldFocusAfterRender: true,
  shouldCloseOnEsc: true,
  shouldCloseOnOverlayClick: true,
  shouldReturnFocusAfterClose: true,
  parentSelector: function parentSelector() {
    return document.body;
  }
};
Modal.defaultStyles = {
  overlay: {
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(255, 255, 255, 0.75)"
  },
  content: {
    position: "absolute",
    top: "40px",
    left: "40px",
    right: "40px",
    bottom: "40px",
    border: "1px solid #ccc",
    background: "#fff",
    overflow: "auto",
    WebkitOverflowScrolling: "touch",
    borderRadius: "4px",
    outline: "none",
    padding: "20px"
  }
};
exports.default = Modal;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _focusManager = __webpack_require__(207);

var focusManager = _interopRequireWildcard(_focusManager);

var _scopeTab = __webpack_require__(208);

var _scopeTab2 = _interopRequireDefault(_scopeTab);

var _ariaAppHider = __webpack_require__(89);

var ariaAppHider = _interopRequireWildcard(_ariaAppHider);

var _refCount = __webpack_require__(90);

var refCount = _interopRequireWildcard(_refCount);

var _bodyClassList = __webpack_require__(209);

var bodyClassList = _interopRequireWildcard(_bodyClassList);

var _safeHTMLElement = __webpack_require__(91);

var _safeHTMLElement2 = _interopRequireDefault(_safeHTMLElement);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// so that our CSS is statically analyzable
var CLASS_NAMES = {
  overlay: "ReactModal__Overlay",
  content: "ReactModal__Content"
};

var TAB_KEY = 9;
var ESC_KEY = 27;

var ModalPortal = function (_Component) {
  _inherits(ModalPortal, _Component);

  function ModalPortal(props) {
    _classCallCheck(this, ModalPortal);

    var _this = _possibleConstructorReturn(this, (ModalPortal.__proto__ || Object.getPrototypeOf(ModalPortal)).call(this, props));

    _this.setFocusAfterRender = function (focus) {
      _this.focusAfterRender = _this.props.shouldFocusAfterRender && focus;
    };

    _this.setOverlayRef = function (overlay) {
      _this.overlay = overlay;
    };

    _this.setContentRef = function (content) {
      _this.content = content;
    };

    _this.afterClose = function () {
      // Remove body class
      bodyClassList.remove(_this.props.bodyOpenClassName);

      if (_this.shouldReturnFocus()) {
        focusManager.returnFocus();
        focusManager.teardownScopedFocus();
      }
    };

    _this.shouldReturnFocus = function () {
      // Don't restore focus to the element that had focus prior to
      // the modal's display if:
      // 1. Focus was never shifted to the modal in the first place
      //    (shouldFocusAfterRender = false)
      // 2. Explicit direction to not restore focus
      return _this.props.shouldFocusAfterRender || _this.props.shouldReturnFocusAfterClose;
    };

    _this.open = function () {
      _this.beforeOpen();
      if (_this.state.afterOpen && _this.state.beforeClose) {
        clearTimeout(_this.closeTimer);
        _this.setState({ beforeClose: false });
      } else {
        if (_this.shouldReturnFocus()) {
          focusManager.setupScopedFocus(_this.node);
          focusManager.markForFocusLater();
        }

        _this.setState({ isOpen: true }, function () {
          _this.setState({ afterOpen: true });

          if (_this.props.isOpen && _this.props.onAfterOpen) {
            _this.props.onAfterOpen();
          }
        });
      }
    };

    _this.close = function () {
      _this.beforeClose();
      if (_this.props.closeTimeoutMS > 0) {
        _this.closeWithTimeout();
      } else {
        _this.closeWithoutTimeout();
      }
    };

    _this.focusContent = function () {
      return _this.content && !_this.contentHasFocus() && _this.content.focus();
    };

    _this.closeWithTimeout = function () {
      var closesAt = Date.now() + _this.props.closeTimeoutMS;
      _this.setState({ beforeClose: true, closesAt: closesAt }, function () {
        _this.closeTimer = setTimeout(_this.closeWithoutTimeout, _this.state.closesAt - Date.now());
      });
    };

    _this.closeWithoutTimeout = function () {
      _this.setState({
        beforeClose: false,
        isOpen: false,
        afterOpen: false,
        closesAt: null
      }, _this.afterClose);
    };

    _this.handleKeyDown = function (event) {
      if (event.keyCode === TAB_KEY) {
        (0, _scopeTab2.default)(_this.content, event);
      }

      if (_this.props.shouldCloseOnEsc && event.keyCode === ESC_KEY) {
        event.preventDefault();
        _this.requestClose(event);
      }
    };

    _this.handleOverlayOnClick = function (event) {
      if (_this.shouldClose === null) {
        _this.shouldClose = true;
      }

      if (_this.shouldClose && _this.props.shouldCloseOnOverlayClick) {
        if (_this.ownerHandlesClose()) {
          _this.requestClose(event);
        } else {
          _this.focusContent();
        }
      }
      _this.shouldClose = null;
      _this.moveFromContentToOverlay = null;
    };

    _this.handleOverlayOnMouseUp = function () {
      if (_this.moveFromContentToOverlay === null) {
        _this.shouldClose = false;
      }
    };

    _this.handleContentOnMouseUp = function () {
      _this.shouldClose = false;
    };

    _this.handleOverlayOnMouseDown = function () {
      _this.moveFromContentToOverlay = false;
    };

    _this.handleContentOnClick = function () {
      _this.shouldClose = false;
    };

    _this.handleContentOnMouseDown = function () {
      _this.shouldClose = false;
      _this.moveFromContentToOverlay = false;
    };

    _this.requestClose = function (event) {
      return _this.ownerHandlesClose() && _this.props.onRequestClose(event);
    };

    _this.ownerHandlesClose = function () {
      return _this.props.onRequestClose;
    };

    _this.shouldBeClosed = function () {
      return !_this.state.isOpen && !_this.state.beforeClose;
    };

    _this.contentHasFocus = function () {
      return document.activeElement === _this.content || _this.content.contains(document.activeElement);
    };

    _this.buildClassName = function (which, additional) {
      var classNames = (typeof additional === "undefined" ? "undefined" : _typeof(additional)) === "object" ? additional : {
        base: CLASS_NAMES[which],
        afterOpen: CLASS_NAMES[which] + "--after-open",
        beforeClose: CLASS_NAMES[which] + "--before-close"
      };
      var className = classNames.base;
      if (_this.state.afterOpen) {
        className = className + " " + classNames.afterOpen;
      }
      if (_this.state.beforeClose) {
        className = className + " " + classNames.beforeClose;
      }
      return typeof additional === "string" && additional ? className + " " + additional : className;
    };

    _this.ariaAttributes = function (items) {
      return Object.keys(items).reduce(function (acc, name) {
        acc["aria-" + name] = items[name];
        return acc;
      }, {});
    };

    _this.state = {
      afterOpen: false,
      beforeClose: false
    };

    _this.shouldClose = null;
    _this.moveFromContentToOverlay = null;
    return _this;
  }

  _createClass(ModalPortal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Focus needs to be set when mounting and already open
      if (this.props.isOpen) {
        this.setFocusAfterRender(true);
        this.open();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      if (process.env.NODE_ENV !== "production") {
        if (newProps.bodyOpenClassName !== this.props.bodyOpenClassName) {
          // eslint-disable-next-line no-console
          console.warn('React-Modal: "bodyOpenClassName" prop has been modified. ' + "This may cause unexpected behavior when multiple modals are open.");
        }
      }
      // Focus only needs to be set once when the modal is being opened
      if (!this.props.isOpen && newProps.isOpen) {
        this.setFocusAfterRender(true);
        this.open();
      } else if (this.props.isOpen && !newProps.isOpen) {
        this.close();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.focusAfterRender) {
        this.focusContent();
        this.setFocusAfterRender(false);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Remove body class
      bodyClassList.remove(this.props.bodyOpenClassName);
      this.beforeClose();
      clearTimeout(this.closeTimer);
    }
  }, {
    key: "beforeOpen",
    value: function beforeOpen() {
      var _props = this.props,
          appElement = _props.appElement,
          ariaHideApp = _props.ariaHideApp,
          bodyOpenClassName = _props.bodyOpenClassName;
      // Add body class

      bodyClassList.add(bodyOpenClassName);
      // Add aria-hidden to appElement
      if (ariaHideApp) {
        ariaAppHider.hide(appElement);
      }
    }
  }, {
    key: "beforeClose",
    value: function beforeClose() {
      var _props2 = this.props,
          appElement = _props2.appElement,
          ariaHideApp = _props2.ariaHideApp;
      // Reset aria-hidden attribute if all modals have been removed

      if (ariaHideApp && refCount.totalCount() < 1) {
        ariaAppHider.show(appElement);
      }
    }

    // Don't steal focus from inner elements

  }, {
    key: "render",
    value: function render() {
      var _props3 = this.props,
          className = _props3.className,
          overlayClassName = _props3.overlayClassName,
          defaultStyles = _props3.defaultStyles;

      var contentStyles = className ? {} : defaultStyles.content;
      var overlayStyles = overlayClassName ? {} : defaultStyles.overlay;

      return this.shouldBeClosed() ? null : _react2.default.createElement(
        "div",
        {
          ref: this.setOverlayRef,
          className: this.buildClassName("overlay", overlayClassName),
          style: _extends({}, overlayStyles, this.props.style.overlay),
          onClick: this.handleOverlayOnClick,
          onMouseDown: this.handleOverlayOnMouseDown,
          onMouseUp: this.handleOverlayOnMouseUp
        },
        _react2.default.createElement(
          "div",
          _extends({
            ref: this.setContentRef,
            style: _extends({}, contentStyles, this.props.style.content),
            className: this.buildClassName("content", className),
            tabIndex: "-1",
            onKeyDown: this.handleKeyDown,
            onMouseDown: this.handleContentOnMouseDown,
            onMouseUp: this.handleContentOnMouseUp,
            onClick: this.handleContentOnClick,
            role: this.props.role,
            "aria-label": this.props.contentLabel
          }, this.ariaAttributes(this.props.aria || {})),
          this.props.children
        )
      );
    }
  }]);

  return ModalPortal;
}(_react.Component);

ModalPortal.defaultProps = {
  style: {
    overlay: {},
    content: {}
  }
};
ModalPortal.propTypes = {
  isOpen: _propTypes2.default.bool.isRequired,
  defaultStyles: _propTypes2.default.shape({
    content: _propTypes2.default.object,
    overlay: _propTypes2.default.object
  }),
  style: _propTypes2.default.shape({
    content: _propTypes2.default.object,
    overlay: _propTypes2.default.object
  }),
  className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  overlayClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  bodyOpenClassName: _propTypes2.default.string,
  ariaHideApp: _propTypes2.default.bool,
  appElement: _propTypes2.default.instanceOf(_safeHTMLElement2.default),
  onAfterOpen: _propTypes2.default.func,
  onRequestClose: _propTypes2.default.func,
  closeTimeoutMS: _propTypes2.default.number,
  shouldFocusAfterRender: _propTypes2.default.bool,
  shouldCloseOnOverlayClick: _propTypes2.default.bool,
  shouldReturnFocusAfterClose: _propTypes2.default.bool,
  role: _propTypes2.default.string,
  contentLabel: _propTypes2.default.string,
  aria: _propTypes2.default.object,
  children: _propTypes2.default.node,
  shouldCloseOnEsc: _propTypes2.default.bool
};
exports.default = ModalPortal;
module.exports = exports["default"];

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleBlur = handleBlur;
exports.handleFocus = handleFocus;
exports.markForFocusLater = markForFocusLater;
exports.returnFocus = returnFocus;
exports.setupScopedFocus = setupScopedFocus;
exports.teardownScopedFocus = teardownScopedFocus;

var _tabbable = __webpack_require__(88);

var _tabbable2 = _interopRequireDefault(_tabbable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var focusLaterElements = [];
var modalElement = null;
var needToFocus = false;

function handleBlur() {
  needToFocus = true;
}

function handleFocus() {
  if (needToFocus) {
    needToFocus = false;
    if (!modalElement) {
      return;
    }
    // need to see how jQuery shims document.on('focusin') so we don't need the
    // setTimeout, firefox doesn't support focusin, if it did, we could focus
    // the element outside of a setTimeout. Side-effect of this implementation
    // is that the document.body gets focus, and then we focus our element right
    // after, seems fine.
    setTimeout(function () {
      if (modalElement.contains(document.activeElement)) {
        return;
      }
      var el = (0, _tabbable2.default)(modalElement)[0] || modalElement;
      el.focus();
    }, 0);
  }
}

function markForFocusLater() {
  focusLaterElements.push(document.activeElement);
}

/* eslint-disable no-console */
function returnFocus() {
  var toFocus = null;
  try {
    toFocus = focusLaterElements.pop();
    toFocus.focus();
    return;
  } catch (e) {
    console.warn(["You tried to return focus to", toFocus, "but it is not in the DOM anymore"].join(" "));
  }
}
/* eslint-enable no-console */

function setupScopedFocus(element) {
  modalElement = element;

  if (window.addEventListener) {
    window.addEventListener("blur", handleBlur, false);
    document.addEventListener("focus", handleFocus, true);
  } else {
    window.attachEvent("onBlur", handleBlur);
    document.attachEvent("onFocus", handleFocus);
  }
}

function teardownScopedFocus() {
  modalElement = null;

  if (window.addEventListener) {
    window.removeEventListener("blur", handleBlur);
    document.removeEventListener("focus", handleFocus);
  } else {
    window.detachEvent("onBlur", handleBlur);
    document.detachEvent("onFocus", handleFocus);
  }
}

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = scopeTab;

var _tabbable = __webpack_require__(88);

var _tabbable2 = _interopRequireDefault(_tabbable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scopeTab(node, event) {
  var tabbable = (0, _tabbable2.default)(node);
  if (!tabbable.length) {
    event.preventDefault();
    return;
  }
  var finalTabbable = tabbable[event.shiftKey ? 0 : tabbable.length - 1];
  var leavingFinalTabbable = finalTabbable === document.activeElement ||
  // handle immediate shift+tab after opening with mouse
  node === document.activeElement;
  if (!leavingFinalTabbable) return;
  event.preventDefault();
  var target = tabbable[event.shiftKey ? tabbable.length - 1 : 0];
  target.focus();
}
module.exports = exports["default"];

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = add;
exports.remove = remove;

var _refCount = __webpack_require__(90);

var refCount = _interopRequireWildcard(_refCount);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function add(bodyClass) {
  // Increment class(es) on refCount tracker and add class(es) to body
  bodyClass.split(" ").map(refCount.add).forEach(function (className) {
    return document.body.classList.add(className);
  });
}

function remove(bodyClass) {
  var classListMap = refCount.get();
  // Decrement class(es) from the refCount tracker
  // and remove unused class(es) from body
  bodyClass.split(" ").map(refCount.remove).filter(function (className) {
    return classListMap[className] === 0;
  }).forEach(function (className) {
    return document.body.classList.remove(className);
  });
}

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/* global define */

(function () {
	'use strict';

	var canUseDOM = !!(
		typeof window !== 'undefined' &&
		window.document &&
		window.document.createElement
	);

	var ExecutionEnvironment = {

		canUseDOM: canUseDOM,

		canUseWorkers: typeof Worker !== 'undefined',

		canUseEventListeners:
			canUseDOM && !!(window.addEventListener || window.attachEvent),

		canUseViewport: canUseDOM && !!window.screen

	};

	if (true) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return ExecutionEnvironment;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = ExecutionEnvironment;
	} else {
		window.ExecutionEnvironment = ExecutionEnvironment;
	}

}());


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _Important = __webpack_require__(212);

var _Important2 = _interopRequireDefault(_Important);

var _Safety = __webpack_require__(213);

var _Safety2 = _interopRequireDefault(_Safety);

var _TableContents = __webpack_require__(214);

var _TableContents2 = _interopRequireDefault(_TableContents);

var _SystemInstall = __webpack_require__(215);

var _SystemInstall2 = _interopRequireDefault(_SystemInstall);

var _SystemStartUp = __webpack_require__(216);

var _SystemStartUp2 = _interopRequireDefault(_SystemStartUp);

var _SectionThree = __webpack_require__(217);

var _SectionThree2 = _interopRequireDefault(_SectionThree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var pdfImg = './app/img/pdfTitleImg.PNG';

var ReadyPDF = function (_Component) {
	_inherits(ReadyPDF, _Component);

	function ReadyPDF() {
		_classCallCheck(this, ReadyPDF);

		return _possibleConstructorReturn(this, (ReadyPDF.__proto__ || Object.getPrototypeOf(ReadyPDF)).apply(this, arguments));
	}

	_createClass(ReadyPDF, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				null,
				_react2.default.createElement(
					'article',
					{ className: 'addPageBreakAfter' },
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { className: 'pdfImg', src: '' + pdfImg }),
						_react2.default.createElement(
							'p',
							{ className: 'pdfText' },
							_react2.default.createElement(
								'span',
								{ className: 'addBold' },
								'Lewis Controls, Inc. ',
								_react2.default.createElement('br', null),
								'260 N 26 Ave. / PO Box 526 ',
								_react2.default.createElement('br', null),
								'Cornelius, OR 97113 ',
								_react2.default.createElement('br', null),
								'503-648-9119 ',
								_react2.default.createElement('br', null),
								'www.lewiscontrols.com',
								_react2.default.createElement('br', null)
							)
						)
					)
				),
				_react2.default.createElement(
					'article',
					{ className: 'addPageBreakAfter' },
					_react2.default.createElement(
						'p',
						{ className: 'pdfText' },
						'Thank you for purchasing your Lewis Controls Scanning Carriage Setworks control system. The goal of this manual is to provide valuable information that will allow you to take full advantage of the features and functions the system has to offer.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'The goals of this manual are:',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'1. To outline the carriage Setworks & scanner system installation.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'2. To provide the information tools needed to adjust all of the system parameters to the best advantage of the mill.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'3. To provide the information tools needed to effectively maintain LCI carriage Setworks and scanner systems.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'This manual will, in some cases, discuss system components or features that are not implemented on your Setworks. This is a result of customizing each of our systems to the needs of the mill where it is to be used. We hope this does not create confusion.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'NOTE:'
							)
						),
						_react2.default.createElement('br', null),
						'As with most manuals, we recommend you read this one from cover-to-cover before operating the system. Also, be aware that operations and practices vary from region to region. Menus may vary slightly from those depicted and various modes may be unused in your application and turned off in the software.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'Once again, thank you for your business and we are confident that the system will provide you with years of excellent service. If you have any questions or comments regarding the information presented in this manual, please feel free to call or write.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'center',
							null,
							_react2.default.createElement(
								'span',
								{ className: 'addBold' },
								'LEWIS CONTROLS, INC.',
								_react2.default.createElement('br', null),
								'P.O. BOX 526 CORNELIUS, OR 97113',
								_react2.default.createElement('br', null),
								'(503) 648-9119 FAX: (503) 693-1110',
								_react2.default.createElement('br', null),
								'sales@lewiscontrols.com',
								_react2.default.createElement('br', null)
							)
						)
					),
					_react2.default.createElement(_Important2.default, null),
					_react2.default.createElement(_Safety2.default, null),
					_react2.default.createElement(_TableContents2.default, null),
					_react2.default.createElement(_SystemInstall2.default, null),
					_react2.default.createElement(_SystemStartUp2.default, null),
					_react2.default.createElement(_SectionThree2.default, null)
				)
			);
		}
	}]);

	return ReadyPDF;
}(_react.Component);

exports.default = ReadyPDF;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Important = function (_Component) {
	_inherits(Important, _Component);

	function Important() {
		_classCallCheck(this, Important);

		return _possibleConstructorReturn(this, (Important.__proto__ || Object.getPrototypeOf(Important)).apply(this, arguments));
	}

	_createClass(Important, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'p',
						{ className: 'pdfText' },
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'IMPORTANT NOTICE'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'ALL SAWMILL EQUIPMENT AND CONTROLS SHOULD BE INSTALLED, OPERATED AND SERVICED BY TRAINED PERSONNEL ONLY. SUCH EQUIPMENT IS POTENTIALLY HAZARDOUS, AND EXTREME CAUTION MUST ALWAYS BE EXERCISED. IT IS THE OWNER\u2019S RESPONSIBILITY TO USE ONLY TRAINED PERSONNEL.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'MOST ITEMS SUPPLIED BY THE MANUFACTURERS ARE NOT COMPLETE, READY-TO-OPERATE MACHINES. PROPER INSTALLATION, ALIGNMENT AND PRE-OPERATION CHECKS MUST BE COMPLETED.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'WHEN INSTALLING THIS EQUIPMENT REFER TO APPLICABLE NATIONAL SAFETY STANDARDS, OSHA REGULATIONS, NATIONAL ELECTRICAL CODES, AND APPLICABLE STATE AND LOCAL CODES. FOR YOUR CONVENIENCE, A LISTING OF \'PRIMARY APPLICABLE SAFETY STANDARDS FOR SAWMILL MACHINERY\' IS ENCLOSED (2-60A).',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'EQUIPMENT SHOULD BE INSTALLED BY QUALIFIED AND PROPERLY LICENSED AND TRAINED PERSONNEL AND IF REQUIRED, INSPECTED BY AUTHORIZED STATE AND/OR LOCAL AUTHORITIES BEFORE START-UP.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'READY SCAN',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'IMPORTANT NOTICE'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'THE MANUFACTURER IS CONCERNED ABOUT SAFETY AND INCORPORATES VARIOUS SAFETY FEATURES IN THE CONTROL SYSTEM. HOWEVER, NONE OF THESE ARE TRUE LOCKOUT DEVICES. IT IS THE OWNER\u2019S RESPONSIBILITY TO SEE THAT LOCKOUT DEVICES AND/OR OTHER DEVICES THAT MEET OR EXCEED OSHA AND/OR STATE LOCAL REQUIREMENTS ARE OBTAINED, INSTALLED AND USED PROPERLY. OWNERS ARE ALSO RESPONSIBLE FOR ESTABLISHING OPERATION, LOCKOUT/TAGOUT, AND SERVICING PROCEDURES FOR THE CONTROL SYSTEM AS WELL AS TRAINING PERSONNEL.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'SPECIFIC WARNINGS ARE HIGH-LIGHTED ON THE VARIOUS PAGES OF THIS MANUAL. THESE SHOULD BE READ AND UNDERSTOOD BY OPERATING PERSONNEL PRIOR TO START-UP OF THE CONTROL SYSTEM. ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null)
					)
				)
			);
		}
	}]);

	return Important;
}(_react.Component);

exports.default = Important;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Safety = function (_Component) {
	_inherits(Safety, _Component);

	function Safety() {
		_classCallCheck(this, Safety);

		return _possibleConstructorReturn(this, (Safety.__proto__ || Object.getPrototypeOf(Safety)).apply(this, arguments));
	}

	_createClass(Safety, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'p',
						{ className: 'pdfText' },
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'PRIMARY APPLICABLE SAFETY STANDARDS FOR SAWMILL MACHINERY'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'I. \xA0\xA0OSHA STANDARDS'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'Federal Register Volume 37 - Number 202 Part II - Title 29 - Labor Chapter XVII, Part 1910. Particularly, but not limited to, subpart 1910.265 \'Sawmills\', and 1910.147 \'The Control of Hazardous Energy Source (Lockout/Tagout)\'. For later revisions refer to subsequent volumes of the Federal Register and codifications thereof in the Code of Federal Regulations, Title 29 - Labor.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'II. \xA0\xA0AMERICAN NATIONAL STANDARDS'
						),
						' ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'Many Sections from above were adopted from the American National Standards and published by American National Standards Institute, Inc. 1430 Broadway, New York, New York 10018. Some of the applicable standards are.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'1. \xA0\xA0ANSI Z244.1-1982 \xA0\xA0\xA0 Personnel Protection Lockout/Tagout of Energy Source',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'2. \xA0\xA0ANSI 02.1 -1983 \xA0\xA0\xA0\xA0 Safety Requirements for Sawmills',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'3. \xA0\xA0ANSI B15.1-1984 \xA0\xA0\xA0\xA0 Safety Standards for Mechanical Power Transmissions Apparatus',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'4. \xA0\xA0ANSI B20.1-1987 \xA0\xA0\xA0\xA0 Safety Standards for Conveyers Related Equipment',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'5. \xA0\xA0ANSI A-12.1-1973 \xA0\xA0\xA0\xA0 Floor and Wall Openings, Railings and Toeboards',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'6. \xA0\xA0ANSI A58.1-1982  \xA0\xA0\xA0\xA0 Minimum Design Loads in Buildings Stairs Fixed Industrial',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'7. \xA0\xA0ANSI A64.1- 1968 \xA0\xA0\xA0\xA0\xA0 Stairs Fixed Industrial',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'III. \xA0\xA0NATIONAL ELECTRICAL CODE'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'Published annually by the National Fire Protection Association, 470 Atlantic Ave., Boston, Massachusetts 02210',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0(2-60A) Revised 2-12-91',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'IV. \xA0\xA0Laser Safety \u2013 Class 3B Lasers'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'IEC 60825-1, Am. 2 ',
						_react2.default.createElement('br', null),
						'and IEC 60601-2-22 \xA0\xA0\xA0 Final Guidance for Industry and FDA',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null)
					)
				)
			);
		}
	}]);

	return Safety;
}(_react.Component);

exports.default = Safety;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableContents = function (_Component) {
	_inherits(TableContents, _Component);

	function TableContents() {
		_classCallCheck(this, TableContents);

		return _possibleConstructorReturn(this, (TableContents.__proto__ || Object.getPrototypeOf(TableContents)).apply(this, arguments));
	}

	_createClass(TableContents, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'p',
						{ className: 'pdfText' },
						_react2.default.createElement(
							'center',
							null,
							_react2.default.createElement(
								'span',
								{ className: 'addBold' },
								'TABLE OF CONTENTS'
							),
							_react2.default.createElement('br', null),
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section I. System Installation'
						),
						' ',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Introduction'
						),
						_react2.default.createElement('br', null),
						'\xA0A-1\xA0\xA0 What is supplied by Lewis Controls',
						_react2.default.createElement('br', null),
						'\xA0A-2\xA0\xA0 Mill or Others\u2019 Responsibilities',
						_react2.default.createElement('br', null),
						'\xA0A-3\xA0\xA0 Site Preparation',
						_react2.default.createElement('br', null),
						'\xA0A-4\xA0\xA0 System Drawing Package',
						_react2.default.createElement('br', null),
						'\xA0B \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Sawyers Cab and Computer Installation '
						),
						_react2.default.createElement('br', null),
						'\xA0B-1\xA0\xA0 Mill Responsibilities',
						_react2.default.createElement('br', null),
						'\xA0B-2\xA0\xA0 General Recommendations',
						_react2.default.createElement('br', null),
						'\xA0C \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Carriage Electrical'
						),
						_react2.default.createElement('br', null),
						'\xA0C-1\xA0\xA0 Mill Responsibilities',
						_react2.default.createElement('br', null),
						'\xA0C-2\xA0\xA0 Electrical Noise',
						_react2.default.createElement('br', null),
						'\xA0C-3\xA0\xA0 Carriage Electrical Detail',
						_react2.default.createElement('br', null),
						'\xA0D \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Setworks Hydraulics'
						),
						_react2.default.createElement('br', null),
						'\xA0D-1\xA0\xA0 Mill Responsibilities   ',
						_react2.default.createElement('br', null),
						'\xA0D-2\xA0\xA0 Setworks Plumbing Schedule',
						_react2.default.createElement('br', null),
						'\xA0D-3\xA0\xA0 Hydraulic Recommendations',
						_react2.default.createElement('br', null),
						'\xA0D-4\xA0\xA0 Hydraulic System Startup',
						_react2.default.createElement('br', null),
						'\xA0E \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Scanner \u2013 3D Shape Scan Systems'
						),
						_react2.default.createElement('br', null),
						'\xA0E-1\xA0\xA0  Mill Responsibilities',
						_react2.default.createElement('br', null),
						'\xA0E-2\xA0\xA0 Scanner Support Structure and Wire Duct',
						_react2.default.createElement('br', null),
						'\xA0E-3\xA0\xA0 Scan Bar Location',
						_react2.default.createElement('br', null),
						'\xA0F \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Scanner \u2013 Photocell Systems'
						),
						_react2.default.createElement('br', null),
						'\xA0F-1\xA0\xA0 Mill Responsibilities',
						_react2.default.createElement('br', null),
						'\xA0F-2\xA0\xA0 Photocell Scanner Assembly Installation',
						_react2.default.createElement('br', null),
						'\xA0F-3\xA0\xA0 Scan Line Location',
						_react2.default.createElement('br', null),
						'\xA0F-4\xA0\xA0 Locating the Lower Scanner Housing',
						_react2.default.createElement('br', null),
						' ',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section II. System Start-up & Adjustments'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A \xA0\xA0 System Start-up',
						_react2.default.createElement('br', null),
						'\xA0B \xA0\xA0 Initial Power-up',
						_react2.default.createElement('br', null),
						'\xA0C \xA0\xA0 Hydraulics System Adjustments ',
						_react2.default.createElement('br', null),
						'\xA0D \xA0\xA0 Hydraulic Cushion Adjustment',
						_react2.default.createElement('br', null),
						' ',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section III. Scanning and Solution Options'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Scanning'
						),
						_react2.default.createElement('br', null),
						'\xA0A-1 \xA0\xA0 Shape Scan Systems ',
						_react2.default.createElement('br', null),
						'\xA0A-2 \xA0\xA0 Photocell Systems',
						_react2.default.createElement('br', null),
						'\xA0A-3 \xA0\xA0 Scan Set Disable',
						_react2.default.createElement('br', null),
						'\xA0B \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							' Solution Options'
						),
						_react2.default.createElement('br', null),
						'\xA0B-1 \xA0\xA0 Cant Matrix',
						_react2.default.createElement('br', null),
						'\xA0B-2 \xA0\xA0 Opening Faces',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section IV. LCI Carriage Menus'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'\xA0A ',
							_react2.default.createElement(
								'i',
								null,
								'LCI Main Menu / Sub Menu Directory'
							)
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'\xA0B  ',
							_react2.default.createElement(
								'i',
								null,
								'System Adjustments and Terminal Use'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0B-1 \xA0\xA0Main Menu',
						_react2.default.createElement('br', null),
						'\xA0B-2 \xA0\xA0Main Menu / File Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Load Default Values',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Open Species Values from Disk',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. Save Current Species & Machine Values to Disk',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0d. Recover Machine Values',
						_react2.default.createElement('br', null),
						'\xA0B-3 \xA0\xA0Main Menu / Setup Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Startup Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA01. Automatic Positioner calibration ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA02. Basic Positioner Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03. Positioner Movement Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA04. Console Mapping',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA05. Spares Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA06. System Setup 7. Password Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Runtime Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA01. Kerfs',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA02. Limits',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03. Delays',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA04. Oiler Adjustments',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA05. Opening Face Parameters',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA06. Package Mode / Max Set Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA07. Timber Bind Adjustments',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA08. Slabber Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA09. Auto Saw Guide',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. Scanner Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA01. Scanner Options ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA02. L4 Scanner Setup ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03. Photocell Setup ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA04. Auto Taper Rates ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA05. Shapescan Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0d. Tally Parameters Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0e. Zero Tally and Downtime',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0f. Set View Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0g. Saw Deviation Setup',
						_react2.default.createElement('br', null),
						'\xA0B-4 \xA0\xA0 Main Menu / Lumber Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Species Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Board and Cant Sizes Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. Cant Face Width Table',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0d. Patterns',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0e. Optimizer Adjustments',
						_react2.default.createElement('br', null),
						'\xA0B-5 \xA0\xA0 Main Menu / Shift Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Add a Shift',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Delete a Shift',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. Shift Name',
						_react2.default.createElement('br', null),
						'\xA0B-6 \xA0\xA0 Main Menu / View and Report Options',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Downtime Summary',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Individual Log Monitor',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. View Current Log',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0d. Sawyer\u2019s 2D Display',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0e. Shift Tally Summary',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0f. Tally Report Setup',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0g. View Machine Adjustments',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0h. Saw Deviation Monitor',
						_react2.default.createElement('br', null),
						'\xA0B-7 \xA0\xA0 Main Menu / Troubleshooting',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Targets and Positions',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Last Scan',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. Encoder Info Display',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0d. Setworks History',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0e. Solution History',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0f. System Overview',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0g. View Voltages',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0h. View Pvalues Console',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0i. View Setworks Diagnostics Console',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0j. View L4 Diagnostics',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0k. Positioner Graph',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0l. Last Scan Log Line',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section V. System Overview and Sawyer\u2019s Console'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A ',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Systems and subsystems interface'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0A-1 Windows User Interface',
						_react2.default.createElement('br', null),
						'\xA0A-2 Sawyer Display subsystem interface',
						_react2.default.createElement('br', null),
						'\xA0A-3 Carriage positioning detection switches',
						_react2.default.createElement('br', null),
						'\xA0A-4 The Scanner subsystem interface',
						_react2.default.createElement('br', null),
						'\xA0A-5 The Sawyer Console interface',
						_react2.default.createElement('br', null),
						'\xA0A-6 The Computer to PLC interface',
						_react2.default.createElement('br', null),
						'\xA0A-7 Shaft encoder interface',
						_react2.default.createElement('br', null),
						'\xA0A-8 Linear Positioner interface',
						_react2.default.createElement('br', null),
						'\xA0A-9 Programmable Logic Controller',
						_react2.default.createElement('br', null),
						'\xA0B ',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Faces and Axes'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0C ',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Button Light Description'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0C-1 \xA0Group 1',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Control Power, Setworks Lock Out, Set Enable, Scan Set Disable, ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Hydraulic Pressure, Hydraulics Enabled, Set Achieved, Stack Computed, ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Knees Tapered, Console Status lights, Saw Deviation.',
						_react2.default.createElement('br', null),
						'\xA0C-2 \xA0Group 2',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Saw Guide Auto, Saw Guide Up/Down, Slabber Auto, Slabber Sets, ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Slabber Retract, Slab Attach, Individual Knee Controls, ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Cancel Taper,Limit Override, Skew Left, Skew Right',
						_react2.default.createElement('br', null),
						'\xA0C-3 \xA0Group 3',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Scanner On, Taper (Auto, Full, Half, None), Calibrate, Down Time',
						_react2.default.createElement('br', null),
						'\xA0C-4 \xA0Group 4',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Species, Bark On, Grade Face, Package Modes (Single, Package, Resaw), ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Face 1F - 1B - 2F - 2B, Patterns, Boards, Cants, Multiples, ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Fill Mask, Default Set, Cancel Entries.',
						_react2.default.createElement('br', null),
						'\xA0C-5 \xA0Group 5',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Species, Multiples, Patterns, Cants, Boards',
						_react2.default.createElement('br', null),
						'\xA0C-6 \xA0Group 6',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Backset, Jog Reverse, Jog Forward, Set, Compute, Dogs Up/Dn, ',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0Dogs In/Out, Other handle functions, Log Loader, Other Foot Switches',
						_react2.default.createElement('br', null),
						'\xA0D \xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Species'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0E \xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Set and Compute'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0F \xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'The Fill Mask & Fill With Last Board Parameter Stack Entry'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0G \xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Stack Entry'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0H \xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Sawyers Tutorial'
							),
							' '
						),
						'(How to Saw a Log)',
						_react2.default.createElement('br', null),
						'\xA0H-1 \xA0Simple Dimension Sawing',
						_react2.default.createElement('br', null),
						'\xA0H-2 \xA0Grade Sawing',
						_react2.default.createElement('br', null),
						'\xA0I \xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Scanner Calibration Procedure'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0I-1  \xA0Laser 3D Scanner Calibration Procedure',
						_react2.default.createElement('br', null),
						'\xA0I-2  \xA0Photocell Scanner Calibration Procedure',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section VI. System Maintenance Tools'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Hardware Maintenance Tools'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0A-1 \xA0\xA0System Back Panel Terminator Boards',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0a. Digital I/O Terminator',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0b. Transducer Input Terminator',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0c. Analog Output Terminator',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0d. Shaft Encoder Input Terminator',
						_react2.default.createElement('br', null),
						'\xA0\xA0\xA0\xA0e. Analog Input Terminator',
						_react2.default.createElement('br', null),
						'\xA0A-2 \xA0\xA0Hydraulic System Pressure Gauges',
						_react2.default.createElement('br', null),
						'\xA0A-3 \xA0\xA0Hydraulic Control and Status mini-console',
						_react2.default.createElement('br', null),
						'\xA0A-4 \xA0\xA0Hydraulic Test Box (Battery Box) ',
						_react2.default.createElement('br', null),
						'\xA0B \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Software Maintenance Tools'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0C \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Drawing Package'
							)
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section VII. - Troubleshooting'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'The Troubleshooting Starting Point'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0B \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Peripheral power supplies'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0C \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Subsystem component failures'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0C-1 \xA0\xA0Digital Inputs',
						_react2.default.createElement('br', null),
						'\xA0C-2 \xA0\xA0Digital Outputs',
						_react2.default.createElement('br', null),
						'\xA0C-3 \xA0\xA0Linear Positioner Problems',
						_react2.default.createElement('br', null),
						'\xA0C-4 \xA0\xA0Hydraulic Power system',
						_react2.default.createElement('br', null),
						'\xA0C-5 \xA0\xA0Linear Positioner Valves',
						_react2.default.createElement('br', null),
						'\xA0C-6 \xA0\xA0Temposonic Linear Position Probe',
						_react2.default.createElement('br', null),
						'\xA0C-7 \xA0\xA0Positioner Problem Identification',
						_react2.default.createElement('br', null),
						'\xA0C-8 \xA0\xA0Shaft encoder problems',
						_react2.default.createElement('br', null),
						'\xA0D \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Mill reported problems and solutions'
							)
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							'Section VIII - Maintenance Notes'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						'\xA0A \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'The Setworks hydraulic system'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0A-1 \xA0\xA0Hydraulic cleanliness',
						_react2.default.createElement('br', null),
						'\xA0A-2 \xA0\xA0Hydraulic filters',
						_react2.default.createElement('br', null),
						'\xA0A-3 \xA0\xA0Hydraulic Oil',
						_react2.default.createElement('br', null),
						'\xA0B \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Component Handling'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0B-1 \xA0\xA0Wiring',
						_react2.default.createElement('br', null),
						'\xA0B-2 \xA0\xA0Circuit Boards',
						_react2.default.createElement('br', null),
						'\xA0C \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Intermittent Problems'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0D \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'Installing the Spare Black Box'
							)
						),
						_react2.default.createElement('br', null),
						'\xA0D-1 \xA0\xA0Determine that a replacement black box is needed',
						_react2.default.createElement('br', null),
						'\xA0D-2 \xA0\xA0Save Pvalues to Compact Flash',
						_react2.default.createElement('br', null),
						'\xA0D-3 \xA0\xA0Shut Down and Power off the black box',
						_react2.default.createElement('br', null),
						'\xA0D-4 \xA0\xA0Unplug all input leads',
						_react2.default.createElement('br', null),
						'\xA0D-5 \xA0\xA0Remove black box from back panel',
						_react2.default.createElement('br', null),
						'\xA0D-6 \xA0\xA0Place spare black box on back panel',
						_react2.default.createElement('br', null),
						'\xA0D-7 \xA0\xA0Plug in all leads',
						_react2.default.createElement('br', null),
						'\xA0D-8 \xA0\xA0Power on',
						_react2.default.createElement('br', null),
						'\xA0D-9 \xA0\xA0Restore values from flash',
						_react2.default.createElement('br', null),
						'\xA0D-10 \xA0\xA0Test and run',
						_react2.default.createElement('br', null),
						'\xA0E \xA0\xA0',
						_react2.default.createElement(
							'span',
							{ className: 'addBold' },
							_react2.default.createElement(
								'i',
								null,
								'LCI Service'
							)
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null)
					)
				)
			);
		}
	}]);

	return TableContents;
}(_react.Component);

exports.default = TableContents;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var SystemInstall = function (_Component) {
	_inherits(SystemInstall, _Component);

	function SystemInstall() {
		_classCallCheck(this, SystemInstall);

		return _possibleConstructorReturn(this, (SystemInstall.__proto__ || Object.getPrototypeOf(SystemInstall)).apply(this, arguments));
	}

	_createClass(SystemInstall, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'SECTION I. - SYSTEM INSTALLATION'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A.   \xA0Introduction'
					),
					_react2.default.createElement('br', null),
					'You have made an investment in a high quality setworks/optimizing control system. Careful planning of the installation will pay dividends by minimizing start-up time, enhancing reliability and improving the maintainability of the system.',
					_react2.default.createElement('br', null),
					'Installing the system is a process requiring many diverse steps. The following sections provide lists of tasks and information related to the installation. Our intent is to minimize the chance of oversight. The lists are not necessarily in sequence, should not be considered inclusive, and may discuss items not used on your system. If you have any questions, please do not hesitate to contact LCI for additional information or clarification.',
					_react2.default.createElement('br', null),
					'In many cases, a great deal of installation work can be accomplished before the mill shuts down to make the change over. The involvement of LCI personnel onsite is generally limited to checkout, parameter setup and initial power-up. Beyond that point, LCI will assist in system troubleshooting, fine tuning and training of sawyers and maintenance personnel.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-1. \xA0What is supplied by Lewis Controls, Inc. (LCI)?'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'All hardware and software as defined by our contract and confirmed by the purchase order.'
						),
						_react2.default.createElement(
							'li',
							null,
							'All spares, manuals and operating supplies defined by our contract.'
						),
						_react2.default.createElement(
							'li',
							null,
							'All shielded cables required for positioners, Temposonics, displays, etc.'
						),
						_react2.default.createElement(
							'li',
							null,
							'System drawings which detail the wiring, conduit runs and system hardware.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Initial checkout of the control system and set up of the initial system parameters.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Training of Sawyers and Maintenance personnel as defined by our contract.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Maintenance back-up and assistance for mill personnel as they maintain the system hardware and software, by phone or if required, on-site.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-2. Mill Or Others\u2019 Responsibilities'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The mill responsibilities as outlined in this section are intended as a guideline. More detailed information is provided in the following sections. It is hoped that this will minimize areas of potential misunderstanding and oversight. In all cases the LCI contract will be used to resolve questioned areas and may, in some instances, override sections of this manual. In general, the mill responsibilities are:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Provide and install all required conduit.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Provide and install all required field wiring.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Provide, install, wire and adjust all switches, and supply inputs to LCI equipment.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount and wire all system components.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install, plumb, and flush the hydraulic components.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install 3D scan bar (shape scan systems)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install upper and lower scan bars (photocell scanner systems)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Adjust scanner photocells (photocell scanner systems)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Provide and install a blower and plenum, if necessary, to provide positive air pressure within the lower scanner housing (photocell scanner systems).'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-3. Site Preparation'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When locating system components, you should always consider:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Accessibility for maintenance.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Accessibility for operation.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Environment (vibration, temperature, humidity, and cleanliness).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Ease of installation.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-4. System Drawing Package'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The system drawing packages supplied by LCI are intended for use during installation and maintenance activities. Minor wiring changes made during installation will be incorporated into LCI\u2019s master drawings and copies will be returned to the mill. This will allow LCI to better support your maintenance efforts in the future. The system drawings provided by LCI identify:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'AC Source requirements.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Conduit requirements'
						),
						_react2.default.createElement(
							'li',
							null,
							'Functional unit identification and sizes.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Pull boxes (required or recommended).'
						),
						_react2.default.createElement(
							'li',
							null,
							'DC wiring (wire sizes specified are minimum).'
						),
						_react2.default.createElement(
							'li',
							null,
							'AC wiring (wire sizes specified are minimum).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Multiple conductor shielded cable requirements.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Back panel layout (wiring and cable terminations).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Setworks \'black\' box layout and interconnect cables.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Wiring diagram of computer cabinet.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Console and handle layouts.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Functional unit interconnection wiring.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Scanner details.'
						),
						_react2.default.createElement(
							'li',
							null,
							'PLC layout and wiring.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Positioner wiring.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B. Sawyers Cab and Computer Installation'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'B-1. Mill Responsibilities'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Mount the computer cabinet in the desired location (bolt to wall and floor)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount the Programmable Logic Controller (PLC) \u2013 if a separate unit.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount the operator console.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install all conduit runs per drawing package.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B-2. General Recommendations'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'There are usually a number of different options when mounting the computer cabinet and sawyer\u2019s console. Here are some things to consider when installing your system.',
					_react2.default.createElement('br', null),
					'Try to pick a location for the computer cabinet that is subjected to minimal vibration. Avoid areas which receive regular heavy shocks from mill equipment. Although your equipment will function in these areas, constant and repeated vibration/shocks may shorten the life of some of the components in your system.',
					_react2.default.createElement('br', null),
					'Most systems will be mounted in the cab with the sawyer. If the computer cabinet is to be mounted in a separate room, we would suggest that you should be able to see the carriage from that room. This will improve system operation and simplify troubleshooting. Minimize the length of wiring runs. We recommend that from the computer out onto the carriage should be no more that 150 feet.',
					_react2.default.createElement('br', null),
					'The computer environment should be temperature controlled (both heating and air conditioning). Minimize the amount of dust coming into the area if possible. If air conditioning is not already in place, consider drawing fresh air from low dust areas (such as outside or under the mill).',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C. Carriage Electrical'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'C-1. Mill Responsibilities'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Provide conduit for wiring runs between the computer cabinet and the carriage.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Pull and terminate all wires and cables required per system drawing package.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount all switches required: pantograph position, set enable, others as needed.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount carriage position encoder'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount saw deviation sensors (if included with system)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount saw guide position sensor (if included with system)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install shunt diodes on all DC relays driven by LCI equipment.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install MOV noise suppressers across all AC solenoids driven by LCI equipment.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install a dedicated phone line into the computer room/cab.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-2. Electrical Noise'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Low voltage, low current high-speed electronics are quite susceptible to electrical noise. LCI equipment is designed to provide as much immunity to noise as practical. In a mill environment, some noise problems may need to be eliminated, minimized or isolated outside of the LCI supplied equipment.',
					_react2.default.createElement('br', null),
					'To prevent operational problems caused by electrical noise, LCI recommends or specifies the following.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'A separate AC source to LCI equipment.'
						),
						_react2.default.createElement(
							'li',
							null,
							'AC to the computer shall be supplied from a regulation transformer or UPS.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Separate routing of AC & DC wiring within cabinets.'
						),
						_react2.default.createElement(
							'li',
							null,
							'AC solenoids powered from LCI equipment must have MOV R.F. noise suppressers across each solenoid.'
						),
						_react2.default.createElement(
							'li',
							null,
							'If discrete relays are used, the coils must have shunt diodes across each coil.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Computer outputs are not to be connected to components not supplied or approved by LCI.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-3. Carriage Electrical Detail'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'To reduce electrical noise, AC and DC wiring must be run in separate conduits. Wire runs from the computer cabinet across the pantograph to the carriage must be separated into two groups \u2013 AC and DC. These groups should be physically separated by at least 6 inches. The high voltage AC group includes all carriage solenoids (dogs up/down in/out, oil pump, etc.) The low voltage DC group will include all Temposonics and servo valve wiring. Do not connect cables on the carriage to either the hydraulic valves or Temposonics probes until the wiring has been checked by the LCI Engineer during startup. LCI recommends that Hydraulic Valve and Temposonics cables be run without any additional terminations from the carriage back to the computer.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Allow extra length and provide strain relief at all pivot points for the wire runs that cross over the pantograph. Where the wires cross the elbow in the center of the pantograph, leave a service loop that hangs down about 1 \xBD feet. A service loop that is too small will cause premature failure of the cables.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Adjust all switches to provide a contact closure when operated. There are three different types of switches and sensors that may be found in your system \u2013 Pantograph, Carriage Reference/Set Enable and Saw Guide.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The ',
					_react2.default.createElement(
						'b',
						null,
						'pantograph position switch'
					),
					' should close when the carriage passes the saw as it moves away from the load deck. The contact closure should occur when knee 2 passes the saw and must be maintained until the carriage returns to the load deck side of the saw.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The ',
					_react2.default.createElement(
						'b',
						null,
						'carriage reference'
					),
					' and ',
					_react2.default.createElement(
						'b',
						null,
						'set enable switches'
					),
					' serve two purposes. They are used to determine a starting point for tracking the carriage as it moves up and down the track and they are used to provide additional information on when it is safe to make a set. Drawing W-XXXX-20200 shows the suggested carriage reference and set enable proximity switch locations.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The ',
					_react2.default.createElement(
						'b',
						null,
						'saw guide sensors'
					),
					' are mounted to the upper saw guide and are used to measure saw deflection. See drawing W-XXXX-20301. This is an optional system feature and may not have been included with your system.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Systems with ',
					_react2.default.createElement(
						'b',
						null,
						'saw guide control'
					),
					' will have a special Temposonics probe that is mounted along side of the saw guide with a rod that attaches to the saw guide. As the saw guide goes up and down, a magnet is moved up and down on the Temposonics probe. The purpose of this probe is to monitor the position of the saw guide so that the system can automatically set the saw guide just above the surface of the log. When mounting the Temposonics probe, it should be positioned so that magnet which slides up and down on the probe does not bottom out or come closer than a \xBD inch of the end of the probe as the saw guide moves between it\u2019s minimum and maximum height. This is an optional system feature and may not have been included with your system.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The ',
					_react2.default.createElement(
						'b',
						null,
						'carriage encoder'
					),
					' is normally attached directly to the carriage drive drum using a stub shaft and a flex coupling. It may also be connected by using sprockets with a small chain or pulleys and a cogged belt. If the direct drive method is not used, the ratio between the carriage drum and the encoder should be approximately 1:1.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D. Setworks Hydraulics'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'D-1 Mill Responsibilities'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Install hydraulic power unit and dump valve panel. Flush system per Section D-3.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Install hydraulic positioners.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D-2. Setworks Plumbing Schedule'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'2 1/2\'\' Bore Setworks Cylinders:'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'2 BLOCK CARRIAGES'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Pump to hydraulic safety valve package ......................... 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage pressure header .............................................. 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage cushion (T2) header ......................................... 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage return (T1) header ............................................ 1\'\' Schedule 40'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage to tank .............................................................. 1\'\' Schedule 40'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'3 AND 4 BLOCK CARRIAGES'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Pump to hydraulic safety valve package ......................... 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage pressure header .............................................. 1 1/4\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage cushion (T2) header ......................................... 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage return (T1) header ............................................ 1 1/4\'\' Schedule 40'
						),
						_react2.default.createElement(
							'li',
							null,
							'Return to tank........ ........................................................ 1 1/4\'\' Schedule 40'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'3 1/4\'\' Bore Setworks Cylinders:'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'2 BLOCK CARRIAGES'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Pump to hydraulic safety valve package ........................ 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage pressure header ............................................. 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage cushion (T2) header ........................................ 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage return (T1) header ........................................... 1\'\' Schedule 40'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage to tank ............................................................ 1\'\' Schedule 40'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'3 BLOCK CARRIAGES - 3 1/4\'\' Setworks Cylinders:'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Pump to hydraulic safety valve package ........................ 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage pressure header ............................................. 1 1/4\'\' Scheule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage cushion (T2) header ........................................ 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage return (T1) header ........................................... 1 1/4\'\' Schedule 40'
						),
						_react2.default.createElement(
							'li',
							null,
							'Return to tank ............................................................... 1 1/4\'\' Schedule'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'4 BLOCK CARRIAGES'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Pump to hydraulic safety valve package ........................ 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'b',
							null,
							'NOTE: If pump and motor capacity exceed 35 g/m use 1 1/4\'\' Schedule 80'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Carriage pressure header ............................................. 1 1/4\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage cushion (T2) header ........................................ 1\'\' Schedule 80'
						),
						_react2.default.createElement(
							'li',
							null,
							'Carriage return (T1) header ........................................... 1 1/2\'\' Schedule 40'
						),
						_react2.default.createElement(
							'li',
							null,
							'Return to tank ............................................................... 1 1/2\'\' Schedule 40'
						)
					),
					'Typical Hydraulic schematic drawing:',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'hydroDrawing.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D-3. Hydraulic Recommendations:'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Keep mill plumbing runs short and with as few turns as possible to minimize pressure losses in the plumbing.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Use hoses to make 90 Degree turns in the mill plumbing runs. This allows for pipe expansion and contraction as well as minimizing pressure drops and trapping contaminants at turns.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Use tubing with compression fittings. LCI advises against using threaded pipe because it increases the probability of leaks and contaminants.'
						),
						_react2.default.createElement(
							'li',
							null,
							'All hoses used on pressure and cushion lines are to be rated at 3000 psi.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Hydraulic components are precision built units. Cleanliness during installation and maintenance is imperative to long life. All pipes, hoses, and tubing must be cleaned thoroughly and kept clean before installation between the hydraulic power unit and remote components. Use only pipe cleaned by pickling and pacifying (P.O.P.) or sandblasting to remove internal mill scale.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D-4. Hydraulic System Startup'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'When the plumbing and wiring have been completed, check motor rotation and fluid level. If filling is needed, a filtered pump and the quick connect filling provision should be used.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Close all ball valves.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Connect bypass couplings at each positioner to connect pressure hose (P) to return hose (T). Be sure to cap off the hose fittings on the cylinder.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Start the power unit up at a reduced pressure.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Check for leaks at the first ball valve. Manually or electrically energize the hydraulic safety valve.'
						),
						_react2.default.createElement(
							'li',
							null,
							'With pressure up on the positioner ball valves, sequentially open and close each ball valve and check for leaks.'
						),
						_react2.default.createElement(
							'li',
							null,
							'With the ball valves all closed, increase system pressure to 1800 psi and repeat steps 5 & 6.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Top off the oil level, if necessary, at this time. This will ensure that all of the system oil will be filtered and that there will be sufficient oil to extend the cylinders.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Start hydraulic system flushing. With system pressure to the positioner ball valves:'
						),
						_react2.default.createElement(
							'ol',
							{ type: 'a' },
							_react2.default.createElement(
								'li',
								null,
								'Sequentially open and close each positioner ball valve 15-20 times at 10 second intervals. Leave each ball valve closed as you complete that positioner.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Sequentially open each positioner ball valve and flush through that area by itself for 10-15 minutes.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Open all of the system ball valves including the flushing bypass ball valve, if present. Flush six hours minimum. Use a hammer to vibrate all plumbing while flushing'
							),
							_react2.default.createElement(
								'li',
								null,
								'Shut down the power unit.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Replace the filter cartridges. Spares are provided with the system for this purpose.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Start-up the power unit and begin final flushing for 1 hour minimum with all ball valves open.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Shut down the power unit and make the final connections to the positioners.'
							)
						)
					),
					'Flushing the hydraulic system in this manner will remove contaminants in the oil and protect the investment you have made in a high quality positioning system. We recommend replacing filter cartridges after one (1) month\u2019s operation and sampling the oil regularly. An oil sample should be taken after 3 months. Oil sample timing after that, should be based upon the sample results. Anytime the hydraulic system is opened, filters replaced, oil added, etc., the system should be flushed for at least two hours before operating the positioners.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'E. Scanner \u2013 3D Shape Scan Systems'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'E-1. Mill Responsibilities'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Mount the upper scan beam per scanner installation drawings'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount the scanner wire duct to the support structure on the backside of the scan beam.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Run conduit from the scanner wire duct to the computer cabinet.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Pull laser and fiber optic cables back to computer cabinet.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'E-2. Scanner Support Structure and Wire Duct'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When designing the structure that will support and position the scan bar, select a scanner mounting that is as free from vibration as possible. Avoid tying the support structure into mill steel, particularly if there is significant vibration from other equipment. If vibration is a concern, consider suspending the scan beam from the roof or building a scanner support structure from the ground up on an isolated concrete pad.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In addition to the scan bar, there is a wire duct that is normally mounted on the back side of the support structure behind the scan bar. This wire duct carries power supply and data cables for the individual laser scanners and must be mounted within 2 feet of the scan heads. To help prevent damage to fiber optic cables, LCI recommends using a 1 \xBC\u201D diameter conduit and a 4\u201D or larger radius for the turns.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'E-3. Scan Bar Location'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Your system drawings show a preliminary location for the laser scan heads relative to the carriage. The scan heads will be mounted on a metal scan bar that can pivot to improve the scanning angle.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Accurate placement of the scan bar is essential in obtaining consistent solutions and maximum recovery from your system. The scan bar must be level and parallel to the saw line. Refer to your system drawings (M-XXXX-40031) for the dimensions. For the most effective scanning, the log being scanned needs to lie between 90 and 120 inches (7.5 to 10 feet) from the scan heads and be positioned linearly so that at least one laser is toward the saw side of the log index line. For a flat carriage, the scan bar will normally be mounted at an angle of about 30\uF0B0 or less from horizontal. The location and angle of the scan bar will be engineered by LCI to maximize the effectiveness of the scanner over the widest range of log diameters.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'NOTE: When mounting the scan bar, the scan bar should only be tack welded into position until an LCI engineer can verify its position during startup.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'F. Scanner \u2013 Photocell Systems'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'F-1. Mill Responsibilities'
					),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Mount the lower scanner housing per scanner installation drawings (M-XXXX-6001, M-XXXX-6002)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Mount upper scan beam per scanner installation drawings.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Wire PEC transmitters and receivers.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Connect blower and needed duct work to lower scanner housing.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'F-2. Photocell Scanner Assembly Installation'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The photocell scanner supplied by LCI uses Banner SM31 photoelectric cells. Each PEC location consists of a transmitter and a receiver. The transmitter is part number SM31EL. The receiver is part number SM31RL. The setup required is on receivers only.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Receivers obtained from LCI will be set up as follows; light operate, maximum gain and aperture AP31040V installed.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Transmitters are installed within the enclosed lower scanner housing. The wire connections are: blue to common and brown to +24VDC.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The receivers are mounted on the upper scanner beam. The wire connections are: blue to common, brown to +24 VDC, white to signal, and black is not used.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'F-3. Scan Line Location'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'There are several factors that have an influence on where the scan line should be located. In all cases, excellent scanner operation has resulted when the scan line is in the neighborhood of 1 inch on the carriage side of, and parallel to the saw line. The location selected for your mill is shown on drawing M-XXXX-6002.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'F-4. Locating the lower Scanner Housing'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'To get the lower scanner housing installed, it must be oriented properly in three dimensions.'
						),
						_react2.default.createElement(
							'ol',
							{ type: 'a' },
							_react2.default.createElement(
								'li',
								null,
								'Spacing between segments. Most lower scanner housings are separated into two or more segments. Care must be taken to properly locate the scanner elements adjacent to the log turner to maintain proper photocell spacing as called out on system drawing M-XXXX-6001.'
							),
							_react2.default.createElement(
								'li',
								null,
								'The back of the lower scanner housing should be vertical.'
							),
							_react2.default.createElement(
								'li',
								null,
								'The photocell centerline must be located as shown on drawing M-XXXX-6002.'
							)
						),
						_react2.default.createElement(
							'li',
							null,
							'To properly install the lower scanner housing, we suggest that the two housing ends adjacent to the log turner be located first and properly spaced per drawing M-XXXX-6001. The following information is needed to locate the scanner housing relative to the saw line.'
						),
						_react2.default.createElement(
							'ol',
							{ type: 'a' },
							_react2.default.createElement(
								'li',
								null,
								'With a band mill (or circle) saw in place, measure from the end of the last knee base to the saw. _________'
							),
							_react2.default.createElement(
								'li',
								null,
								'From drawing M-XXXX-6002 locate the distance from the saw line to the scan line. _________'
							),
							_react2.default.createElement(
								'li',
								null,
								'Subtract distance B from distance A. This is the distance from the reference knee to the scan line. _________________'
							),
							_react2.default.createElement(
								'li',
								null,
								'The photocell centerline to the back of the lower housing is 1.15\'\'. Add distance C to 1.15\'\' to find the distance from the end of the reference knee to the back of the lower housing. _______________'
							),
							'By measuring from the end of the knee to a level, it is now quite simple to put the housing in place. Avoid using the flat rail as a reference since it may not be parallel to the V-Rail.',
							_react2.default.createElement('br', null),
							_react2.default.createElement('br', null),
							'In the example shown, we picked a three-knee carriage with knee three 1.25\'\' from a strained up band mill.',
							_react2.default.createElement('br', null)
						),
						_react2.default.createElement(
							'b',
							null,
							'Example:'
						),
						_react2.default.createElement(
							'ul',
							null,
							_react2.default.createElement(
								'li',
								null,
								'Knee-3 measured to saw equals 1.25\'\'.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Drawing M-XXXX-6002 Saw to photocell centerline is .65\'\'.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Calculate Knee-3 to photocell centerline (1.25\'\'-.65\'\') .60\'\''
							),
							_react2.default.createElement(
								'li',
								null,
								'Calculate Knee-3 to back of housing (1.15\'\' +.60\'\') 1.75\'\''
							)
						),
						_react2.default.createElement('img', { src: imgPath + 'sawToCell.PNG', className: 'helpFileImg' }),
						'Depending on what tools are available and your personal preference, you may want to use a long level clamped to the housing and a tape measure, or clamp an extension onto the knee and use a short level and plumb bob. We suggest tacking the ends of the housing next to the turner first. When the housing is true end-to-end, complete welding it down.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'To locate the upper scanner frame, drop a plumb bob from the center of the receiver lenses at each end of that frame section. Position the receiver frame such that the plumb bobs are centered in the transmitter openings. The receiver frame can now be tack welded at the ends. To keep the center of the receiver frame from moving, a brace is usually installed. Again, drop a plumb from a receiver in the center of the scanner, adjust for position and weld.'
						),
						_react2.default.createElement(
							'b',
							null,
							'Note'
						),
						' that when the scanner is installed in this location the carriage bases cannot extend over the scanner.'
					),
					'Typical installation drawings:',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'typicalDrawing1.PNG', className: 'helpFileImg' }),
					_react2.default.createElement('img', { src: imgPath + 'typicalDrawing2.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null)
			);
		}
	}]);

	return SystemInstall;
}(_react.Component);

exports.default = SystemInstall;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var SystemStartUp = function (_Component) {
	_inherits(SystemStartUp, _Component);

	function SystemStartUp() {
		_classCallCheck(this, SystemStartUp);

		return _possibleConstructorReturn(this, (SystemStartUp.__proto__ || Object.getPrototypeOf(SystemStartUp)).apply(this, arguments));
	}

	_createClass(SystemStartUp, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'SECTION II. SYSTEM START-UP & ADJUSTMENTS'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A. System Start-up'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'System start-up time provides an excellent opportunity for maintenance personnel to become familiar with system features and operation. Almost every part of the system is touched during start-up. As always, ensure all mill safety procedures are followed during start-up. . NOTE: Power is NOT to be applied to the system until the LCI engineer is onsite to complete the installation.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B. Initial Power-up'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Disconnect all cables going to external sources. (Console, scanner, Temposonics, shaft encoder, servo-valve, saw deviation cables, and all external AC wires to/from the PLC)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Power-up the computer/setworks cabinet. Using the troubleshooting menu, verify all power supply voltages are correct.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Power-down the computer/setworks cabinet.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Plug in all external cables and wiring. Leave Temposonic, servo-valve, and shaft encoder cables unplugged at the mil-spec connector (carriage end).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Power-up the computer/setworks cabinet. Using the troubleshooting menu, verify all power supply voltages are correct.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Check power wiring to Temposonics at the carriage end of the cables.'
						),
						_react2.default.createElement(
							'b',
							null,
							'Temposonics (LH Series with DPM)'
						),
						_react2.default.createElement('br', null),
						'Pin A, Ground',
						_react2.default.createElement('br', null),
						'Pin E, +15V',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Check power wiring to the servo-valves at the carriage end of the cables.'
						),
						_react2.default.createElement(
							'b',
							null,
							'Servo-valves (Bosch)'
						),
						_react2.default.createElement('br', null),
						'Pin A, +24V (may be nearly +30V)',
						_react2.default.createElement('br', null),
						'Pin B, Ground',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Check power wiring to shaft encoder at the encoder end of the cable.'
						),
						_react2.default.createElement(
							'b',
							null,
							'Shaft Encoder'
						),
						_react2.default.createElement('br', null),
						'Pin D, +15V',
						_react2.default.createElement('br', null),
						'Pin F, Ground',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Check power wiring to laser heads at the scan bar end of the cable (shape scan systems only).'
						),
						_react2.default.createElement(
							'b',
							null,
							'L4 Laser Heads'
						),
						_react2.default.createElement('br', null),
						'Pin J, +15V',
						_react2.default.createElement('br', null),
						'Pin F, Ground',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Power-down the setworks cabinet.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Plug in Temposonics, servo-valves, and shaft encoder. Plug in all other external cables and wires.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Ensure that the hydraulic pressure to the carriage has been manually turned off (usually done at the accumulator).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Power-up the setworks cabinet. Verify DC supplies remain at the proper voltage.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Display targets and positions at the system terminal. Temposonic positioner input (current position) should be relatively stable. The position should not vary by more than a couple thousandths of an inch with the cylinder still.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Note - During start-up, a knee may lunge or run-away as air is forced out of the system. It is strongly recommended that the carriage be parked next to the rub rail when the hydraulic pressure is turned on for the first time. Be very cautious.'
							)
						),
						_react2.default.createElement(
							'li',
							null,
							'If the safety valve is working properly, enable the hydraulics and turn on the hydraulic power unit.'
						),
						_react2.default.createElement(
							'li',
							null,
							'At this point, the knees or slabber may be moved using the computer or by plugging in the Servo Test box. Generally, the Servo Test box, which is supplied with the system, will be used only when trying to troubleshoot a servo problem.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Momentarily depressing the limit override button on the sawyer\u2019s console will allow the knees to move. Continue to do this until all knee movement has stopped and holding down limit override causes no further knee movement.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Move the knees to a reasonable location. You may need to hold down limit override during knee movement.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Adjust the actual knee position to be \u201Cclose\u201D to where the knees actually are by using the Automatic Positioner Calibration menu.'
						),
						'(Main Menu/Setup Options/Startup Options/Automatic Positioner Calibration)',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Verify the function of all console & handle switches and indicators.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Individually disable knees with dogs up and out to verify solenoid wiring. (Disabled knee dogs should go down and in. If setworks hydraulics are on, the disabled knees may creep.)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Use taper buttons to position knees individually, then cancel taper.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Verify set enable switch and pantograph position inputs by moving the carriage past the saw. Verify set enable on both sides of the saw'
						),
						_react2.default.createElement(
							'b',
							null,
							'Note: '
						),
						'The load deck set enable switch is also used to reference the carriage\u2019s position.',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Operate dogs to verify proper function of cinch, etc.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Test and adjust limits in all dog configurations.'
						),
						'(Main Menu / Setup Options / Runtime Options / Limits)',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'Test function of knee disables, tapers, dog cutouts, jogs, skews and cancels.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Verify that scanner inputs switch on and off without cross talk by interrupting each beam separately (photocell systems only).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Test all PLC functions not tested above. (decks, sawguides, oiler, etc.)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Verify encoder count decreases as the carriage moves from the log deck end toward the mill end.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Calibrate encoder counts per foot.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Locate guide to Knee 1 at reference.'
						),
						_react2.default.createElement(
							'li',
							null,
							'If a shape scan system, input actual laser positions.'
						),
						_react2.default.createElement(
							'li',
							null,
							'If a photocell scan system, input actual photocell positions.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C. Hydraulics System Adjustments'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'At the power unit, locate the relief valve. (normally on the top of the reservoir) Loosen the lock nut and turn the relief clockwise 6 complete turns. We are now sure that the pump pressure can be set without the relief valve opening. Turn the compensator pressure adjustment to bring system pressure to the desired level (typically 1800 psi). With the system pressure set, the next step is to set the relief. Turn the relief counter clock-wise until it relieves. There are several ways to detect this; the pressure gauge will dip, the relief valve may squeal or hiss, the pump will stroke up more often. Turn the relief valve adjustment back clockwise to the point where relieving just stops. Turn it clockwise two complete revolutions past that point and lock it down. While at the power unit , adjust or verify:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							'fan temperature switch at 110\xB0 f,'
						),
						_react2.default.createElement(
							'li',
							null,
							'over temperature switch at 140\xB0 f,'
						),
						_react2.default.createElement(
							'li',
							null,
							'heater switch at 80\xB0 f,'
						),
						_react2.default.createElement(
							'li',
							null,
							'float switch shipping bracket off and low level shut down working'
						)
					),
					'At the carriage, ensure the pressure gauge is showing full pump pressure. While watching the gauge, have someone turn off the power unit. Continue watching the gauge as pressure dissipates slowly and then dissipates quickly. The point at which it starts to dissipate quickly is the accumulator pre-charge level. The accumulator pre-charge should be about 60% of system pressure. Excessive pre-charge pressure should be bled off for proper operation.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D. Hydraulic Cushion Adjustment'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Most systems are equipped with a two-stage cushioning assembly, which may be configured in several different ways. All cushion assemblies have two relief valves. One is active only when the dogs are up (and a log is being loaded or turned), and is called the "soft cushion" or "part-time" relief valve. The other relief valve is always active, and is called the "full time" relief valve.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'To locate the cushion assembly, look for a manifold block that is plumbed to the hydraulic return line and has a pressure gauge, a small solenoid valve, and two adjustable relief valve cartridges. It is also plumbed to the cushion (T2) ports of the knee manifold blocks. The relief cartridge closest to the small solenoid is the part-time cushion relief, and usually will be physically located above the full-time valve. Note: There are two different manifolds pictured below.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'pressureGuage.PNG', className: 'helpFileImg' }),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Adjusting the cushion valves requires that the knee runaway software is disabled. In the Positioner Movement Setup Screen, (Main Menu / Setup Options / Startup Options / Positioner Movement Setup) Note the current runaway distances and then enter a value of 60 in both the \u201Cin-the-cut Runaway Error\u201D and \u201Cout-of the-cut Runaway Error\u201D.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Put the dogs down and jog to the forward limit.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Hold down the limit override push button and press a forward individual knee taper button until a knee comes forward into a mechanical stop.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Loosen the lock nut on the Full-Time relief valve.'
						),
						_react2.default.createElement(
							'li',
							null,
							'With the buttons still depressed, turn the valve adjustment at the carriage counterclockwise until the relief pressure gauge dips.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Turn the relief adjustment clockwise slowly until the gauge stops showing a pressure increase then release the buttons.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Lock the adjustment down. The full time relief is now properly adjusted. The relief gauge and system pressure gauge should show about the same pressure.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Press and hold the limit override button and use the individual knee taper button to bring the knees back within travel limits.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Press Cancel Taper and the jog buttons to position the knees at mid-stroke. Raise the dogs.'
						),
						_react2.default.createElement(
							'li',
							null,
							'At the cushion block, adjust the soft cushion relief valve counter clockwise until it relieves (gauge pressure dips, hissing noise, etc.).'
						),
						_react2.default.createElement(
							'li',
							null,
							'Turn it clockwise until relieving stops.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Note the position and turn it clockwise two complete revolutions and lock it down.'
						)
					),
					'If the sawyer feels it is to easy to push the knees around when loading and turning, raise the relief pressure by turning the upper relief adjustment clockwise one half revolution at a time until he can load and turn comfortably.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null)
			);
		}
	}]);

	return SystemStartUp;
}(_react.Component);

exports.default = SystemStartUp;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var SectionThree = function (_Component) {
	_inherits(SectionThree, _Component);

	function SectionThree() {
		_classCallCheck(this, SectionThree);

		return _possibleConstructorReturn(this, (SectionThree.__proto__ || Object.getPrototypeOf(SectionThree)).apply(this, arguments));
	}

	_createClass(SectionThree, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'SECTION THREE'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A. Scanning'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-1. Shape Scan systems'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'One of the key features of the Lewis Controls system is the 3D Laser Scanner.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'WARNING: Laser radiation from the scan heads can be damaging to the eye. Never look directly into the scan heads when the lasers are on. Use caution when working on the carriage. The red lasers are visible to the eye. It is recommended that the lasers be turned off whenever someone is working on the carriage. Note the following:'
					),
					_react2.default.createElement('br', null),
					'1. A warning light, mounted near the laser heads will be on when the lasers are active.',
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'b',
							null,
							_react2.default.createElement(
								'li',
								null,
								'There are two laser remote shut off switches. One will be mounted near the operator inside the cab. The other will be near the carriage track access point. Pushing down on either of the mushroom switches will turn the lasers off. Pulling up on either switch will re-enable the lasers.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Turning off the control power on the sawyers console will disable the lasers until it is turned back on.'
							),
							_react2.default.createElement(
								'li',
								null,
								'When the lasers are turned on, there is a 10 second delay before the lasers become active.'
							)
						)
					),
					'The scanning system consists of a series of two or more scan heads mounted on a beam that is positioned over the infeed deck. Each scan head has two cameras (one on each end) and four lasers (spaced 12 inches apart) in the middle. The scan heads project vertical laser lines onto the log on the carriage. Within each head, the two cameras look at the lines created by the four lasers and gather information about the shape of the log. That information is then sent to the computer.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The process of profiling the log consists of scanning the log multiple times as the carriage moves towards the saw. When the log is first scanned, cross section data is only collected every 12 inches along the log. Because of the multiple scans, additional log data is collected and refined until cross section data is present for each inch along the length of the log, producing a more accurate picture of the log.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The computer receives the scanner information and uses it to create a three dimensional model of the log that includes the log\u2019s shape, length and diameters. It then analyzes the model; sets opening faces, places cants and keeps track of wood available as the sawyer removes boards. The scanner is only used on unopened faces, with the computer keeping track of the remaining wood as additional passes are made. See section 5 for information about the actual sequence of cutting up a log.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-2. Photocell systems'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'A optional photocell scanning system may be provided by Lewis Controls. This scanner consists of a series of photo-electric cells, with the transmitters on the bottom and the receivers on top. These photocell pairs are spaced on approximate 6\'\' intervals and enclosed in a protective housing placed in a reasonably clear area alongside the carriage flat rail. Properly installed, the scanner should run from as close to the saw as practical and past the far lumber line on the other end. Ideally, the scan line will be placed 1\'\' on the carriage side of the saw line. This gap on most scans allows you to achieve maximum knee speed through most of the set, pulls slack out of the dogs and results in a forward set motion all the way to the saw line.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The scanners primary job is to provide log edge definition, length and diameter information to the system computer which in turn develops a model of the log. The computer then analyzes the model, setting opening faces, placing cants and keeping track of wood available as the sawyer removes boards. The scanner is only used on unopened faces. See section 5 for information about the actual sequence of cutting up a log..',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The Lewis Photocell System scans as the log moves in either the forward or reverse direction, depending on where the log is positioned when the sawyer initiates a scan by pressing \'\'set\'\' or \'\'compute.\'\' It will also scan and set as the sawyer is moving the carriage toward the saw or slabber (scanning on the fly.)',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'Scan Forward:'
					),
					' Rough log length is measured as the log rolls out of the stop and loader and across the scanner. If the sawyer sets the dogs with the scan bar unblocked, the system begins a forward scan. (See Diagram) The sequence is as follows:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							'Rough length is measured as the log rolls across the scanner'
						),
						_react2.default.createElement(
							'li',
							null,
							'Log is dogged'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer presses "set" or "compute" and starts carriage moving toward the saw'
						),
						_react2.default.createElement(
							'li',
							null,
							'Knees advance in unison toward the saw line'
						),
						_react2.default.createElement(
							'li',
							null,
							'Log edge crosses the scan line'
						),
						_react2.default.createElement(
							'li',
							null,
							'Rough length data is updated to better reflect actual log length'
						),
						_react2.default.createElement(
							'li',
							null,
							'Computer develops log model and calculates solution'
						),
						_react2.default.createElement(
							'li',
							null,
							'Knees taper the log into the proper position and set for depth of first cut in one motion.'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'Scan Reverse:'
					),
					' Rough log length is measured as the log rolls out of the stop and loader and across the scanner. If the sawyer sets the dogs with the scanner blocked, the system begins a reverse scan. (See Diagram) The sequence is as follows:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							'Rough length is measured as the log rolls across the scanner'
						),
						_react2.default.createElement(
							'li',
							null,
							'Log is dogged'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer presses "set" or "compute" and starts carriage moving to saw'
						),
						_react2.default.createElement(
							'li',
							null,
							'Knees retract in unison away from the saw line'
						),
						_react2.default.createElement(
							'li',
							null,
							'Log edge crosses the scan line in reverse'
						),
						_react2.default.createElement(
							'li',
							null,
							'Rough length data is updated to better reflect actual log length'
						),
						_react2.default.createElement(
							'li',
							null,
							'Reverse knee movement stops and knees start forward'
						),
						_react2.default.createElement(
							'li',
							null,
							'Computer develops log model and calculates solution'
						),
						_react2.default.createElement(
							'li',
							null,
							'Knees taper the log forward into the proper position and set for depth of first cut in one motion'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'NOTE: Whenever possible, avoid loading a log to be scanned partly over the scanner. The scan and set will be longer because of the amount of knee movement needed to gather edge data.'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'h3',
						null,
						'Scan FORWARD'
					),
					_react2.default.createElement('img', { src: imgPath + 'scanForward.PNG', className: 'helpFileImg' }),
					_react2.default.createElement(
						'h3',
						null,
						'Scan REVERSE'
					),
					_react2.default.createElement('img', { src: imgPath + 'scanReverse.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-3. Scan Set Disable:'
					),
					' The Lewis System can be programmed to disable sets as the log approaches the saw or is in the saw. This feature can be turned on or off and adjusted from the system parameters (Main Menu / Setup Options / Scanner Setup / Scanner Options)',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Through these menus we establish a point in front of the saw guide where the setworks are disabled as the log nears the saw. Working in combination with a similar point \'\'behind the front\'\' of the saw guide defines an area or \'\'dead zone\'\' around the saw where the knees are inhibited as the pieces are cut from the log.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The rough length of the log is initially measured when a log is viewed by the scanner. Length information is continually refined and corrected as the log is sawn.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'All setworks motion will stop when the combined inputs from the encoder and the scanner conclude that part of the log is present in the defined \'\'dead zone.\'\'',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'WARNING: Though normally quite reliable, the Scan Set Disable feature is not 100% fail-safe. It is intended primarily to save saws and not to ensure personal safety of people in the area. Broken or severely tapered log ends may not be "seen" reliably by the scanner, which in turn can show a false reading for predicted log end. A slipping encoder, loose drive cables, or photocells (if your system is equipped with photocells) covered by debris may also create false information.'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						_react2.default.createElement(
							'u',
							null,
							'Nothing can take the place of a sawyer that stays in control of his machine at all times and makes safety a high priority.'
						)
					),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B. Solution Options'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The Lewis Controls Scanning Setworks system is a flexible tool. The hydraulic, electronic and software package has been designed to suit a wide variety of sawmill applications. As we go further in this manual we will discuss ways to access and modify the working system parameters from either the sawyers console or the computer menus.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The basic software package provided to each mill uses the Lewis Controls Cant Matrix system to break a log down. Optionally, we can activate a form of dollar driven software or a \u201Cpattern\u201D by diameter method of operation. The Cant Matrix system computes a solution to two basic questions: what cants and boards are in the log, and what depth of face should be opened.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B-1. Cant Matrix:'
					),
					' Selected from Parameters: Main Menu / Lumber Options / Cant Face Width Table',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The Cant Matrix system will choose one cant per log, filling in side lumber from the board list. The selections are based largely on two tables in the Lumber Options Menu, the Board and Cant Sizes Setup table and the Cant Face Width table. In addition, these tables work in conjunction with the Fill Mask (selected by the sawyer on the console) which tells the system which Cants and Boards are allowed for that Species.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In the Board and Cant Sizes Setup, cants are defined by width (size) and given a numerical priority order. In the Cant Face Width table, all the cants with a width defined in Board and Cant Sizes Setup are listed by length and given either a minimum face width or an \u201CIgnore\u201D label. If the label is set to ignore, the system will not consider a cant of that length. If a face width is set, the face will be made full length on the cant.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B-2. Opening Faces:'
					),
					' The system will determine the opening face of a log based on many parameters. Generally, if you feel the slabs at times are too heavy, some software settings may be adjusted to compensate.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'Computed Solution:'
					),
					' If you are sawing in Cant Matrix mode (as mentioned above), then opening faces are often determined by the size of face requested for each board and cant. For example, if the opening face is a cant face, then the face for that cant will be made at least as wide as requested for the entire length of the cant.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In the Species Setup screen, the Maximum Cant Face Difference parameter will also have an effect on opening faces. The more restrictive this parameter is set the more likely it is to cause slabs to be heavy. Cant Face restrictions may make it unable to pick up extra side boards.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'Set Button Solution:'
					),
					' When a face is opened by pressing the set button, the Lewis scanning system calculates the face line using the following rules:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Test for \'\'grade face\'\' button on. If yes, use \'\'grade face\'\' parameters.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Test log diameter against the automatic grade face parameter. If equal to or greater than the parameter, use \'\'grade face\'\' parameters. If not, use \u201CMinimum Opening Face\u201D parameters.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Calculate the face opening line in accordance with the above parameters.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Test for additional lumber lengths by using trade-off depth entered by the mill.'
						),
						_react2.default.createElement(
							'li',
							null,
							'With the final face line calculated, test to see if any common boards can be made from the slab wood.'
						)
					),
					'We define common boards as the active fill mask boards in that axis of that species.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'We will open the log to recover any common boards that can be made without moving the face line as placed by rules 1-5.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'commonBoard.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null)
			);
		}
	}]);

	return SectionThree;
}(_react.Component);

exports.default = SectionThree;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var SectionFive = function (_Component) {
	_inherits(SectionFive, _Component);

	function SectionFive() {
		_classCallCheck(this, SectionFive);

		return _possibleConstructorReturn(this, (SectionFive.__proto__ || Object.getPrototypeOf(SectionFive)).apply(this, arguments));
	}

	_createClass(SectionFive, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'SECTION V. SYSTEM OVERVIEW AND SAWYER\u2019S CONSOLE'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Reliable system design, proper maintenance tools and accurate drawing packages, are all important part of your system. The final item left to enable mill personnel to effectively maintain the system is providing the information needed to understand the system, the subsystems and their interfaces.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A. Systems and subsystems interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'A block diagram illustrating the various subsystems is included in this section to assist in visualizing the interfaces. The heart of the system is the Windows based computer. It operates with real-time extensions, runs the cutting program software, watches all the sub-systems that provide input information, processes the information, sends instructions to subsystems, and provides the Windows user interface.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'subSystem.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-1. Windows User Interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The computer is used to view and change system parameters and mill specific information using the familiar Windows environment. It also is used for real-time troubleshooting, and to maintain tally databases (if any). The standard PC keyboard, monitor and mouse (or mouse equivalent) are used along with a touch screen for simplified navigation among menus.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-2. Sawyer Display subsystem interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The sawyer display is a standard VGA display, usually LCD (flat panel) type, operating as the 2nd display in a 2-display windows system. It normally displays log and scanner data for the sawyer, but may also be used to display any information that is available to the system. This is especially useful during troubleshooting, when other real-time data may be useful.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-3. Carriage positioning detection switches'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'There are generally three switches used for carriage position detection functions. They are limit switches and proximity switches. Closing the switch mechanically or electronically completes a circuit, allowing current to flow through the system. The system can read no current (open) as well as current (closed) to determine the status of a switch.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-4. The Scanner subsystem interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The laser scanner gathers data by determining the distance of the lasers as they shine on the log. This data is sent directly to the PC via fiber optic cables. As the log moves, the lasers will gather log data at one-inch intervals.',
					_react2.default.createElement(
						'b',
						null,
						'WARNING: Laser radiation from the scan heads can be damaging to the eye. Never look directly into the scan heads when the lasers are on. Use caution when working on the carriage. The red lasers are visible to the eye. It is recommended that the lasers be turned off whenever someone is working on the carriage.'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-5. The Sawyer Console interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The sawyer console interface is a combination of digital inputs and outputs. The input interface is located in the console, along with the lamp output interface circuitry. The subsystem in the console is connected to the computer using a high-speed serial connection.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The sawyer console switches may be interfaced to the PLC by using preprogrammed spare inputs and outputs, using the existing serial interface and thus avoiding the use of extra wires between the console and the computer. In the rare event that a direct connection is required, note that the PLC is operated as a low-true logic system. As such, it expects to see 0 V input through the switch contacts to cause a response.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-6. The Computer to PLC interface'
					),
					_react2.default.createElement('br', null),
					'The Programmable Logic Controller (PLC) subsystem interface is a digital output interface from the PC computer. An example of our digital output circuit is provided for ease of understanding. The circuit and interface works as follows:',
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'The computer instructs the digital I/O terminator board to output a specific bit.'
						),
						_react2.default.createElement(
							'li',
							null,
							'The instruction is carried to the board via ribbon cable'
						),
						_react2.default.createElement(
							'li',
							null,
							'The output LED then lights (it would always be lit if the output wire was shorted to ground)'
						),
						_react2.default.createElement(
							'li',
							null,
							'The digital I/O terminator board outputs the bit at zero volts (true)'
						),
						_react2.default.createElement(
							'li',
							null,
							'The zero volt output is fed through the wire to the PLC causing the PLC to recognize and react to the output.'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'A-7. Shaft encoder interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'LCI uses a quadrature type of encoder that provides two square wave signals to the computer. By looking at the phasing of these signals the shaft encoder interface board can tell which direction the encoder is turning. The counter on the interface board then counts up or down to track carriage travel. The encoder requires +5 to +15V and DC ground to operate. The encoder cable terminates on the Shaft Encoder Input Terminator on the back panel, where the signal is converted to a ribbon cable attachment. The ribbon cable feeds directly to the PC.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-8. Linear Positioner interface'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'This interface consists of hydraulic cylinders, each normally bored for a Temposonic position sensor, with the sensor, hydraulic valve and manifold, and the associated cables needed to connect to the setworks control system. The basics of the closed loop linear positioner system are:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'The computer decides to change the cylinder rod position. It sets the analog drive voltage to reposition it in or out. This sign of the voltage determines the direction; the magnitude of the voltage controls the amount of opening (velocity, when the rod is free to move).'
						),
						_react2.default.createElement(
							'li',
							null,
							'The computer continuously obtains rod position information from the Temposonic interface. The computer compares the current position with the desired position and updates the control voltage to the valve as required to bring the positioner to the desired final position.'
						),
						'To complete the interface these things must be working properly.',
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'The positioner power supplies (+ 15V)'
						),
						_react2.default.createElement(
							'li',
							null,
							'The valve power supply (+ 24V)'
						),
						_react2.default.createElement(
							'li',
							null,
							'The cylinder control valve'
						),
						_react2.default.createElement(
							'li',
							null,
							'The Temposonic probe'
						),
						_react2.default.createElement(
							'li',
							null,
							'The valve control cabling'
						),
						_react2.default.createElement(
							'li',
							null,
							'The Temposonic cabling'
						),
						_react2.default.createElement(
							'li',
							null,
							'The hydraulic power system'
						),
						_react2.default.createElement(
							'li',
							null,
							'The PLC (to open the HSV (hydraulic safety valve))'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'A-9. The Programmable Logic Controller'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The PLC interface to the outside world is a 115VAC interface. It is used to drive solenoids, motor starters, etc. in accordance with inputs from the computer or directly from switch inputs.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'A PLC circuit can generally be looked at in the same way as a relay with a DC solenoid and AC contacts. If the computer wants to send the dogs to the up position, it sends a DC signal (zero Volts) to the PLC. The PLC in turn energizes the Dogs Up outputs that connect 115VAC through a fuse to one side of the dogs up solenoids. The other side of the dogs up solenoids is connected to the neutral line of that AC circuit.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In some cases, more than one input is needed to cause an output. Those circuits can be considered as relay contacts in series, with the last set of contacts connected to the output.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B. Faces and Axes'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'To fully understand the way the system operates, we need to define some terms. A ',
					_react2.default.createElement(
						'b',
						null,
						'face'
					),
					' is an open or unopened surface of the log that would be presented to the head saw. In our terminology, the first face on a new log is called ',
					_react2.default.createElement(
						'b',
						null,
						'1F'
					),
					', or ',
					_react2.default.createElement(
						'b',
						null,
						'1 Front'
					),
					'. If the sawyer opens the log and makes a 180 degree turn, he would then be sawing ',
					_react2.default.createElement(
						'b',
						null,
						'1B'
					),
					', or ',
					_react2.default.createElement(
						'b',
						null,
						'1 Back'
					),
					'. At this point, the log is open on two opposite faces. The next face opened, whether he turns the log one quarter turn down or three quarter turns, becomes ',
					_react2.default.createElement(
						'b',
						null,
						'2F'
					),
					', or ',
					_react2.default.createElement(
						'b',
						null,
						'2 Front'
					),
					'. The final face becomes ',
					_react2.default.createElement(
						'b',
						null,
						'2B'
					),
					' or ',
					_react2.default.createElement(
						'b',
						null,
						'2 Back'
					),
					'.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'You may have noticed the log has been divided into two parts or axes. The first axis consists of sawlines running from 1F through 1B and the second axis consists of sawlines running from 2F through 2B. In a simple cant sawing operation axis 1 will contain a dimension width cant, 6", 8", etc. Axis 1 generally will also have one or more side boards to utilize the wood not needed for the cant. Axis 2 breakdown would normally consist of board thicknesses. The controls would be set up to make board thicknesses, 1", 2", etc. The boards may be computed as headrig sawlines, packages of boards for a resaw, or as cants for a gang.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement(
							'b',
							null,
							'Axis Memories'
						)
					),
					_react2.default.createElement('img', { src: imgPath + 'axisMemory.PNG', className: 'helpFileImg' }),
					'The normal face sequence is set up by the mill through the windows interface using the ',
					_react2.default.createElement(
						'b',
						null,
						'Auto Face'
					),
					' selection in the Setup Options / Runtime Options / Opening Face Parameters submenu. As long as the sawyer turns logs as anticipated the system will remain on the proper axis and face. If the sawyer turns a log differently, he must tell the computer what he has done.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'For Example: Mill normally turns 180 degrees from 1 front',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Auto Face sequence is 1F, 1B, 2F, 2B'
						),
						_react2.default.createElement(
							'li',
							null,
							'On a large log the sawyer decides to turn 90 degrees down instead of 180 degrees'
						),
						_react2.default.createElement(
							'li',
							null,
							'Before scanning on the second face, he must press the 2F button on the console'
						),
						_react2.default.createElement(
							'li',
							null,
							'In most instances the sawyer knows ahead of time that he will need to override the auto face selection and can preset the next face (in this case 2F) as he is moving the carriage back to turn the log.'
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'Note'
					),
					' that if an unsawn side of the log is against the knees, the side toward the saw line is always a front face (either 1F or 2F). Conversely, if a sawn side of the log is against the knees, the side toward the saw is always a back face (1B or 2B). If a sawyer goes back to an axis for the 5th or 6th side sawing, he would alternate between 1B and 2B, never returning to a front face.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'consoleImg.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C. Button Light Description'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The sawyer\u2019s console is designed only after mill personnel are able to give their input on the selection and placement of buttons. Therefore every console is unique to the installation. The actual buttons and their placement will vary. However, the buttons on the console are arranged in logical groups. The actual placement and orientation of those groups depends in part on mill preference.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'consoleImgTwo.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-1. Group 1:'
					),
					' Control Power, Setworks Lock Out, Set Enable, Scan Set Disable, Hydraulic Pressure, Hydraulics Enabled, Set Achieved, Stack Computed, Knees Tapered, Console Status lights, Saw Deviation.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Control Power:'
							),
							' Mushroom Maintain - This large red switch serves as an emergency stop. Pushing down on the mushroom will remove all power from the carriage, cause the hydraulics to shut down, stop the knees from moving and cause the sawyer\u2019s console to turn off. ',
							_react2.default.createElement(
								'b',
								null,
								'Note: Because single solenoids re frequently used on carriages, when power is shut off to the carriage, board dogs may come down and other mechanical parts on the carriage may move \u2013 ',
								_react2.default.createElement(
									'u',
									null,
									'use caution'
								)
							)
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Setworks Lock Out:'
							),
							' Key Switch - This locking switch enables or disables setworks operation by supplying or removing A.C. voltage from the solenoids driven by the PLC. This switch should be in the Lock Out position whenever the sawyer leaves his seat, or when anyone is on or around the carriage.',
							_react2.default.createElement(
								'b',
								null,
								'WARNING: This switch does not constitute an official OSHA Lock out !!! Mill established lockout procedures should always be followed.'
							)
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Set Enable - Indicator Light:'
							),
							' Whenever the carriage is at either end of the track and the carriage frame blocks one of the set enable (proximity) switches, the light will be on and the computer will be able make sets, jog the knees, etc.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Scan Set Disable - Indicator Light:'
							),
							' This light will come on whenever the system thinks that the log is close to or in the saw. Note: In some cases, it may be possible to have the log in the saw while one of the set enable switches is still blocked (and the Set Enable light still on). In this case, the system will still stop the sawyer from making any sets or jogging the knees.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Hydraulic Pressure - Indicator Light:'
							),
							' The input for this light comes from a pressure switch located after the safety valve (but before the knees) in the hydraulic circuit. When the light is on, it indicates that there is oil pressure at the knees.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Hydraulics Enabled \u2013 Indicator Light:'
							),
							' This light will be on when the system opens the Hydraulic Safety Valve allowing oil to flow to the carriage. If the system shuts down the hydraulics for any reason, this light will be off.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Set Achieved - Indicator Light:'
							),
							' This light is on when the knees and slabber have moved to the commanded set position'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Stack Computed - Indicator Light:'
							),
							' This light is on whenever the sawyer has computed a stack for an axis.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Knees Tapered - Indicator Light:'
							),
							' This is illuminated whenever the knees are in a tapered position relative to the saw line.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Console Status \u2013 Indicator Lights:'
							),
							' A series of 5 small LEDs are located next to the system status lights. These lights: +5, +24, Rx, Tx, and Run are diagnostic lights for the console. Under normal conditions, all these lights will be on. Rx and Tx may appear to be dimmer than the other lights.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Saw Deviation \u2013 Indicator Lights:'
							),
							' On systems with the saw deviation option, these lights indicate when the saw has exceeded the limits set in the system software. The warning light will come on when the lower limit has been exceeded and the hazard light will light when the upper limit has been exceeded.'
						)
					),
					_react2.default.createElement('img', { src: imgPath + 'consoleImgThree.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-2. Group 2:'
					),
					' Saw Guide Auto, Saw Guide Up/Down, Slabber Auto, Slabber Sets, Slabber Retract, Slab Attach, Individual Knee Controls, Cancel Taper, Limit Override, Skew Left, Skew Right.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Saw Guide Auto \u2013 Lighted Pushbutton:'
							),
							' The Saw Guide Auto feature allows the system to automatically position the saw guide for the sawyer based on the scanned diameter of the log. If the guide is too high or too low, the sawyer may override the system by using the Saw Guide Up/Down switch located on the side of the sawyers console. If Saw Guide Auto is on, once the guide position has been overridden, the guide will stay in position until a new face has been scanned at which point it will be automatically repositioned. If Saw Guide Auto is turned off, the sawyer will be responsible for positioning the guide.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Slabber Auto \u2013 Lighted Pushbutton:'
							),
							' With the Slabber Auto button on, the slabber will automatically set to the thickness of the board being taken by the slabber. Turning it off will force the sawyer to manually select slabber sets. The sawyer can override a set without taking the system out of automatic simply by pushing one of the slabber set buttons. When the slabber pass is completed, the system will return to the automatic mode of operation.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Slabber Sets \u2013 Lighted Pushbuttons:'
							),
							' The slabber set buttons, marked 0 \u2013 5 allow the sawyer to force the slabber to a predetermined position. Pushing button \u201C0\u201D will cause the slabber to be moved to a position even with the sawline. The values for buttons 1-5 will be the first 5 board sets in the Board and Cant Sizes Setup parameters. (Main Menu / Lumber Options / Board and Cant Sizes Setup). If the slabber is in auto, the set lights will come on when the slabber set matches the size for that button.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Slabber Retract \u2013 Lighted Pushbutton:'
							),
							' Pushing the Slabber retract button will cause the slabber to go to the slabber retract position as defined in the system parameters. Pushing it a second time will cause the slabber to go to its\u2019 reverse limit.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Slab Attach \u2013 Lighted Pushbutton:'
							),
							' The state of this button determines how the opening face boards will be cut. If Slab Attach is on, the knees will position the log so that the saw cuts the slab and the first board on the first pass. If it is off, the log will be positioned so that the slab is cut off first and then the board will be cut on the next pass. For systems with a slabber, the Slab Attach button will normally be on.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Individual Knee Control - Momentary Pushbuttons:'
							),
							' Each knee control group consists of three buttons: Disable, Jog forward and Jog Reverse. The disable button is used to temporarily take a knee out of service. A knee is disabled by jogging it knee back until it hits the reverse limit and pressing the disable button. Depending on the null of the hydraulic valve, disabled knees may drift towards the saw line. ',
							_react2.default.createElement(
								'b',
								null,
								'To prevent disabled knees from drifting forward, close the ball valve on the hydraulic pressure line for that knee or chain the knee so it cannot move forward'
							),
							'. The Disable button is red and is labeled with a \'\'D\'\' and the knee number (for example, the button to disable knee 2 reads \u201CD2\u201D). When a knee is disabled, the button will light. The individual knee taper buttons are labeled with an arrow that indicates the direction to move the knee. The taper buttons may be used to move an individual knee to help it conform to the shape of a log. When the taper buttons are lit, that indicates that the computer thinks the knees are tapered. If the taper buttons are flashing, the system has detected a drive runaway condition. (See limit override)'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Cancel Taper - Momentary Pushbutton:'
							),
							' This button, when pressed, forces all taper out of the knees. It is done in two stages. If you press it once, all skew taper is removed from the knees but any individual knee taper is kept. If you press it a second time, all individual knee taper is canceled.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Limit Override - Lighted Pushbutton:'
							),
							' This switch, when pressed, will allow the sawyer to move positioners beyond the normal setworks limits or bring them back within limits. It must be held down until the drives have reached the desired position. If a positioner drifts beyond a limit, the sawyer must hold the Limit Override button down while using the jog button to move the knee to a position within limits. Instances where Limit Override is used include: moving a knee or knees when the set disable lamp is on, moving a knee that, when disabled, had drifted out of limits due to servo null, or when a drive runaway error has been experienced. ',
							_react2.default.createElement(
								'b',
								null,
								'WARNING: Use this switch carefully, especially in correcting drive runaways, or moving knees in the saw zone. Limits are set in the system parameters to assist the sawyer in operating the machine safely.',
								_react2.default.createElement(
									'i',
									null,
									'THIS PUSHBUTTON OVERRIDES THOSE LIMITS'
								),
								'.'
							)
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Skew Left, Skew Right - Momentary Pushbuttons:'
							),
							' These buttons allow the sawyer to manually skew (pivot) the knees about the middle of the carriage. Under normal conditions, the computer does the skew function automatically.'
						)
					),
					_react2.default.createElement('img', { src: imgPath + 'consoleImgFour.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-3. Group 3:'
					),
					' Scanner On, Taper (Auto, Full, Half, None), Calibrate, Down Time',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Scanner on - Lighted Pushbutton:'
							),
							' This button illuminates when the scanner is active for a particular face. Like taper, it must be selected for each species and face by pressing the Face button and pressing the Scan On button. If it is not selected for a face, the system will not scan on that face. WARNING: If "scan on" is not selected for a face, the software set disable feature (which tracks when the log is in the saw) will not be active on that face.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Taper (Auto, Full, Half, None) - Lighted Pushbuttons:'
							),
							' These buttons are used to tell the computer the desired taper orientation to use in calculating opening faces and computing runs on unopened faces. Taper rates may be setup either automatically or manually. Auto Taper will select a taper rate based on overall log taper. These taper rates are set up in using the Auto Taper Rates screen. (Main Menu / Setup Options / Scanner Setup / Auto Taper Rates) See Section 4 B-3.c.3 for more information. Full taper is sawn parallel to the bark of a log. Half taper is sawn parallel to the centerline of a log. Selecting No taper (none) causes the knees to be aligned parallel to the saw. See diagrams below.'
						),
						_react2.default.createElement(
							'center',
							null,
							_react2.default.createElement(
								'h3',
								null,
								'Full Taper Solution'
							)
						),
						_react2.default.createElement('img', { src: imgPath + 'taperSolution.PNG', className: 'helpFileImg' }),
						_react2.default.createElement(
							'center',
							null,
							_react2.default.createElement(
								'h3',
								null,
								'Half Taper Solution'
							)
						),
						_react2.default.createElement('img', { src: imgPath + 'taperHalfSolution.PNG', className: 'helpFileImg' }),
						_react2.default.createElement(
							'center',
							null,
							_react2.default.createElement(
								'h3',
								null,
								'Zero Taper Solution'
							)
						),
						_react2.default.createElement('img', { src: imgPath + 'zeroTaperSolution.PNG', className: 'helpFileImg' }),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Scan Calibrate - Lighted Pushbutton:'
							),
							' Pushing this button will initiate the scanner calibration procedure. See section I below for a detailed procedure.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Downtime - Lighted Pushbutton:'
							),
							' If the carriage has been inactive for a specified time (set up in parameter menu), downtime will begin accumulating. To tally this downtime to a defined reason the sawyer must follow these steps:'
						),
						'First press the downtime button. This can be done at any time, even before the computer senses a down condition. This will light the set buttons.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null)
					),
					'Each set button is numbered starting with number one for the top left set button and has a corresponding downtime reason. When a set button is pressed the corresponding downtime category appears on the sawyer\u2019s display. This will cause downtime to be counted for that reason. The set lamps will go out and the downtime button will blink. Downtime will continue to accumulate until the downtime button is pressed again. This allows the sawyer to continue to saw while a piece of downstream equipment such as a resaw is down. Downtime reasons are specified in the Main Menu / View/Report Options / Downtime Summary',
					_react2.default.createElement('br', null),
					_react2.default.createElement('img', { src: imgPath + 'consoleImgFive.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-4. Group 4:'
					),
					' Species, Bark On, Grade Face, Package Modes (Single, Package, Resaw), Face 1F - 1B - 2F - 2B, Patterns, Boards, Cants, Multiples, Fill Mask, Default Set, Cancel Entries.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Species - Lighted Pushbuttons:'
							),
							' Each species button calls up a separate set of operating parameters including lumber sizes, cant priorities, prices (if used), turn sequences, fill mask and scan and taper settings. A mill can use the species buttons to actually saw different species, or they can use them to saw different products out of various sizes or grades of logs. See section D below for more information'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Bark On \u2013 Lighted Pushbutton:'
							),
							' Occasionally, when there is an equipment failure, logs will still have bark on them when they are brought to the carriage. Turning this button on will cause the system to compensate for the extra bark on the outside of the log by taking larger faces. The thickness of the bark is set up in the scanner options. (Main Menu / Setup Options / Scanner Setup / Scanner Options).'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Grade Face - Lighted Pushbutton:'
							),
							' When active (lit) and the sawyer opens a face on \'set\' rather then \'compute,\' this button tells the system to use an alternative minimum opening face width defined in the parameter menu as \'Grade Face.\' Grade Face can be selected manually by the sawyer or can come on automatically when the scanner detects a log that exceeds the diameter set for \'Auto Grade Face.\''
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Package Modes (Single, Package, Resaw) \u2013 Lighted Pushbutton:'
							),
							' These three buttons determine how boards will be cut off the outside of the log. Single Mode allows only single boards to be cut from the log. Package Mode allows boards of the same thickness to be cut as multiples and be sent to resaw. Resaw mode allows the sawyer to cut any combination of multiples. These boards are not necessarily made up of boards of the same thickness. See section 4 B-3.b for more detailed information.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Face (1F, 1B ,2F, 2B, Reset) Lighted Pushbutton:'
							),
							' 1F, 1B, 2F and 2B tell the sawyer which face the computer believes it is sawing. During normal operation, these buttons switch and light up in a pre-programmed autoface sequence. If the sawyer turns a log in a manner that is not consistent with his normal turn sequence, he must press the correct face button before continuing. This allows the computer to keep track of the wood remaining on each axis. The face buttons are also used to set up which faces are automatically scanned and what the fill mask contains for each axis. Under some conditions, it is desirable to rescan the log after the initial scan has been completed. Pushing the Reset button after selecting the face will cause the system to rescan when the set or compute button is pressed.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Patterns (1,2,3,4,5) - Lighted Pushbuttons:'
							),
							' Patterns are an optional feature not found on all systems. In the parameter entries there is a table that allows the mill to define a series of sets and kerfs in sequence, by species. These sequences are then assigned to one of the five pattern buttons. Boards defined in the pattern set up do not have to be included in the fill mask. Whenever the sawyer needs to call in one of these sequences he presses the appropriate pattern button. Typical applications for patterns include mills that cut vertical grain free of heart products on their large logs, or mills that have a fairly consistent depth of shop lumber just inside the sapwood portion of their higher quality logs. In these cases the mills can call in patterns and cut their specialty products without having the specialty products active in their fill mask. When using cant matrix patterns, patterns can be used as cants by selecting them in the fill mask.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Boards - Lighted Pushbuttons:'
							),
							' The \'board\' buttons represent individual board thicknesses. They can be used singly as part of a manually entered stack. As with cants, the number of board buttons and their labels are defined prior to system delivery.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Cants - Lighted Pushbuttons:'
							),
							' The \'cant\' buttons call up a cant set, either as an individual entry, or as a part of a manually entered stack. The system honors the sawyer input. It will put whatever cant the sawyer calls for in the solution without regard to minimum face requirements. Cants widths are defined in the parameter entry tables. Normally, a mill will define cant widths for use in the first axis (1F, 1B) such as 4\'\' and 6\'\'. The number of cant buttons and their label requirements are defined during the order engineering process.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Multiples - Lighted Pushbuttons:'
							),
							' These buttons are not present in all systems. They are used by the sawyer to force a package with two or more like boards, separated by resaw kerf. The sawyer can use the 2x, 3x, and 4x buttons in single mode or he can use them to override a computer selected multiple in package mode.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Fill Mask - Lighted Pushbutton:'
							),
							' The fill mask determines what products will be automatically selected when the sawyer presses the compute button to fill out the log. These products are defined by axis (1 or 2) and must be setup for each species. See Section F Below for more information.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Default Set - Lighted Pushbutton:'
							),
							' This push button allows the sawyer to choose his \'default\' board. The default board is the piece thickness that the system will set to if Set is pushed on a non-computed face and no board buttons are lit. When the default set button is pressed once, it will blink and the current default board size button will light. To change to a different default board simply press the desired button. That button will light and the previous size will go out. When the desired default board is lit, press the default set button again to turn it off. Note that each species normally has its own default set.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Cancel Entries - Momentary Pushbutton:'
							),
							' This switch is used to back out size button pushes the sawyer has made. If the sawyer was entering in a stack to be sawn on a computed run and hit the wrong button, he would press cancel entries button once to remove that piece from the stack. Pressing it a second time removes all entries from the stack.'
						)
					),
					_react2.default.createElement('img', { src: imgPath + 'handleAndFootSwitch.PNG', className: 'helpFileImg' })
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'C-5. Groups Sawyers Handles and Foot Switches:'
					),
					' Backset, Jog Reverse, Jog Forward, Set, Compute, Dogs Up/Dn, Dogs In/Out, Other handle functions, Log Loader, Other Foot Switches. The buttons on the sawyers handles are fairly standard. Button position on the handle, and even which handle a particular button is on, is strictly a matter of mill preference',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Backset - Momentary Pushbutton:'
							),
							' Pressing Backset will cause the knees to back off the current active set (computed, selected from console, or default board) from the last sawline.'
						),
						_react2.default.createElement(
							'b',
							null,
							'WARNING:'
						),
						' If the sawyer has jogged the knees forward or reverse after the last set was achieved, Backset will still back off the current set from the last sawline. If the sawyer has jogged reverse the knees may actually move forward on the Backset command.',
						_react2.default.createElement('br', null),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Jog Reverse Momentary Pushbutton:'
							),
							' The sawyer uses this button to physically position or reposition the knees in the reverse direction. All knees jog in unison.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Jog Forward Momentary Pushbutton:'
							),
							' The sawyer uses this button to physically position or reposition the knees in a forward direction. All knees jog in unison.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Set - Momentary Pushbutton:'
							),
							' The sawyer uses this button to either initiate a minimum opening face scan without a computed solution or to set for the next board. See Section E below for more information'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Compute - Momentary pushbutton:'
							),
							' The sawyer uses the compute button to compute a stack. It could be to open a new face to a computed solution, or to have the system calculate a computed run to finish a log after grade has been removed. Once on a computed run for a face, the compute button acts like the set button. See section E below for more information.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Dogs Up/Dn, Dogs In/Out \u2013 Momentary pushbuttons:'
							),
							' These buttons are used to raise and lower the dogs as well as move them in and out.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Other handle functions \u2013 Momentary pushbuttons:'
							),
							' Cant Kickers, Cant Flippers, Brownsville Turners are examples of various functions frequently found on the sawyers handles.'
						),
						_react2.default.createElement(
							'li',
							null,
							_react2.default.createElement(
								'b',
								null,
								'Log Loader \u2013 Foot Switch:'
							),
							' The log loader serves two purposes; to load the log onto the carriage and to signal the computer that a new log is being loaded. h. Other Foot Switches may be present using spare outputs configured with your system. These may include such things gates or tipples for lumber handling.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D. Species'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Multiple species capability is included as part of the Lewis system. By pressing a different species button a sawyer can call in an entirely different set of sawing rules including different:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'set size values'
						),
						_react2.default.createElement(
							'li',
							null,
							'board or cant selections by axis in the fill masks'
						),
						_react2.default.createElement(
							'li',
							null,
							'sawing modes, (single, resaw by axis)'
						),
						_react2.default.createElement(
							'li',
							null,
							'solution type, (cant matrix)'
						),
						_react2.default.createElement(
							'li',
							null,
							'auto face sequences'
						),
						_react2.default.createElement(
							'li',
							null,
							'scanning rules'
						)
					),
					'Typical examples of how species can be used effectively would include mills that actually bring in mixed species logs during a shift, or cutting separate products out of each species.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'E. Set and Compute'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'On the sawyers handles you will find two buttons, \'\'set\'\' and \'\'compute.\'\' Both will initiate system actions. When to set and when to compute should be fully understood by the sawyer. The following is a chart that outlines the system responses for set and compute actions.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'table',
						null,
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'th',
								null,
								'CONDITION'
							),
							_react2.default.createElement(
								'th',
								null,
								'ACTION'
							),
							_react2.default.createElement(
								'th',
								null,
								'SYSTEM RESPONSE'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Unopened Face'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Set'
							),
							_react2.default.createElement(
								'td',
								null,
								'System will scan and set to a minimum opening face. ',
								_react2.default.createElement(
									'b',
									null,
									'Note:'
								),
								' MOF may be altered with user parameters and may actually be longer or wider than anticipated, if certain features such as',
								_react2.default.createElement(
									'b',
									null,
									'tradeoff depth or auto grade face'
								),
								' are active.'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Opened Face No Computed Run:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Set'
							),
							_react2.default.createElement(
								'td',
								null,
								'System sets off either the set size selected by the sawyer or a default board'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Opened Face Computed Run:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Set'
							),
							_react2.default.createElement(
								'td',
								null,
								'The next board in the computed run will be set off for sawing. ',
								_react2.default.createElement(
									'b',
									null,
									'NOTE:'
								),
								' The system will not normally allow a cant to be set off on front faces.'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Opened Face Computed Run Size pressed:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Set'
							),
							_react2.default.createElement(
								'td',
								null,
								'If the alternate size chosen is in the computed run, the system will pull it from the stack and set it off, moving the original size to the \'\'next\'\' position in the run. If the alternative size is not in the stack, the computed run is cancelled and may need to be recomputed later. This will result in a shim line on back faces (1B, 2B).'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Unopened Face 1F:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Compute'
							),
							_react2.default.createElement(
								'td',
								null,
								'The system will scan and set taper for 1F, and will compute a whole log solution based on the solution option chosen and the active fill mask choices for that axis.'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Unopened Faces:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Compute'
							),
							_react2.default.createElement(
								'td',
								null,
								'The system will scan and set taper for 1B, 2F, 2B the chosen face and will compute the remainder of the log based on the solution option chosen and active fill mask choices for that axis. The sawyer can also manually pre-select a cant and/or cant and board stack before pressing compute. Remaining wood is filled automatically fro m active fill mask sizes.'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Opened Faces No computed run:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Compute'
							),
							_react2.default.createElement(
								'td',
								null,
								'The system will select a cant and stack in sideboards from the fill mask until no size 1B, 2B will fit. The system will set off the shim.'
							)
						),
						_react2.default.createElement(
							'tr',
							null,
							_react2.default.createElement(
								'td',
								null,
								'Opened Faces Computed run:'
							),
							_react2.default.createElement(
								'td',
								null,
								'Press Compute'
							),
							_react2.default.createElement(
								'td',
								null,
								'Acts like \'set\' and will cause the next size in the run to be set off.'
							)
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'F. The Fill Mask & Fill With Last Board Parameter'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Throughout this manual you will find references to "the fill mask." Boards must be entered into the fill mask for each axis of each species. The fill mask should include all products that you typically want the computer to automatically include in a computed run for a particular species.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In the Species Setup screen (located in the Lumber Options menu) is a checkbox called Fill With Last Board. If the checkbox is unchecked when the sawyer presses compute, any remaining wood is filled with boards that have been entered into the fill mask. The computer will attempt to fit the board with the largest size number in the fill mask as many times as it will fit, then will try the next smallest-numbered board, and so on. Boards not in the fill mask can only appear in a computed solution if they are manually selected by the sawyer (or are part of a larger pattern in systems where sawing patterns are used).',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'If the Fill With Last Board checkbox is checked when the sawyer presses compute, all the remaining wood is filled with the last board the sawyer entered into the stack. However, when there is not enough wood left to fill with any more of this (last) board, the computer will attempt to fit the largest board form the fill mask that will fit in the remaining space and will work until no more fill mask boards will fit.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The shim is taken with the slab when compute is pressed on an unopened face. If compute is pressed on a face that is already cut, a separate shim will be computed. If the system is equipped with a slabber, the slabber will take the shim and the saw the first board on the same pass. If no slabber is in use, an extra line will be required to take the shim.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'To set the Fill Mask:'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Select a species and press a face button to define the axis. (For example, 1F for axis 1, 2F for axis 2)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Press the Fill Mask button. The boards and cants that are currently in the fill mask for that species and axis will light up. Pressing a lit button will remove that set from the fill mask, pressing an unlit button will put that set size in the fill mask as an active choice.'
						),
						_react2.default.createElement(
							'li',
							null,
							'All the active choices should be lit and all the inactive choices should be unlit.',
							_react2.default.createElement(
								'li',
								null,
								'Usually both boards and cants should be selected in the axis 1 fill mask.'
							),
							_react2.default.createElement(
								'li',
								null,
								'Repeat the procedure for axis 2. In most cases, only board sizes are active because cant width was established on axis 1. If the cant is actually'
							),
							'dimensioned in both axes, e.g. a tie, timber, or pallet cant, then axis 2 may also contain a cant size.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Press the fill mask button again to turn off the lamp and resume normal operation.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'G. Stack Entry'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In many grade mills and quite a few dimension mills a sawyer needs to have the ability to manually enter a stack. He may have a few products or small orders to fill that are not included in a day\u2019s normal production, or he may see the opportunity to take some high value products that werent predictable when he first opened a log.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The Lewis system allows a sawyer to do this quite easily and still lets him use the normal set and compute routines. For illustration, we will discuss stack entry on a back face first.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'In the Species Setup screen (located in the Lumber Options menu), there is a checkbox, Fill With Last Board. In essence, a question is being asked: Does the sawyer want to fill with the last board chosen? This parameter determines how the wood not used by the sawyer entered stack is to be filled.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'If Fill With Last Board is checked, the sawyer can enter any combination of cants and boards, singly or using his multiple buttons \'\'2x,3x,4x\'\' to cause the headrig to make resaw packages. The system will then stack them in the order they were entered. When he has entered his last board and presses the \'\'compute\'\' button, the system will enter his stack and fill any remaining wood with the last board in the stack. When there is not enough wood to fit another (last) board, the system will find the largest active fill mask board that will fit in the available space and work from there until no fill mask board will fit. The shim is taken with the slab if the stack entry/compute was on an unopened face. If the stack was entered and computed on an opened face, a shim line will be computed.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'If Fill with Last Board chosen is set to no (unchecked), the stack that the sawyer enters stays exactly how he enters it. Any additional fill boards needed to utilize the wood are picked from the fill mask. His last chosen board is not always repeated.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'If the sawyer enters a stack on the front face, the cant he chooses will be centered and the sideboards he chooses will be added to both sides of the log. Normal fill rules apply to take care of any excess wood. The sawyer entered boards are stacked from the slab in, in the order they were pressed.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'H. Sawyers Tutorial (How to Saw a Log)'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Depending on what type of logs you process and your production goals, such as grade and dimension, the Lewis system can be set up to handle most sawing processes. After a short adjustment period, the sawyer will learn to use the \'\'set\'\' button and the \'\'compute\'\' button at appropriate times.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'To refresh your memory, \'\'set\'\' on an unopened face will trigger the scan process and produce a \'\'minimum\'\' opening face.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'\'\'Set\'\' on an opened face will cause the default board or the selected board, either manually entered or part of a computed run, to be set off.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The \'\'compute\'\' button tells the computer to use the chosen method of optimization (value driven, cant matrix) and the cants and boards selected in the \'\'Fill Mas\'\' to arrive at a computer driven solution for the whole or partially processed log. This computed run will be displayed on the sawyers display.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'H-1. Simple Dimension Sawing'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						{ type: 'a' },
						_react2.default.createElement(
							'li',
							null,
							'Sawyer loads log and dogs it in place'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer presses \'\'Compute.\'\' The system will scan and set taper for the opening face'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer saws the first line'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer checks his display, and if he agrees with the next cut, presses the \'\'Set\'\' button'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer saws the next line and continues until a cant size is next on the cut list'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer turns the log'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer repeats the process for the second side, \'\'Compute\'\' followed by successive \'\'Sets\'\''
						)
					),
					_react2.default.createElement(
						'b',
						null,
						'WARNING: There are variations to the above. The sawyer may choose to manually saw front faces using his set button first and compute only on back faces.'
					),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'H-2. Grade Sawing'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Sawyer loads log and dogs it in place'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer presses \'\'Set.\'\' The system will scan and set taper for a minimum face.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer saws off the slab, or slab and board if sawing \'\'slab attached.\'\''
						),
						_react2.default.createElement(
							'li',
							null,
							'Sawyer chooses the next set from the console and presses \'\'set\'\' to set it off. (If the indicator light for the desired board is already lit, or the desired board is the \'\'default board\'\', the sawyer only presses \'\'set.\'\')'
						),
						_react2.default.createElement(
							'li',
							null,
							'When out of grade for that particular face, turn and dog.'
						),
						_react2.default.createElement(
							'li',
							null,
							'At sawyer discretion, choose \'\'set\'\', \'\'compute\'\', or enter a cant size and board then \'\'compute\'\'.'
						),
						_react2.default.createElement(
							'li',
							null,
							'\'\'Set\'\' will open to a minimum face (an internal shim will likely result when you \'\'compute\'\' after sawing off a few grade boards.)'
						),
						_react2.default.createElement(
							'li',
							null,
							'\'\'Compute\'\' will place the highest priority cant next to the knees and will fill remaining wood from the fill mask.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Entering a cant and sideboard combination prior to \'\'compute\'\' will allow the sawyer to stack in a run. If \'\'fill with last board\'\' is checked in the Species Setup, the last board entered in the stack will fill the remaining wood until that board will not fit. The fill mask takes over after that. If fill with last board is unchecked, remaining wood between the entered boards and the cant or knees will be fit from the fill mask.'
						),
						_react2.default.createElement(
							'li',
							null,
							'For third and fourth sides, repeat (a) through (i)'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'I. Scanner Calibration Procedure'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Accurate placement of faces on the log is dependent on having a good scanner calibration. Lewis Controls provides two different types of scanning systems; A laser 3D scanner and a light curtain photocell scanner. The calibration procedures, which are similar, are described below.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'I-1. Laser 3D Scanner Calibration Procedure'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The 3D laser scanners provide log profile information to the computer. That information is used to generate a solution for the log. The distance of the scan heads from the saw line, coupled with the position of the knees and the scanner data is critical to obtaining accurate solutions. When the scanner has been properly calibrated, these distances will be precise leading to correct solutions. Automatically calibrating the scanner is a simple and quick procedure that assures scanner accuracy. Follow the steps below:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Calibrate all the knees and verify that the set achieved lamp on the operator\u2019s console comes on for each cut. Any knee calibration or setting accuracy error will be applied to the scanner calibration.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Clean all \u201Cwindows\u201D on the scan heads \u2013 that is, the small round apertures where the lasers come out, as well as the oval cameras at each end of the head. Follow safety procedures and turn the scanners off prior to cleaning. Use a clean soft, dry cloth. If stubborn deposits are present, try using a window cleaner or alcohol. Do not use industrial solvents.'
						),
						_react2.default.createElement(
							'li',
							null,
							'If possible, position a log on the carriage so that all scan lines will be blocked during the calibration process.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Make four faces on the log. The system needs a square backstand to ensure the log is flush against the knees, and it needs a square front and top as well. After making the last pass to square up the cant, leave the hydraulics on and refrain from jogging the knees.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Position the carriage so that the cant is directly in front of the scanners. Press the SCAN CALIBRATE button on the operator\u2019s console. The button will light indicating that the system is ready to start the calibration process.',
							_react2.default.createElement(
								'li',
								null,
								'Press the Set button to start the calibration. After a few seconds, the console will beep when the calibration is complete.'
							),
							_react2.default.createElement(
								'b',
								null,
								'NOTE:'
							),
							' If the cant is long enough, position the carriage so that both ends of the cant are beyond the end lasers. This will ensure that the scanner can \u201Csee\u201D the entire cant. If the cant is too short, calibrate twice: once with the front of the cant just beyond the first laser, and again with the back of the cant just beyond the last laser.'
						),
						_react2.default.createElement(
							'li',
							null,
							'When calibration is complete, press the SCAN CALIBRATE button again and the lamp will go off. Check the L4 Scanner setup screen to view the results. (Main Menu / Setup Options / Scanner Setup / L4 Scanner Setup). Compare the Current and Last calibration values. You are now again ready to manufacture lumber and can finish cutting the cant if necessary.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'I-2 Photocell Scanner Calibration Procedure'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The photocell scanners, like the 3D scanner, also provide log profile information to the computer that is used for creating a solution.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Automatically calibrating the scanner is a simple and quick procedure that assures scanner accuracy. Follow the steps below:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ol',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Calibrate all the knees and verify that the set achieved lamp on the operator\u2019s console comes on for each cut. Any knee calibration or setting accuracy error will be applied to the scanner calibration.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Clean all the photocells \u2013 both top and bottom. Generally, the top photocells will not require much in the way of cleaning. For the bottom scan bar, clean each individual photocell. Use a clean soft, dry cloth. If stubborn deposits are present, try using a window cleaner or alcohol. Do not use industrial solvents.'
						),
						_react2.default.createElement(
							'li',
							null,
							'If possible, position a log on the carriage so that all scan lines will be blocked during the calibration process.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Make four faces on the log. The system needs a square backstand to ensure the log is flush against the knees. After making the last pass to square up the cant, leave the hydraulics on and refrain from jogging the knees.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Position the carriage so that the cant is directly in front of the scanners. Press the ',
							_react2.default.createElement(
								'b',
								null,
								'SCAN CALIBRATE'
							),
							' button on the operator\u2019s console. The button will light indicating that the system is ready to start the calibration process.'
						),
						_react2.default.createElement(
							'li',
							null,
							' Press the Set button to start the calibration. The system will automatically start the process of moving the cant back and forth (into and out of the saw line)'
						),
						_react2.default.createElement(
							'b',
							null,
							'NOTE: If the cant is long enough, position the carriage so that both ends of the cant are beyond the end photocells. This will ensure that the scanner can \u201Csee\u201D the entire cant. If the cant is too short, calibrate twice: once with the front of the cant just beyond the first photocell, and again with the back of the cant just beyond the last photocell.'
						),
						_react2.default.createElement('br', null),
						_react2.default.createElement(
							'li',
							null,
							'When calibration is complete, press the SCAN CALIBRATE button again and the lamp will go off. Check the Scanner setup screen to view the results. (Main Menu / Setup Options / Scanner Setup / Scanner Setup). Compare the Current and Last calibration values. You are now again ready to manufacture lumber and can finish cutting the cant if necessary.'
						)
					)
				),
				_react2.default.createElement('br', null)
			);
		}
	}]);

	return SectionFive;
}(_react.Component);

exports.default = SectionFive;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var SectionSix = function (_Component) {
	_inherits(SectionSix, _Component);

	function SectionSix() {
		_classCallCheck(this, SectionSix);

		return _possibleConstructorReturn(this, (SectionSix.__proto__ || Object.getPrototypeOf(SectionSix)).apply(this, arguments));
	}

	_createClass(SectionSix, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'article',
				{ className: 'artPDF' },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'SECTION VIII - MAINTENANCE NOTES'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A. The setworks hydraulic system'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The major reason for adding linear positioners to a carriage is to improve the knee setting accuracy and speed. To do this, very close tolerance components are used with high pressure. Satisfactory system operation and hydraulic component life depends greatly on the adjustments of the hydraulic system being done and checked regularly. It is also necessary to consider how one adjustment may effect other adjustments.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-1. Hydraulic Cleanliness'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Opening the hydraulic system exposes the system to the risk of introducing contamination (dirt). Contamination can cause early valve failures. It is very important to do all you can to prevent introducing contaminants. It is also important to understand that some contaminants are going to get in the system. To flush as much of the contaminants as possible through the plumbing and trap them in the filters, we furnish ball valves to control oil flow routing.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-2. Hydraulic Filters'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Each filter is equipped with an indicator that shows when the filter is becoming plugged. The filters should be changed when indicated or after 6 months use, whichever comes first. Any filter change should be followed by at least a one hour flush of the hydraulic system.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'A-3. Hydraulic Oil'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The hydraulic oil received from your distributor is never as clean as the specification stated by servo valve manufacturers. It is very important to flush this oil before it is used to move positioners. We recommend a minimum of 4 hours.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The grade of hydraulic oil you choose will certainly have an effect on the system operation. Most pump manufacturers recommend a grade or weight of 68. The choice must, however, be tempered by other factors. The oil viscosity range must be such that cold weather will not cause it to gel in the plumbing and the cylinders and warm weather will not lower the viscosity to the point where it loses lubricating properties. The power units we supply have tank heaters and oil coolers to help the mill keep the oil in a desirable viscosity range. Other possibilities are locating the power unit for effective cooling and heating and to minimize the length of plumbing runs. Under severe conditions, wrapping the plumbing or using heat tape may be advisable. Keeping the reservoir topped off and fully retracting the cylinders when the carriage is idle also can help keep oil in the desired temperature range.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'B. Component Handling'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Reasonable care and precautions are necessary when handling electronic and hydraulic components. The system\u2019s AC power should always be switched off before servicing any electrical parts.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'B-1. Wiring'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When running or replacing wiring the areas which are required to flex (such as the pantograph arms) should have extra length and strain relief if possible. Wiring should be protected from abrasion, excess heat, dirt and moisture. Wire terminations must be tight enough to ensure a good electrical connection. Excessive tightening will cause broken wires.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'B-2. Circuit Boards'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When changing circuit boards remove power by turning the system power off. Remove any cables which are in the way of the board. (Note where each cable plugs in.) Take care where you put the circuit board so it does not get damaged, including damage from static electricity.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When all the boards and cables are back in their proper place, the system can be turned on and tested for proper operation.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'C. Intermittent Problems'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When trying to locate the cause of an intermittent problem, it is frequently advisable to keep a log of the activities, i.e., replaced circuit board XXX with spare circuit board YYY. You will not only know what steps you have tried, but when the problem is resolved you will know what parts need repair or replacement to keep your spares ready to support your system.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D. Installing the Spare Black Box'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'There are ten steps to correctly install the spare black box. Please follow the instructions for each step to guard against loss of data or excessive downtime.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 1. Determine that a replacement black box is needed'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'An LCI engineer has helped you troubleshoot your system, and the diagnosis is that your black box computer needs to be replaced. Take care to follow these steps in the order presented.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 2. Save Pvalues to Compact Flash (if possible)'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'If your computer is still operable, you need to run a small program that will save all your current program values to an external storage device called \u201CFlash.\u201D If you are unable to run your computer, simply remove the compact flash card from the SanDisk reader and save it for later. The compact flash will have the values from the last time you backed up your system (hopefully that has been done on a regular basis). If you can run your computer, follow these steps to perform one final backup.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'To run the program, click on Start, point to Programs and Carriage Menu and then click on Save Program to Flash.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'savePVaules.PNG', className: 'helpFileImg' })
					),
					'A window will pop up momentarily; when the window disappears, you are ready to save current species settings.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'From the Main Menu of Lewis Controls software click on ',
					_react2.default.createElement(
						'b',
						null,
						'File Options'
					),
					' and then click on ',
					_react2.default.createElement(
						'b',
						null,
						'Save Current Species & Machine Values to Disk'
					),
					'. Figure 2 shows the window that will come up.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'hlpViewMachine.PNG', className: 'helpFileImg' })
					),
					'Click in the box for \u201CBackup values to flash\u201D (as shown) and click \u201CAccept.\u201D The window will disappear and your values will be backed up. Now you should remove the compact flash card from the SanDisk reader and save it for later.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					'D \u2013 3. Shut Down and Power off the black box Click on the Start button and choose \u201CShut Down.\u201D',
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'shuttingDown.PNG', className: 'helpFileImgSmall' })
					),
					'When the drop down window says \u201CShut down,\u201D Click \u201COK\u201D on the Shut Down Windows dialog, as shown below in Figure 4.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'shutDownIndication.PNG', className: 'helpFileImgSmall' })
					),
					'When the computer indicates you can turn the power off, turn off the power by pressing the red Power button on the lower left side of the front of the machine. At this time make sure that the Control Panel and PLC have been turned off as well.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 4. Unplug all input leads'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'After the computer has been turned off, remove the panel from the top of the black box. The top has two thumbscrews and should lift off easily after they have been loosened. After removing the top, shut off the power supply by flipping the switch next to the power cord (this switch is circled in Figure 5).',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'blackBrickPower.PNG', className: 'helpFileImgSmall' })
					),
					'Next, unplug all the input leads from the top of the computer. You may wish to label each lead so you know where it goes when you hook up the spare Here is a list of items to be removed:',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Power supply cable (black)'
						),
						_react2.default.createElement(
							'li',
							null,
							'USB connectors:'
						),
						_react2.default.createElement(
							'ul',
							null,
							_react2.default.createElement(
								'li',
								null,
								'Flash (Do not remove)'
							),
							_react2.default.createElement(
								'li',
								null,
								'Shape scan input'
							),
							_react2.default.createElement(
								'li',
								null,
								'Touch screen input'
							),
							_react2.default.createElement(
								'li',
								null,
								'UPS communication'
							)
						),
						_react2.default.createElement(
							'li',
							null,
							'Remove the protective plastic strips from the top and bottom of the hole on the left and slide the uLinks USB to 485 converter out through the hole. Put the plastic strips back into their original position.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Network cable to Ethernet Hub'
						),
						_react2.default.createElement(
							'li',
							null,
							'Keyboard and mouse cords (color coded plugs)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Phone cord \u2013 Modem card (if present)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Monitor cables (2) \u2013 Sawyer Display and Touch Screen'
						),
						_react2.default.createElement(
							'li',
							null,
							'Com 1 and Com 2 serial cables (gray)'
						),
						_react2.default.createElement(
							'li',
							null,
							'12V DC connection (black and yellow twisted wire)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Laser scanner fiber optic cables (label these to maintain order)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Remove the Ethernet hub from the right side of the black box'
						),
						_react2.default.createElement(
							'li',
							null,
							'Remove the compact flash card from the SanDisk reader.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Last, unplug the five ribbon cables that plug into the left side of the black box. The ribbon cables are already labeled for installation convenience.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 5. Remove black box from back panel'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Remove the four nuts from the bolts that hold the black box to the back panel, and lift it off the panel. Carefully package the black box for shipping to Lewis Controls for repair.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 6. Place spare black box on back panel'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Now that the old black box has been disconnected and removed, we start to assemble the spare system by following the reverse of what we have done so far.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Place the spare black box on the back panel and secure it with the nuts you removed in Step VI.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'blackBoxSpare.PNG', className: 'helpFileImg' })
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 7. Plug in all leads'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Before putting on the top panel, you must reattach all the cables and cords that are attached to the top of the computer.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Use this list and Figure 6 to assist you in plugging everything back in.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'ul',
						null,
						_react2.default.createElement(
							'li',
							null,
							'Power supply cable (black)'
						),
						_react2.default.createElement(
							'li',
							null,
							'USB connectors:'
						),
						_react2.default.createElement(
							'ul',
							null,
							_react2.default.createElement(
								'li',
								null,
								'Flash (Should already be present in the new black box)'
							),
							_react2.default.createElement(
								'li',
								null,
								'Shape scan input'
							),
							_react2.default.createElement(
								'li',
								null,
								'Touch screen input'
							),
							_react2.default.createElement(
								'li',
								null,
								'UPS communication'
							)
						),
						_react2.default.createElement(
							'li',
							null,
							'Attach Ethernet hub to outside of black box on the right side and reconnect'
						),
						_react2.default.createElement(
							'li',
							null,
							'network cable to Hub'
						),
						_react2.default.createElement(
							'li',
							null,
							'Keyboard and mouse cords (color coded plugs)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Phone cord (if present)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Monitor cables (2) \u2013 Sawyer Display and Touch Screen'
						),
						_react2.default.createElement(
							'li',
							null,
							'Com 1 and Com 2 serial cables'
						),
						_react2.default.createElement(
							'li',
							null,
							'12V DC connection (black and yellow twisted wire)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Laser scanner fiber optic cables (order is important!)'
						),
						_react2.default.createElement(
							'li',
							null,
							'Insert the compact flash card into the SanDisk reader'
						),
						_react2.default.createElement(
							'li',
							null,
							'Remove the protective plastic strips from the top and bottom of the hole on the left and slide the uLinks USB to 485 converter back in through the hole.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Reconnect to USB. Put the plastic strips back into their original position.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Plug the five ribbon cables into the side connectors on the left side of the box.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Flip the power switch near the power cord so the \u201CI\u201D is down.'
						),
						_react2.default.createElement(
							'li',
							null,
							'Replace the cover over the top of the black box.'
						)
					)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 8. Power on'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Turn the power on by pressing the red \u201CPower\u201D switch on the front of the black box. (It may be necessary to remove the small black plate at the bottom to gain access to the switch). You should prevent the Carriage software from starting. To do this, hold down the Shift key as Windows is booting up (start holding down the Shift key when a small window appears that says \u201CWindows is starting up\u201D). You will get a window prompting for a password; use the password \u201Ccarriage\u201D to continue. As soon as you enter the password, you must depress the Shift key again! If the Carriage software starts, close it before continuing on to Step IX.',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 9. Restore values from Flash'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'If you were able to save your program values to the Flash disk (Step II), or even if you weren\u2019t but had backup values saved previously, click on:',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'i',
						null,
						'Start->Programs->Carriage Menu->Recover Values From Flash.'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'flashValues.PNG', className: 'helpFileImg' })
					),
					'A new window will open, and before you can read the contents of the window, you will be presented with a dialog as shown in Figure 8. Clicking \u201CYes\u201D will allow you to view the contents of the new window.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'flashValues.PNG', className: 'helpFileImg' })
					),
					'The new window is a web page with two buttons on the bottom. File names (and the dates that they were saved) will be displayed with \u201CCurrent\u201D files names on the left and the \u201CSaved\u201D file names on the right. Files under the \u201CCurrent\u201D column are backed up automatically by the system on a periodic basis. Files under the \u201CSaved\u201D column are backed up only when specifically commanded by using the system menus. (Main Menu / File Options / Save Current Species & Machine Values to Disk) Click the button on the right that says, \u201CRecover from Saved Flash Values.\u201D',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'recoverValuesFlash.PNG', className: 'helpFileImg' })
					),
					'Click Yes to confirm the copy.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'When it is finished, you will be presented with a dialog confirming success, as',
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'center',
						null,
						_react2.default.createElement('img', { src: imgPath + 'flashOk.PNG', className: 'helpFileImgSmall' })
					),
					'Click \u201COK,\u201D close the window, and continue to the next step.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null),
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'b',
						null,
						'D \u2013 10. Test and run'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'Open the Carriage menu and see if the carriage can make lumber. Make sure the Control Panel and PLC have been switched on.',
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					_react2.default.createElement(
						'b',
						null,
						'E. LCI Service'
					),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'The LCI engineering department is available to assist your maintenance efforts. We will provide phone support or, if needed, on-site support. Our support people include an in-house service technician, who can handle many of the mill problems through phone support, repair of defective parts, or by sending spare parts to the mill.',
					_react2.default.createElement('br', null)
				),
				_react2.default.createElement('br', null)
			);
		}
	}]);

	return SectionSix;
}(_react.Component);

exports.default = SectionSix;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fs = __webpack_require__(36);

var AddHelpFile = function (_Component) {
   _inherits(AddHelpFile, _Component);

   function AddHelpFile(props) {
      _classCallCheck(this, AddHelpFile);

      var _this = _possibleConstructorReturn(this, (AddHelpFile.__proto__ || Object.getPrototypeOf(AddHelpFile)).call(this, props));

      _this.state = {
         name: '',
         menu: '',
         title: '',
         path: '',
         image: '',
         content: ''
      };
      return _this;
   }

   _createClass(AddHelpFile, [{
      key: 'handleChange',
      value: function handleChange(e) {
         var target = e.target;
         var value = target.type === 'checkbox' ? target.checked : target.value;
         var name = target.name;
         this.setState(_defineProperty({}, name, value));
      }
   }, {
      key: 'handleSubmit',
      value: function handleSubmit(e) {
         var newFile = {
            name: '',
            menu: '',
            title: '',
            image: '',
            path: '',
            content: '',
            section: 'Section IV',
            video: 'n'
         };

         var dialogName = this.state.title;
         dialogName = dialogName.toLowerCase().replace(/\s+/g, '');
         // cap the first letter in the name and add the rest of the name 
         dialogName = dialogName.charAt(0).toUpperCase() + dialogName.substr(1);

         // creat the new json object help file
         newFile.name = dialogName;

         if (this.state.image === '') {
            newFile.image = "./app/img/hlpDefault.png";
         } else {
            var imgName = "./app/img/" + this.state.image;
            newFile.image = imgName;
         }

         newFile.menu = this.state.menu;
         newFile.title = this.state.title;
         newFile.path = this.state.path;
         newFile.content = this.state.content;
         //console.log(newFile);

         // open the json data file
         var dataJson = fs.readFileSync('./app/data/HelpFileData.json');
         var dataHlpFiles = JSON.parse(dataJson);
         console.log(dataHlpFiles);
         dataHlpFiles.push(newFile);

         // write out the update json data
         var dataUpdated = JSON.stringify(dataHlpFiles, null, 2);
         fs.writeFile('./app/data/HelpFileData.json', dataUpdated, finished);
         function finished(Err) {
            console.log('saved correctly');
         }
         //e.preventDefault();
      }
   }, {
      key: 'render',
      value: function render() {
         return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
               'form',
               { onSubmit: this.handleSubmit.bind(this) },
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'TITLE:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'title', placeholder: 'Load Default Values', value: this.state.title, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'MENU SELECT:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'select',
                  { className: 'txtSelect', name: 'menu', value: this.state.menu, onChange: this.handleChange.bind(this) },
                  _react2.default.createElement(
                     'option',
                     { value: 'MainMenu' },
                     'Main Menu'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'FileOptions' },
                     'File Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'SetUpOptions' },
                     'Setup Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'StartUpOptions' },
                     'Startup Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'RunTimeOptions' },
                     'Runtime Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'ScannerSetup' },
                     'Scanner Setup'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'ShiftSetUp' },
                     'Shift Setup'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'ViewReportOptions' },
                     'View Reports Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'TroubleShootingOptions' },
                     'Troubleshooting Options'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'PATH:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'path', placeholder: 'Setup / Runtime / Etc', value: this.state.path, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'IMAGE:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'image', placeholder: 'Place IMG into ./app/img folder and type the name here ex. hlpLoadDefault.png', value: this.state.image, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'CONTENT:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('textarea', { className: 'txtInput', name: 'content', value: this.state.content, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'subBtn', type: 'submit', value: 'Submit' })
            )
         );
      }
   }]);

   return AddHelpFile;
}(_react.Component);

AddHelpFile.propTypes = {
   data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

AddHelpFile.defaultProps = {
   data: _HelpFileData2.default
};

exports.default = AddHelpFile;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fs = __webpack_require__(36);
var imgPath = './app/img/';

var upperStyle = {
   textTransform: 'uppercase'
};

var DeleteHelpFile = function (_Component) {
   _inherits(DeleteHelpFile, _Component);

   function DeleteHelpFile(props) {
      _classCallCheck(this, DeleteHelpFile);

      var _this = _possibleConstructorReturn(this, (DeleteHelpFile.__proto__ || Object.getPrototypeOf(DeleteHelpFile)).call(this, props));

      _this.state = {
         title: ''
      };
      return _this;
   }

   _createClass(DeleteHelpFile, [{
      key: 'handleChange',
      value: function handleChange(e) {
         var target = e.target;
         var value = target.type === 'checkbox' ? target.checked : target.value;
         var name = target.name;
         this.setState(_defineProperty({}, name, value));
      }
   }, {
      key: 'handleSubmit',
      value: function handleSubmit(e) {
         var dialogName = this.state.title;
         dialogName = dialogName.toLowerCase().replace(/\s+/g, '');
         // cap the first letter in the name and add the rest of the name 
         dialogName = dialogName.charAt(0).toUpperCase() + dialogName.substr(1);

         // open the json data file
         var dataJson = fs.readFileSync('./app/data/HelpFileData.json');
         var tempData = JSON.parse(dataJson);

         // delete the dialog 
         tempData = tempData.filter(function (obj) {
            return dialogName !== obj.name;
         });

         // write out the update json data
         tempData = JSON.stringify(tempData, null, 2);
         fs.writeFile('./app/data/HelpFileData.json', tempData, finished);
         function finished(Err) {
            console.log('deleted:' + dialogName);
         }
         //e.preventDefault();
      }
   }, {
      key: 'render',
      value: function render() {
         var _this2 = this;

         var getRawHTML = function getRawHTML(html) {
            return {
               __html: html
            };
         };

         var renderOutFile = this.props.data.filter(function (obj) {
            return _this2.state.title === obj.title;
         }).map(function (obj, idx) {
            return _react2.default.createElement(
               'div',
               { key: idx, className: 'fadingDiv' },
               _react2.default.createElement(
                  'div',
                  { className: 'displayLineBreak' },
                  _react2.default.createElement(
                     'h2',
                     { style: upperStyle },
                     ' ',
                     obj.title,
                     ' '
                  ),
                  _react2.default.createElement(
                     'b',
                     null,
                     'Path:'
                  ),
                  ' ',
                  obj.path,
                  ' ',
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) }),
                  _react2.default.createElement('br', null)
               )
            );
         });

         return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
               'form',
               { onSubmit: this.handleSubmit.bind(this) },
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'Dialog Title to Delete:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'title', placeholder: 'Type Dialog Title Here - It will appear below if found', value: this.state.title, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'subBtn', type: 'submit', value: 'DELETE' })
            ),
            renderOutFile
         );
      }
   }]);

   return DeleteHelpFile;
}(_react.Component);

DeleteHelpFile.propTypes = {
   data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

DeleteHelpFile.defaultProps = {
   data: _HelpFileData2.default
};

exports.default = DeleteHelpFile;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fs = __webpack_require__(36);
var imgPath = './app/img/';

var upperStyle = {
   textTransform: 'uppercase'
};

var EditHelpFile = function (_Component) {
   _inherits(EditHelpFile, _Component);

   function EditHelpFile(props) {
      _classCallCheck(this, EditHelpFile);

      var _this = _possibleConstructorReturn(this, (EditHelpFile.__proto__ || Object.getPrototypeOf(EditHelpFile)).call(this, props));

      _this.state = _defineProperty({
         diaToFind: '',
         menu: '',
         title: '',
         path: '',
         image: '',
         phContent: '',
         phTitle: '',
         phPath: '',
         phImage: ''
      }, 'phContent', '');
      return _this;
   }

   _createClass(EditHelpFile, [{
      key: 'handleChange',
      value: function handleChange(e) {
         var target = e.target;
         var value = target.type === 'checkbox' ? target.checked : target.value;
         var name = target.name;
         this.setState(_defineProperty({}, name, value));
      }
   }, {
      key: 'handleSubmit',
      value: function handleSubmit(e) {
         //e.preventDefault();
         var dialogName = this.state.title;
         dialogName = dialogName.toLowerCase().replace(/\s+/g, '');
         // cap the first letter in the name and add the rest of the name 
         dialogName = dialogName.charAt(0).toUpperCase() + dialogName.substr(1);

         // open the json data file
         var dataJson = fs.readFileSync('./app/data/HelpFileData.json');
         var dataHlpFiles = JSON.parse(dataJson);

         var newMenu = this.state.menu;
         var newTitle = this.state.title;
         var newPath = this.state.path;
         var newContent = this.state.content;
         var newImage = this.state.image;

         dataHlpFiles.some(function (obj) {
            if (obj.name === dialogName) {
               if (newImage !== '') {
                  obj.image = newImage;
               }
               obj.title = newTitle;
               obj.path = newPath;
               obj.content = newContent;
               obj.menu = newMenu;
               return true;
            }
         });

         function compare(a, b) {
            if (a.menu < b.menu) return -1;
            if (a.menu > b.menu) return 1;
            return 0;
         }

         dataHlpFiles.sort(compare);

         var dataUpdated = JSON.stringify(dataHlpFiles, null, 2);
         fs.writeFile('./app/data/HelpFileData.json', dataUpdated, finished);
         function finished(Err) {
            console.log('saved correctly');
         }
      }
   }, {
      key: 'render',
      value: function render() {
         var _this2 = this;

         var getRawHTML = function getRawHTML(html) {
            return {
               __html: html
            };
         };

         var renderOutFile = this.props.data.filter(function (obj) {
            return _this2.state.diaToFind === obj.title;
         }).map(function (obj, idx) {
            _this2.state.phTitle = obj.title;
            _this2.state.phImage = obj.image;
            _this2.state.phPath = obj.path;
            _this2.state.phContent = obj.content;
            return _react2.default.createElement(
               'div',
               { key: idx, className: 'fadingDiv' },
               _react2.default.createElement(
                  'div',
                  { className: 'displayLineBreak' },
                  _react2.default.createElement(
                     'h2',
                     { style: upperStyle },
                     ' ',
                     obj.title,
                     ' '
                  ),
                  _react2.default.createElement(
                     'b',
                     null,
                     'Path:'
                  ),
                  ' ',
                  obj.path,
                  ' ',
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) }),
                  _react2.default.createElement('br', null)
               )
            );
         });

         var renderOutHTML = this.props.data.filter(function (obj) {
            return _this2.state.diaToFind === obj.title;
         }).map(function (obj, idx) {
            return _react2.default.createElement(
               'div',
               { key: idx, className: 'fadingDiv' },
               _react2.default.createElement(
                  'div',
                  { className: 'displayLineBreak' },
                  _react2.default.createElement(
                     'h2',
                     { style: upperStyle },
                     ' ',
                     obj.title,
                     ' '
                  ),
                  _react2.default.createElement(
                     'b',
                     null,
                     'Path:'
                  ),
                  ' ',
                  obj.path,
                  ' ',
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('br', null),
                  _react2.default.createElement(
                     'div',
                     null,
                     obj.content
                  ),
                  _react2.default.createElement('br', null)
               )
            );
         });

         return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
               'label',
               null,
               _react2.default.createElement(
                  'b',
                  null,
                  'SEARCH BY DIALOG TITLE'
               )
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'diaToFind', placeholder: 'Type Dialog Title Here - It will appear below if found', value: this.state.diaToFind, onChange: this.handleChange.bind(this) }),
            _react2.default.createElement('br', null),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
               'form',
               { onSubmit: this.handleSubmit.bind(this) },
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'TITLE (NOTE THIS FIELD MUST BE FILLED OUT TO UPDATE):'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'title', placeholder: this.state.phTitle, value: this.state.title, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'MENU SELECT:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'select',
                  { className: 'txtSelect', name: 'menu', value: this.state.menu, onChange: this.handleChange.bind(this) },
                  _react2.default.createElement(
                     'option',
                     { value: 'MainMenu' },
                     'Main Menu'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'FileOptions' },
                     'File Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'SetUpOptions' },
                     'Setup Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'StartUpOptions' },
                     'Startup Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'RunTimeOptions' },
                     'Runtime Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'ScannerSetup' },
                     'Scanner Setup'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'LumberOptions' },
                     'Lumber Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'ShiftSetUp' },
                     'Shift Setup'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'ViewReportOptions' },
                     'View Reports Options'
                  ),
                  _react2.default.createElement(
                     'option',
                     { value: 'TroubleShootingOptions' },
                     'Troubleshooting Options'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'PATH:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'path', placeholder: this.state.phPath, value: this.state.path, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'IMAGE:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'image', placeholder: this.state.phImage, value: this.state.image, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'CONTENT:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('textarea', { className: 'txtInput', name: 'content', placeholder: this.state.phContent, value: this.state.content, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'subBtn', type: 'submit', value: 'UPDATE' })
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
               'h3',
               null,
               'VIEW OF HELP FILE'
            ),
            _react2.default.createElement('br', null),
            renderOutFile,
            _react2.default.createElement(
               'h3',
               null,
               'VIEW OF HTML'
            ),
            _react2.default.createElement('br', null),
            renderOutHTML
         );
      }
   }]);

   return EditHelpFile;
}(_react.Component);

EditHelpFile.propTypes = {
   data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

EditHelpFile.defaultProps = {
   data: _HelpFileData2.default
};

exports.default = EditHelpFile;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _PDFData = __webpack_require__(92);

var _PDFData2 = _interopRequireDefault(_PDFData);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fs = __webpack_require__(36);
//var fsTwo = require('fs');

var imgPath = './app/img/';

var upperStyle = {
   textTransform: 'uppercase'
};

var EditPDF = function (_Component) {
   _inherits(EditPDF, _Component);

   function EditPDF(props) {
      _classCallCheck(this, EditPDF);

      var _this = _possibleConstructorReturn(this, (EditPDF.__proto__ || Object.getPrototypeOf(EditPDF)).call(this, props));

      _this.state = {
         diaToFind: '',
         name: '',
         section: '',
         content: '',
         phName: '',
         phSection: '',
         phContent: ''
      };
      return _this;
   }

   _createClass(EditPDF, [{
      key: 'handleChange',
      value: function handleChange(e) {
         var target = e.target;
         var value = target.type === 'checkbox' ? target.checked : target.value;
         var name = target.name;
         this.setState(_defineProperty({}, name, value));
      }
   }, {
      key: 'handleSubmit',
      value: function handleSubmit(e) {
         //e.preventDefault();
         var dialogName = this.state.diaToFind;
         //dialogName = dialogName.toLowerCase().replace(/\s+/g, '');
         // cap the first letter in the name and add the rest of the name 
         //dialogName = dialogName.charAt(0).toUpperCase() + dialogName.substr(1);

         // open the json data file
         var dataJson = fs.readFileSync('./app/data/PDFData.json');
         var dataHlpFiles = JSON.parse(dataJson);

         var newContent = this.state.content;

         dataHlpFiles.some(function (obj) {
            if (obj.name === dialogName) {
               obj.content = newContent;
               return true;
            }
         });

         var dataUpdated = JSON.stringify(dataHlpFiles, null, 2);
         fs.writeFile('./app/data/PDFData.json', dataUpdated, finished);
         function finished(Err) {
            console.log('saved correctly');
         }
      }
   }, {
      key: 'render',
      value: function render() {
         var _this2 = this;

         var getRawHTML = function getRawHTML(html) {
            return {
               __html: html
            };
         };

         var renderOutFile = this.props.data.filter(function (obj) {
            return _this2.state.diaToFind === obj.name;
         }).map(function (obj, idx) {
            _this2.state.phName = obj.name;
            _this2.state.phSection = obj.section;
            _this2.state.phContent = obj.content;
            return _react2.default.createElement(
               'div',
               { key: idx, className: 'fadingDiv' },
               _react2.default.createElement(
                  'div',
                  { className: 'displayLineBreak' },
                  _react2.default.createElement(
                     'h2',
                     { style: upperStyle },
                     ' ',
                     obj.name,
                     ' '
                  ),
                  _react2.default.createElement(
                     'b',
                     null,
                     'Section:'
                  ),
                  ' ',
                  obj.section,
                  ' ',
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) }),
                  _react2.default.createElement('br', null)
               )
            );
         });

         var renderOutHTML = this.props.data.filter(function (obj) {
            return _this2.state.diaToFind === obj.name;
         }).map(function (obj, idx) {
            return _react2.default.createElement(
               'div',
               { key: idx, className: 'fadingDiv' },
               _react2.default.createElement(
                  'div',
                  { className: 'displayLineBreak' },
                  _react2.default.createElement(
                     'h2',
                     { style: upperStyle },
                     ' ',
                     obj.name,
                     ' '
                  ),
                  _react2.default.createElement(
                     'b',
                     null,
                     'Section:'
                  ),
                  ' ',
                  obj.section,
                  ' ',
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('br', null),
                  _react2.default.createElement(
                     'div',
                     null,
                     obj.content
                  ),
                  _react2.default.createElement('br', null)
               )
            );
         });

         return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
               'label',
               null,
               _react2.default.createElement(
                  'b',
                  null,
                  'SEARCH BY SECTION TITLE'
               )
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement('input', { className: 'inputHlp', type: 'text', name: 'diaToFind', placeholder: 'Ex. Section One or Safety', value: this.state.diaToFind, onChange: this.handleChange.bind(this) }),
            _react2.default.createElement('br', null),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
               'form',
               { onSubmit: this.handleSubmit.bind(this) },
               _react2.default.createElement(
                  'label',
                  null,
                  _react2.default.createElement(
                     'b',
                     null,
                     'CONTENT:'
                  )
               ),
               _react2.default.createElement('br', null),
               _react2.default.createElement('textarea', { className: 'txtInput', name: 'content', placeholder: this.state.phContent, value: this.state.content, onChange: this.handleChange.bind(this) }),
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               _react2.default.createElement('input', { className: 'subBtn', type: 'submit', value: 'UPDATE' })
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
               'h3',
               null,
               'VIEW OF SECTION'
            ),
            _react2.default.createElement('br', null),
            renderOutFile,
            _react2.default.createElement(
               'h3',
               null,
               'VIEW OF SECITON W/HTML'
            ),
            _react2.default.createElement('br', null),
            renderOutHTML
         );
      }
   }]);

   return EditPDF;
}(_react.Component);

EditPDF.propTypes = {
   data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

EditPDF.defaultProps = {
   data: _PDFData2.default
};

exports.default = EditPDF;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(3);

var _react2 = _interopRequireDefault(_react);

var _application = __webpack_require__(7);

var _application2 = _interopRequireDefault(_application);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _HelpFileData = __webpack_require__(18);

var _HelpFileData2 = _interopRequireDefault(_HelpFileData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var imgPath = './app/img/';

var upperStyle = {
   textTransform: 'uppercase'
};

var MainRender = function (_Component) {
   _inherits(MainRender, _Component);

   function MainRender(props) {
      _classCallCheck(this, MainRender);

      var _this = _possibleConstructorReturn(this, (MainRender.__proto__ || Object.getPrototypeOf(MainRender)).call(this, props));

      _this.state = {
         diaToFind: ''
      };
      return _this;
   }

   _createClass(MainRender, [{
      key: 'handleChange',
      value: function handleChange(e) {
         var target = e.target;
         var value = target.type === 'checkbox' ? target.checked : target.value;
         var name = target.name;

         value = value.charAt(0).toUpperCase() + value.substr(1);

         this.setState(_defineProperty({}, name, value));
      }
   }, {
      key: 'render',
      value: function render() {
         var _this2 = this;

         var getRawHTML = function getRawHTML(html) {
            return {
               __html: html
            };
         };

         var renderOutFile = this.props.data.filter(function (obj) {
            return _this2.state.diaToFind === obj.title;
         }).map(function (obj, idx) {
            return _react2.default.createElement(
               'div',
               { key: idx, className: 'fadingDiv' },
               _react2.default.createElement(
                  'div',
                  { className: 'displayLineBreak' },
                  _react2.default.createElement(
                     'h2',
                     { style: upperStyle },
                     ' ',
                     obj.title,
                     ' '
                  ),
                  _react2.default.createElement(
                     'b',
                     null,
                     'Path:'
                  ),
                  ' ',
                  obj.path,
                  ' ',
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('br', null),
                  _react2.default.createElement('div', { dangerouslySetInnerHTML: getRawHTML(obj.content) }),
                  _react2.default.createElement('br', null)
               )
            );
         });

         return _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
               'label',
               null,
               _react2.default.createElement(
                  'b',
                  null,
                  'SEARCH FOR HELP TOPIC BY DIALOG NAME'
               )
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement('input', { className: 'inputSearch', type: 'text', name: 'diaToFind', placeholder: ':::SEARCH:::   Ex. \'Limits\' ', value: this.state.diaToFind, onChange: this.handleChange.bind(this) }),
            _react2.default.createElement('br', null),
            renderOutFile,
            _react2.default.createElement(
               'h2',
               null,
               'OVERVIEW  1.2'
            ),
            _react2.default.createElement(
               'p',
               null,
               'Git hub version control test ',
               _react2.default.createElement('br', null),
               'I will be adding the new search system here - but for right now Im testing the version control I recently setup'
            ),
            _react2.default.createElement(
               'p',
               null,
               'testing this new CHANGE here'
            ),
            _react2.default.createElement(
               'p',
               null,
               'Lewis Controls system software is configured in a series of menus.  When the system is powered up the MAIN MENU will either appear on the touchscreen or can be called up by double clicking on the icon for the LCI Carriage Menu. ',
               _react2.default.createElement('br', null),
               ' ',
               _react2.default.createElement('br', null),
               'The simplest way to access menu items is to use the touch screen.  Touch the button for the menu you want; enter values in the screen; touch Accept to save the values and touch Cancel to return to the menu.  You may also use the up and down arrow keys on the keyboard to highlight an individual menu item.  Pressing the (ENTER) key will pull up the submenu for the highlighted selection.   If a sub menu opens a dialog box, use text and numeric keys to modify entries.  Press the tab to move from entry to entry.  Press (ENTER) to save the values.  Press (ESC) to return to the menu.  You may also use the mouse to select menu items; simply place the mouse pointer over the button and press the left mouse button. ',
               _react2.default.createElement('br', null),
               ' ',
               _react2.default.createElement('br', null),
               'The escape key (ESC) will take you back to the previous menu.  For example, if you have just changed the target thickness on 2 inch nominal lumber, pressing the escape (ESC) will bring you to the LUMBER OPTIONS sub menu.  Pressing it again will take you back to the MAIN MENU. ',
               _react2.default.createElement('br', null),
               _react2.default.createElement('br', null),
               'For your convenience, you may print any of our Carriage Menus or Dialog boxes.  There are several methods of printing a window.  You may press (F12) to print just the current active window.  You may press (Print Screen) to print the entire screen.  These options are also available on the Window Control Menu.  To access the Window Control Menu use the mouse to right-click on the window title bar or press (ALT-SPACEBAR).  From the Window Control Menu, you will see options for Print Window, Print Screen, and may also see an option to Print Entire Listbox.  The Print Entire Listbox option can be used to dump a listing (ex. Setworks History).  This can be very useful when debugging a problem within a system. ',
               _react2.default.createElement('br', null),
               ' ',
               _react2.default.createElement('br', null)
            )
         );
      }
   }]);

   return MainRender;
}(_react.Component);

MainRender.propTypes = {
   data: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

MainRender.defaultProps = {
   data: _HelpFileData2.default
};

exports.default = MainRender;

/***/ })
/******/ ]);